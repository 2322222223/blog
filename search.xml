<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LLM-RAG篇</title>
      <link href="/blog/2024/06/28/LLM-RAG%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/blog/2024/06/28/LLM-RAG%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="LLM-RAG篇"><a href="#LLM-RAG篇" class="headerlink" title="LLM-RAG篇"></a>LLM-RAG篇</h2><h2 id="一、LLMs-已经具备了较强能力了，为什么还需要-RAG-检索增强生成"><a href="#一、LLMs-已经具备了较强能力了，为什么还需要-RAG-检索增强生成" class="headerlink" title="一、LLMs 已经具备了较强能力了，为什么还需要 RAG(检索增强生成)?"></a><strong>一、LLMs 已经具备了较强能力了，为什么还需要 RAG(检索增强生成)?</strong></h2><p>尽管 LLM 已展现出显著的能力，但以下几个挑战依然值得关注：</p><ol><li><strong>幻觉问题</strong>：LLM 采用基于统计的概率方法逐词生成文本，这一机制内在地导致其可能出现看似逻辑严谨实则缺乏事实依据的输出，即所谓的“郑重其事的虚构陈述”；</li><li><strong>时效性问题</strong>：随着 LLM 规模扩大，训练成本与周期相应增加。鉴于此，包含最新信息的数据难以融入模型训练过程，导致 LLM 在应对诸如“请推荐当前热门影片”等时间敏感性问题时力有未逮；</li><li><strong>数据安全问题</strong>：通用的 LLM 没有企业内部数据和用户数据，那么企业想要在保证安全的前提下使用 LLM，最好的方式就是把数据全部放在本地，企业数据的业务计算全部在本地完成。而在线的大模型仅仅完成一个归纳的功能；</li></ol><h2 id="二、介绍一下-RAG"><a href="#二、介绍一下-RAG" class="headerlink" title="二、介绍一下 RAG?"></a><strong>二、介绍一下 RAG?</strong></h2><p>RAG（Retrieval Augmented Generation, 检索增强生成）是一种技术框架，其核心在于当 LLM 面对解答问题或创作文本任务时，首先会在大规模文档库中搜索并筛选出与任务紧密相关的素材，继而依据这些素材精准指导后续的回答生成或文本构造过程，旨在通过此种方式提升模型输出的准确性和可靠性。</p><p><img src="https://article-images.zsxq.com/Fka_fSha4n2e0WUd-AhxhgYes9-b" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><blockquote><p>RAG 技术架构图</p></blockquote><h2 id="三、RAG-主要包含哪些模块"><a href="#三、RAG-主要包含哪些模块" class="headerlink" title="三、RAG 主要包含哪些模块?"></a><strong>三、RAG 主要包含哪些模块?</strong></h2><ol><li>模块一：版面分析</li><li>本地知识文件读取（pdf、txt、html、doc、excel、png、jpg、语音等）</li><li>知识文件复原</li><li>模块二：知识库构建</li><li>知识文本分割，并构建Doc文本</li><li>Doc文本 embedding</li><li>Doc文本 构建索引</li><li>模块三：大模型微调</li><li>模块四：基于RAG的知识问答</li><li>用户query embedding</li><li>query 召回</li><li>query 排序</li><li>将 Top K 个相关的 Doc 进行拼接，构建 context</li><li>基于 query 和 context 构建 Prompt</li><li>将 prompt 喂给大模型生成答案</li></ol><h2 id="四、RAG-相较于直接使用-LLMs进行问答-有哪些优点"><a href="#四、RAG-相较于直接使用-LLMs进行问答-有哪些优点" class="headerlink" title="四、RAG 相较于直接使用 LLMs进行问答 有哪些优点?"></a><strong>四、RAG 相较于直接使用 LLMs进行问答 有哪些优点?</strong></h2><p>RAG（检索增强生成）方法赋予了开发者无需为每个特定任务重新训练大型模型的能力，仅需连接外部知识库，即可为模型注入额外的信息资源，从而显著提升其回答的精确度。这一方法尤其适用于那些高度依赖专业知识的任务。</p><p>以下是 RAG 模型的主要优势：</p><ol><li><strong>可扩展性</strong>：减小模型规模及训练开销，同时简化知识库的扩容更新过程。</li><li><strong>准确性</strong>：通过引用信息源，用户能够核查答案的可信度，进而增强对模型输出结果的信任感。</li><li><strong>可控性</strong>：支持知识内容的灵活更新与个性化配置。</li><li><strong>可解释性</strong>：展示模型预测所依赖的检索条目，增进理解与透明度。</li><li><strong>多功能性</strong>：RAG 能够适应多种应用场景的微调与定制，涵盖问答、文本摘要、对话系统等领域。</li><li><strong>时效性</strong>：运用检索技术捕捉最新信息动态，确保回答既即时又准确，相比仅依赖固有训练数据的语言模型具有明显优势。</li><li><strong>领域定制性</strong>：通过对接特定行业或领域的文本数据集，RAG 能够提供针对性的专业知识支持。</li><li><strong>安全性</strong>：通过在数据库层面实施角色划分与安全管控，RAG 有效强化了对数据使用的管理，相较于微调模型在数据权限管理上的潜在模糊性，展现出更高的安全性。</li></ol><h2 id="五、对比一下-RAG-和-SFT，说一下两者有哪些区别？"><a href="#五、对比一下-RAG-和-SFT，说一下两者有哪些区别？" class="headerlink" title="五、对比一下 RAG 和 SFT，说一下两者有哪些区别？"></a><strong>五、对比一下 RAG 和 SFT，说一下两者有哪些区别？</strong></h2><p>实际上，对于 LLM 存在的上述问题，SFT 是一个最常见最基本的解决办法，也是 LLM 实现应用的基础步骤。那么有必要在多个维度上比较一下两种方法：</p><p><img src="https://article-images.zsxq.com/FnjdYMAp0bvjWfMzpFVxgc6Sp0dZ" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p>当然这两种方法并非非此即彼的，合理且必要的方式是结合业务需要与两种方法的优点，合理使用两种方法。</p><p><img src="https://article-images.zsxq.com/FhWAekdcV64YEMKXCt08Kurka5Ig" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><h2 id="SimpleRAG-实战篇"><a href="#SimpleRAG-实战篇" class="headerlink" title="SimpleRAG 实战篇"></a><strong>SimpleRAG 实战篇</strong></h2><ol><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_roqf2ge4c1b3.html">【RAG 实战——SimpleRAG篇】</a></strong></li></ol><h2 id="模块一：版面分析"><a href="#模块一：版面分析" class="headerlink" title="模块一：版面分析"></a><strong>模块一：版面分析</strong></h2><h3 id="为什么-需要-版面分析？"><a href="#为什么-需要-版面分析？" class="headerlink" title="为什么 需要 版面分析？"></a><strong>为什么 需要 版面分析？</strong></h3><p>尽管RAG（检索增强生成）技术的核心价值在于其结合检索与生成手段以提升文本内容的精确度与连贯性，然而在一些具体应用领域，如文档解析、智能化写作及对话系统构建中，特别是在面对结构化或半结构化信息的处理需求时，其功能边界可能拓展至版面分析。这是由于此类信息往往嵌于特定的布局结构中，需要对页面元素及其相互关系进行深入理解。</p><p>此外，当RAG模型面对包含丰富多媒体或多模态成分的数据源，诸如网页、PDF文件、富文本记录、Word文档、图像资料、语音片段、表格数据等复杂内容时，为了能高效地摄取并利用这些非文本信息，具备基本的版面分析能力变得至关重要。这种能力有助于模型精准解析各类信息单元，并成功将它们融合成有意义的整体解读。</p><h3 id="step-1：本地知识文件获取"><a href="#step-1：本地知识文件获取" class="headerlink" title="step 1：本地知识文件获取"></a><strong>step 1：本地知识文件获取</strong></h3><h4 id="q1：如何进行-本地知识文件获取？"><a href="#q1：如何进行-本地知识文件获取？" class="headerlink" title="q1：如何进行 本地知识文件获取？"></a><strong>q1：如何进行 本地知识文件获取？</strong></h4><p>本地知识文件获取涉及从多种数据源（如.txt、.pdf、.html、.doc、.xlsx、.png、.jpg、音频文件等）提取信息的过程。针对不同类型的文件，需要采取特定的访问与解析策略来有效获取其中蕴含的知识。下面我们将介绍对于不同数据源数据的获取方式和难点。</p><h4 id="q2：如何获取-富文本txt-中内容？"><a href="#q2：如何获取-富文本txt-中内容？" class="headerlink" title="q2：如何获取 富文本txt 中内容？"></a>q2：如何获取 富文本txt 中内容？</h4><ol><li>介绍：富文本 主要存储于 txt 文件中，因为排版比较整洁，所以获取方式比较简单</li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_x01sdalig305.html">【版面分析——富文本txt读取】</a></li></ol><h4 id="q3：如何获取-PDF文档-中内容？"><a href="#q3：如何获取-PDF文档-中内容？" class="headerlink" title="q3：如何获取 PDF文档 中内容？"></a><strong>q3：如何获取 PDF文档 中内容？</strong></h4><ol><li>介绍：PDF文档中数据比较复杂，包含文本、图片、表格等不同样式的数据，所以解析过程中会比较复杂</li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_q02kt8h2cdn9.html">【版面分析——PDF 解析神器 pdfplumber】</a></li><li><a href="https://articles.zsxq.com/id_qmjw5wgbhs1s.html">【版面分析——PDF 解析神器 PyMuPDF】</a></li></ol><h4 id="q4：如何获取-HTML文档-中内容？"><a href="#q4：如何获取-HTML文档-中内容？" class="headerlink" title="q4：如何获取 HTML文档 中内容？"></a><strong>q4：如何获取 HTML文档 中内容？</strong></h4><ol><li>介绍：PDF文档中数据比较复杂，包含文本、图片、表格等不同样式的数据，所以解析过程中会比较复杂</li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_ptqivfoinkp8.html">【版面分析——网页HTML解析 BeautifulSoup】</a></li></ol><h4 id="q5：如何获取-Doc文档-中内容？"><a href="#q5：如何获取-Doc文档-中内容？" class="headerlink" title="q5：如何获取 Doc文档 中内容？"></a><strong>q5：如何获取 Doc文档 中内容？</strong></h4><ol><li>介绍：Doc文档中数据比较复杂，包含文本、图片、表格等不同样式的数据，所以解析过程中会比较复杂</li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_wshfpiwfn4t4.html">【版面分析——Docx 解析神器 python-docx】</a></li></ol><h4 id="q6：如何使用-OCR-获取图片内容？"><a href="#q6：如何使用-OCR-获取图片内容？" class="headerlink" title="q6：如何使用 OCR 获取图片内容？"></a><strong>q6：如何使用 OCR 获取图片内容？</strong></h4><ol><li>介绍：光学字符识别（Optical Character Recognition, OCR）是指对文本资料的图像文件进行分析识别处理，获取文字及版面信息的过程。亦即将图像中的文字进行识别，并以文本的形式返回。</li><li>思路：</li><li>文字检测：解决的问题是哪里有文字，文字的范围有多少；</li><li>文字识别：对定位好的文字区域进行识别，主要解决的问题是每个文字是什么，将图像中的文字区域进转化为字符信息。</li><li>目前开源的OCR项目</li><li><a href="https://github.com/tesseract-ocr/tesseract">Tesseract</a></li><li><a href="https://gitee.com/paddlepaddle/PaddleOCR">PaddleOCR</a></li><li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a></li><li><a href="https://github.com/chineseocr/chineseocr">chineseocr</a></li><li><a href="https://github.com/DayBreak-u/chineseocr_lite">chineseocr_lite</a></li><li><a href="https://github.com/alisen39/TrWebOCR">TrWebOCR</a></li><li><a href="https://github.com/breezedeus/cnocr">cnocr</a></li><li><a href="https://github.com/cnhnkj/hn_ocr">hn_ocr</a></li><li>理论学习：</li><li><a href="https://articles.zsxq.com/id_u8f1xl8v9hvd.html">【版面分析——图片解析神器 OCR】</a></li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_40jnz2gj6ttk.html">【版面分析——OCR神器 tesseract】</a></li><li><a href="https://articles.zsxq.com/id_zdut9rwjrh64.html">【版面分析——OCR神器 PaddleOCR】</a></li><li><a href="https://articles.zsxq.com/id_ciu0at0acror.html">【版面分析——OCR神器 hn_ocr】</a></li></ol><h4 id="q7：如何使用-ASR-获取语音内容？"><a href="#q7：如何使用-ASR-获取语音内容？" class="headerlink" title="q7：如何使用 ASR 获取语音内容？"></a><strong>q7：如何使用 ASR 获取语音内容？</strong></h4><ol><li>别称：自动语音识别AutomaTlc Speech RecogniTlon，(ASR)</li><li>介绍：将一段语音信号转换成相对应的文本信息，好比”机器的听觉系统”，它让机器通过识别和理解，把语音信号转变为相应的文本或命令。</li><li>目标：将人类的语音中的词汇内容转换为计算机可读的输入（eg:按键、二进制编码或者字符序列）</li><li>思路：</li><li>声学信号预处理：为了更有效地提取特征往往还需要对所采集到的声音信号进行滤波、分帧等预处理工作，把要分析的信号从原始信号中提取出来；</li><li>特征提取：将声音信号从时域转换到频域，为声学模型提供合适的特征向量;</li><li>声学模型：根据声学特性计算每一个特征向量在声学特征上的得分;</li><li>语言模型：根据语言学相关的理论，计算该声音信号对应可能词组序列的概率;</li><li>字典与解码：根据已有的字典，对词组序列进行解码，得到最后可能的文本表示</li><li>理论教程：</li><li><a href="https://articles.zsxq.com/id_v6wuwr064b9j.html">【版面分析 之 语音识别】</a></li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_evjplrfsjmci.html">【版面分析 之 Speech-to-Text】</a></li><li><a href="https://articles.zsxq.com/id_o8ur4u6eilbq.html">【版面分析 之 WeTextProcessing】</a></li><li><a href="https://articles.zsxq.com/id_mw0bod4kdbre.html">【版面分析——ASR神器 Wenet】</a></li><li><a href="https://articles.zsxq.com/id_rhvivt6wmuwh.html">【版面分析 之 ASR神器训练】</a></li></ol><h3 id="step-2：知识文件复原"><a href="#step-2：知识文件复原" class="headerlink" title="step 2：知识文件复原"></a><strong>step 2：知识文件复原</strong></h3><h4 id="q1：为什么需要进行-知识文件复原？"><a href="#q1：为什么需要进行-知识文件复原？" class="headerlink" title="q1：为什么需要进行 知识文件复原？"></a><strong>q1：为什么需要进行 知识文件复原？</strong></h4><p>本地知识文件获取包含对多源化数据（txt、pdf、html、doc、excel、png、jpg、语音等）进行读取之后，容易将一个多行段落分割成多个段落，从而导致段落遇到被分割，所以需要根据内容逻辑重新组织段落。</p><h4 id="q2：如何对-知识文件进行复原？"><a href="#q2：如何对-知识文件进行复原？" class="headerlink" title="q2：如何对 知识文件进行复原？"></a><strong>q2：如何对 知识文件进行复原？</strong></h4><ol><li>方法一：基于规则的知识文件复原</li><li>思路：根据识别段落的左右边距和末尾的标点符号进行合并</li><li>如何判断该段落是否为原始段落末尾？</li><li>如果最后一个字符离有边界距离较远，那么该段落为句子的末尾</li><li>如果最后一个字符为 句号 或者其他终止符，那么该段落为句子的末尾</li><li>方法二：基于 Bert NSP 进行上下句拼接</li><li>思路：<strong>语义切分方法2</strong>：除了discourse parsing的工具外，还可以写一个简单算法<strong>利用BERT等模型来实现语义分割</strong>。BERT等模型在预训练的时候采用了NSP（next sentence prediction）的训练任务，因此BERT完全可以判断两个句子（段落）是否具有语义衔接关系。这里我们可以设置相似度阈值t，从前往后依次判断相邻两个段落的相似度分数是否大于t，如果大于则合并，否则断开。当然算法为了效率，可以采用二分法并行判定，模型也不用很大，笔者用BERT-base-Chinese在中文场景中就取得了不错的效果。</li><li>代码逻辑：</li></ol><p>基于 Bert NSP 进行上下句预测代码</p><p> def is_nextsent(sent, next_sent):</p><p>​        encoding &#x3D; tokenizer(sent, next_sent, return_tensors&#x3D;”pt”,truncation&#x3D;True, padding&#x3D;False)</p><p>​        with torch.no_grad():</p><p>​            outputs &#x3D; model(**encoding, labels&#x3D;torch.LongTensor([1]))</p><p>​            logits &#x3D; outputs.logits</p><p>​            probs &#x3D; torch.softmax(logits&#x2F;TEMPERATURE, dim&#x3D;1)</p><p>​            next_sentence_prob &#x3D; probs[:, 0].item()</p><p>​        if next_sentence_prob &lt;&#x3D; MERGE_RATIO:</p><p>​            return False</p><p>​        else:</p><p>​            return True</p><h3 id="step-3：版面分析———优化策略篇"><a href="#step-3：版面分析———优化策略篇" class="headerlink" title="step 3：版面分析———优化策略篇"></a><strong>step 3：版面分析———优化策略篇</strong></h3><ol><li>理论学习：</li><li><a href="https://articles.zsxq.com/id_4hhb8tu6wtbm.html">【版面分析———优化策略篇】</a></li></ol><h3 id="step-4：Homework"><a href="#step-4：Homework" class="headerlink" title="step 4：Homework"></a><strong>step 4：Homework</strong></h3><ol><li>任务描述：使用上述方法对 【<a href="https://tianchi.aliyun.com/specials/promotion/SMP2023ChatGLMChallenge">SMP 2023 ChatGLM金融大模型挑战赛</a>】的 【<a href="https://modelscope.cn/datasets/modelscope/chatglm_llm_fintech_raw_dataset/summary?spm=a2c22.12281978.0.0.13472420ZI1gfg">ChatGLM评估挑战赛-金融赛道数据集</a>】进行版面分析</li><li>任务效果：分析各种方法效果和性能</li></ol><h2 id="模块二：知识库构建"><a href="#模块二：知识库构建" class="headerlink" title="模块二：知识库构建"></a><strong>模块二：知识库构建</strong></h2><h3 id="为什么-需要-知识库构建？"><a href="#为什么-需要-知识库构建？" class="headerlink" title="为什么 需要 知识库构建？"></a><strong>为什么 需要 知识库构建？</strong></h3><p>在RAG（Retrieval-Augmented Generation）中构建知识库是至关重要的，原因包括但不限于以下几点：</p><ol><li><strong>扩展模型能力</strong>：大规模语言模型如GPT系列虽然具有强大的语言生成和理解能力，但受限于训练数据集的覆盖范围，它们可能无法准确回答一些基于特定事实或详细背景信息的问题。通过构建知识库，RAG可以补充模型自身的知识局限性，允许模型检索到最新、最准确的信息来生成答案。</li><li><strong>实时更新信息</strong>：知识库可以实时更新和扩充，确保模型能够获取最新的知识内容，这对于处理时效性强的信息尤为关键，比如新闻事件、科技进展等。</li><li><strong>提高准确性</strong>：RAG结合了检索与生成两个过程，在生成回答前先检索相关文档，从而提高了回答问题时的准确性。这样，模型生成的答案不仅基于其内部参数化的知识，还基于外部可靠来源的知识库。</li><li><strong>减少过拟合与hallucination（幻觉生成）</strong>：大模型有时会因为过度依赖内在模式而出现hallucination现象，即生成看似合理实则无依据的答案。通过引用知识库中的确切证据，RAG可以降低此类错误产生的可能性。</li><li><strong>增强可解释性</strong>：RAG不仅能提供答案，还能指出答案的来源，增强了模型生成结果的透明度和可信度。</li><li><strong>支持个性化及私有化需求</strong>： 对于企业或个人用户，可以通过构建专属知识库满足特定领域或私人定制的需求，使得大模型能更好地服务于特定场景和业务。</li></ol><p>综上所述，构建知识库对于RAG模型来说，是实现高效准确地检索并生成答案的核心机制之一，它极大地提升了模型在实际应用中的性能和可靠性。</p><h3 id="step-1：知识文本分块"><a href="#step-1：知识文本分块" class="headerlink" title="step 1：知识文本分块"></a><strong>step 1：知识文本分块</strong></h3><ol><li>为什么需要对文本分块？</li><li><strong>信息丢失的风险</strong>：试图一次性提取整个文档的嵌入向量，虽然可以捕捉到整体的上下文，但也可能会忽略掉许多针对特定主题的重要信息，这可能会导致生成的信息不够精确或者有所缺失。</li><li><strong>分块大小的限制</strong>：在使用如OpenAI这样的模型时，分块大小是一个关键的限制因素。例如，GPT-4模型有一个32K的窗口大小限制。尽管这个限制在大多数情况下不是问题，但从一开始就考虑到分块大小是很重要的。</li><li>主要考虑两个因素：</li><li>embedding模型的Tokens限制情况；</li><li>语义完整性对整体的检索效果的影响；</li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_rkscmgr99w7v.html">【知识库构建——知识文本分块】</a></li><li><a href="https://articles.zsxq.com/id_tj26lav19t2l.html">【知识库构建——文档切分优化策略篇】</a></li></ol><h3 id="step-2：Docs-向量化（embdeeing）"><a href="#step-2：Docs-向量化（embdeeing）" class="headerlink" title="step 2：Docs 向量化（embdeeing）"></a><strong>step 2：Docs 向量化（embdeeing）</strong></h3><h4 id="q1：什么是Docs-向量化（embdeeing）？"><a href="#q1：什么是Docs-向量化（embdeeing）？" class="headerlink" title="q1：什么是Docs 向量化（embdeeing）？"></a><strong>q1：什么是Docs 向量化（embdeeing）？</strong></h4><p>Embedding 也是文本语义含义的信息密集表示，每个嵌入都是一个浮点数向量，使得向量空间中两个嵌入之间的距离与原始格式中两个输入之间的语义相似性相关联。</p><p>例如，如果两个文本相似，则它们的向量表示也应该相似，这一组向量空间内的数组表示描述了文本之间的细微特征差异。</p><p>简单来说，Embedding 帮助计算机来理解如人类信息所代表的“含义”，Embedding 可以用来获取文本、图像、视频、或其他信息的特征“相关性”，这种相关性在应用层面常用于搜索、推荐、分类、聚类。</p><p><img src="https://article-images.zsxq.com/FlTKcgVD5UHkGELwNDusn07E_wP0" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><h4 id="q2：Embedding-是如何工作的？"><a href="#q2：Embedding-是如何工作的？" class="headerlink" title="q2：Embedding 是如何工作的？"></a><strong>q2：Embedding 是如何工作的？</strong></h4><p>举例来讲，这里有三句话：</p><ol><li>“The cat chases the mouse” “猫追逐老鼠”</li><li>“The kitten hunts rodents” 小猫捕猎老鼠。</li><li>“I like ham sandwiches” 我喜欢火腿三明治。</li></ol><p>如果是人类来将这三个句子来分类，句子 1 和句子 2 几乎是同样的含义，而句子 3 却完全不同。但我们看到在英文原文句子中，句子 1 和句子 2 只有“The”是相同的，没有其他相同词汇。计算机该如何理解前两个句子的相关性？</p><p>Embedding 将离散信息（单词和符号）压缩为分布式连续值数据（向量）。如果我们将之前的短语绘制在图表上，它可能看起来像这样：</p><p><img src="https://article-images.zsxq.com/Fvf99TWc_lKZos01GZbnVUtRE0SE" alt="img"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p>在文本被 Embedding 压缩到计算机可以理解的多维向量化空间之后，由于句子 1 和 2 的含义相似，它们会被绘制在彼此附近。句子 3 却距离较远，因为它与它们没有关联。如果我们有第四个短语 “Sally 吃了瑞士奶酪”，它可能存在于句子 3（奶酪可以放在三明治上）和句子 1（老鼠喜欢瑞士奶酪）之间的某个地方。</p><h4 id="q3：Embedding-的语义检索方式对比关键词检索的优势？"><a href="#q3：Embedding-的语义检索方式对比关键词检索的优势？" class="headerlink" title="q3：Embedding 的语义检索方式对比关键词检索的优势？"></a><strong>q3：Embedding 的语义检索方式对比关键词检索的优势？</strong></h4><ol><li><strong>语义理解</strong>： 基于 Embedding 的检索方法通过词向量来表示文本，这使得模型能够捕捉到词汇之间的语义联关系，相比之下，基于关键词的检索往往关注字面匹配，可能忽略了词语之间的语义联系。</li><li><strong>容错性</strong>： 由于基于 Embedding 的方法能够理解词汇之间的关系，所以在处理拼写错误、同义词、近义词等情况时更具优势。而基于关键词的检索方法对这些情况的处理相对较弱。</li><li><strong>多语言支持</strong>： 许多 Embedding 方法可以支持多种语言，有助于实现跨语言的文本检索。比如你可以用中文输入来查询英文文本内容，而基于关键词的检索方法很难做到这一点。</li><li><strong>语境理解</strong>： 基于 Embedding 的方法在处理一词多义的情况时更具优势，因为它能够根据上下文为词语赋予不同的向量表示。而基于关键词的检索方法可能无法很好地区分同一个词在不同语境下的含义。</li></ol><h4 id="q4：Embedding检索存在哪些限制"><a href="#q4：Embedding检索存在哪些限制" class="headerlink" title="q4：Embedding检索存在哪些限制?"></a><strong>q4：Embedding检索存在哪些限制?</strong></h4><ol><li><strong>输入词数限制</strong>： 即便借助Embedding技术选取与查询最为匹配的文本片段供大型模型参考，词汇数量的约束依然存在。当检索覆盖的文本范围广泛时，为了控制注入模型的上下文词汇量，通常会对检索结果设定TopK的阈值K，但这不可避免地引发了信息遗漏的问题。</li><li><strong>仅支持文本数据</strong>： 现阶段的GPT-3.5及诸多大型语言模型尚不具备图像识别功能，然而，在知识检索过程中，许多关键信息往往依赖于图文结合来充分理解。例如，学术论文中的示意图、财务报告中的数据图表，仅凭文本难以精准把握其内涵。</li><li><strong>大模型的胡编乱造</strong>： 当检索到的相关文献资料不足以支撑大型模型准确回答问题时，为尽力完成响应，模型可能会出现一定程度的“即兴创作”，即在有限信息基础上进行推测与补充。</li><li>理论学习：</li><li><a href="https://articles.zsxq.com/id_b042uca0dpn4.html">【知识库构建—Doc 向量化】</a></li><li>实战技巧：</li><li><a href="https://articles.zsxq.com/id_kupfkifz6phb.html">【Docs向量化——腾讯词向量】</a></li><li><a href="https://articles.zsxq.com/id_l5ew9h3iemt9.html">【Docs向量化——sbert】</a></li><li><a href="https://articles.zsxq.com/id_03zew57t2zdk.html">【Docs向量化——SimCSE】</a></li><li><a href="https://articles.zsxq.com/id_9wtoqvta1cw9.html">【Docs向量化——text2vec】</a></li><li><a href="https://articles.zsxq.com/id_nhmdc54h1j4q.html">【Docs向量化——SGPT】</a></li><li><a href="https://articles.zsxq.com/id_woj99hecibdd.html">【Docs向量化——BGE —— 智源开源最强语义向量模型】</a></li><li><a href="https://articles.zsxq.com/id_ltr45nojb0wo.html">【Docs向量化——M3E：一种大规模混合embedding】</a></li></ol><h3 id="step-3：Docs-构建索引"><a href="#step-3：Docs-构建索引" class="headerlink" title="step 3：Docs 构建索引"></a><strong>step 3：Docs 构建索引</strong></h3><ol><li>介绍</li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_9adfmnhcppou.html">【Docs构建索引——Faiss】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_67uolswwomqx.html">【Docs构建索引——milvus】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_7evv3mtfdxbw.html">【Docs构建索引—— Elasticsearch】</a></strong></li></ol><h2 id="模块三：大模型微调"><a href="#模块三：大模型微调" class="headerlink" title="模块三：大模型微调"></a><strong>模块三：大模型微调</strong></h2><h3 id="为什么-需要-大模型微调？"><a href="#为什么-需要-大模型微调？" class="headerlink" title="为什么 需要 大模型微调？"></a><strong>为什么 需要 大模型微调？</strong></h3><p>通常，要对大模型进行微调，有以下一些原因：</p><ol><li>第一个原因是，因为大模型的参数量非常大，<strong>训练成本非常高</strong>，每家公司都去从头训练一个自己的大模型，这个事情的性价比非常低；</li><li>第二个原因是，<strong>Prompt Engineering的方式是一种相对来说容易上手的使用大模型的方式，但是它的缺点也非常明显</strong>。因为通常大模型的实现原理，都会对输入序列的长度有限制，Prompt Engineering 的方式会把Prompt搞得很长。</li></ol><p>越长的Prompt，大模型的推理成本越高，因为推理成本是跟Prompt长度的平方正向相关的。</p><p>另外，Prompt太长会因超过限制而被截断，进而导致大模型的输出质量打折口，这也是一个非常严重的问题。</p><p>对于个人使用者而言，如果是解决自己日常生活、工作中的一些问题，直接用Prompt Engineering的方式，通常问题不大。</p><p>但对于对外提供服务的企业来说，要想在自己的服务中接入大模型的能力，推理成本是不得不要考虑的一个因素，微调相对来说就是一个更优的方案。</p><ol><li>第三个原因是，Prompt Engineering的效果达不到要求，企业又有比较好的自有数据，能够<strong>通过自有数据，更好的提升大模型在特定领域的能力</strong>。这时候微调就非常适用。</li><li>第四个原因是，<strong>要在个性化的服务中使用大模型的能力</strong>，这时候针对每个用户的数据，训练一个轻量级的微调模型，就是一个不错的方案。</li><li>第五个原因是，<strong>数据安全的问题</strong>。如果数据是不能传递给第三方大模型服务的，那么搭建自己的大模型就非常必要。通常这些开源的大模型都是需要用自有数据进行微调，才能够满足业务的需求，这时候也需要对大模型进行微调。</li></ol><h3 id="如何对大模型进行微调？"><a href="#如何对大模型进行微调？" class="headerlink" title="如何对大模型进行微调？"></a><strong>如何对大模型进行微调？</strong></h3><h4 id="q1：大模型的微调技术路线问题"><a href="#q1：大模型的微调技术路线问题" class="headerlink" title="q1：大模型的微调技术路线问题"></a><strong>q1：大模型的微调技术路线问题</strong></h4><p>从参数规模的角度，大模型的微调分成两条技术路线：</p><ol><li>技术路线一：对全量的参数，进行全量的训练，这条路径叫全量微调FFT(Full Fine Tuning)。</li><li>技术路线二：只对部分的参数进行训练，这条路径叫PEFT(Parameter-Efficient Fine Tuning)。</li></ol><h4 id="q2：大模型的全量微调FFT-技术存在哪些问题"><a href="#q2：大模型的全量微调FFT-技术存在哪些问题" class="headerlink" title="q2：大模型的全量微调FFT 技术存在哪些问题"></a><strong>q2：大模型的全量微调FFT 技术存在哪些问题</strong></h4><p>FFT也会带来一些问题，影响比较大的问题，主要有以下两个：</p><ol><li>问题一：<strong>训练的成本会比较高</strong>，因为微调的参数量跟预训练的是一样的多的；</li><li>问题二：**灾难性遗忘(Catastrophic Forgetting)**，用特定训练数据去微调可能会把这个领域的表现变好，但也可能会把原来表现好的别的领域的能力变差。</li></ol><h4 id="q3：大模型的-PEFT-Parameter-Efficient-Fine-Tuning-解决哪些问题"><a href="#q3：大模型的-PEFT-Parameter-Efficient-Fine-Tuning-解决哪些问题" class="headerlink" title="q3：大模型的 PEFT(Parameter-Efficient Fine Tuning) 解决哪些问题"></a><strong>q3：大模型的 PEFT(Parameter-Efficient Fine Tuning) 解决哪些问题</strong></h4><p>PEFT主要想解决的问题，就是FFT存在的上述两个问题，PEFT也是目前比较主流的微调方案。</p><p>从训练数据的来源、以及训练的方法的角度，大模型的微调有以下几条技术路线：</p><ol><li>技术路线一：**监督式微调SFT(Supervised Fine Tuning)**，这个方案主要是用人工标注的数据，用传统机器学习中监督学习的方法，对大模型进行微调；</li><li>技术路线二：**基于人类反馈的强化学习微调RLHF(Reinforcement Learning with Human Feedback)**，这个方案的主要特点是把人类的反馈，通过强化学习的方式，引入到对大模型的微调中去，让大模型生成的结果，更加符合人类的一些期望；</li><li>技术路线三：**基于AI反馈的强化学习微调RLAIF(Reinforcement Learning with AI Feedback)**，这个原理大致跟RLHF类似，但是反馈的来源是AI。这里是想解决反馈系统的效率问题，因为收集人类反馈，相对来说成本会比较高、效率比较低。</li></ol><p>不同的分类角度，只是侧重点不一样，对同一个大模型的微调，也不局限于某一个方案，可以多个方案一起。</p><p>微调的最终目的，是能够在可控成本的前提下，尽可能地提升大模型在特定领域的能力。</p><h3 id="大模型LLM进行SFT操作的时候在学习什么？"><a href="#大模型LLM进行SFT操作的时候在学习什么？" class="headerlink" title="大模型LLM进行SFT操作的时候在学习什么？"></a><strong>大模型LLM进行SFT操作的时候在学习什么？</strong></h3><ol><li>预训练-&gt;在大量无监督数据上进行预训练，得到基础模型–&gt;将预训练模型作为SFT和RLHF的起点。</li><li>SFT–&gt;在有监督的数据集上进行SFT训练，利用上下文信息等监督信号进一步优化模型–&gt;将SFT训练后的模型作为RLHF的起点。</li><li>RLHF–&gt;利用人类反馈进行强化学习，优化模型以更好地适应人类意图和偏好–&gt;将RLHF训练后的模型进行评估和验证，并进行必要的调整。</li></ol><h3 id="step-1：大模型微调训练数据构建"><a href="#step-1：大模型微调训练数据构建" class="headerlink" title="step 1：大模型微调训练数据构建"></a><strong>step 1：大模型微调训练数据构建</strong></h3><ol><li>介绍：如何构建 训练数据？</li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_nvvujwg77sn8.html">【大模型（LLMs）LLM生成SFT数据方法篇】</a></strong></li></ol><h3 id="step-2：大模型指令微调篇"><a href="#step-2：大模型指令微调篇" class="headerlink" title="step 2：大模型指令微调篇"></a><strong>step 2：大模型指令微调篇</strong></h3><ol><li>介绍：如何构建 训练数据？</li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_ddtrij3zbcic.html">【大模型（LLMs）继续预训练篇】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_fuxxu83p423m.html">【大模型（LLMs）指令微调篇】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_1ax2wmszimz2.html">【大模型（LLMs）奖励模型训练篇】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_3ap59jndj6fa.html">【大模型（LLMs）强化学习——PPO训练篇】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_89ivqmt4lw2j.html">【大模型（LLMs）强化学习——DPO训练篇】</a></strong></li></ol><h2 id="模块四：文档检索"><a href="#模块四：文档检索" class="headerlink" title="模块四：文档检索"></a><strong>模块四：文档检索</strong></h2><h3 id="为什么-需要-文档检索？"><a href="#为什么-需要-文档检索？" class="headerlink" title="为什么 需要 文档检索？"></a><strong>为什么 需要 文档检索？</strong></h3><p>文档检索 作为 RAG 核心工作，其效果对于下游工作至关重要。</p><p>虽然可以通过向量召回的方式从文档库里召回和用户问题相关的文档片段，同时输入到LLM中，增强模型回答质量。</p><p>常用的方式直接用用户的问题进行文档召回。但是很多时候，<strong>用户的问题是十分口语化的，描述的也比较模糊，这样会影响向量召回的质量，进而影响模型回答效果</strong>。</p><p>本章主要介绍 文档检索 过程中 存在的一些问题和对应的解决方法。</p><h3 id="step-1：文档检索负样本样本挖掘"><a href="#step-1：文档检索负样本样本挖掘" class="headerlink" title="step 1：文档检索负样本样本挖掘"></a><strong>step 1：文档检索负样本样本挖掘</strong></h3><ol><li>介绍：在各类检索任务中，为训练好一个高质量的检索模型，往往需要从大量的候选样本集合中采样高质量的负例，配合正例一起进行训练。</li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_cdtoftb6lfbb.html">【文档检索——负样本样本挖掘篇】</a></strong></li></ol><h3 id="step-2：文档检索优化策略"><a href="#step-2：文档检索优化策略" class="headerlink" title="step 2：文档检索优化策略"></a><strong>step 2：文档检索优化策略</strong></h3><ol><li>介绍：文档检索优化策略</li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_3x6c1sog5fi2.html">【文档检索——文档检索优化策略篇】</a></strong></li></ol><h2 id="模块五：Reranker"><a href="#模块五：Reranker" class="headerlink" title="模块五：Reranker"></a><strong>模块五：Reranker</strong></h2><h3 id="为什么-需要-Reranker？"><a href="#为什么-需要-Reranker？" class="headerlink" title="为什么 需要 Reranker？"></a><strong>为什么 需要 Reranker？</strong></h3><p>基本的 RAG 应用包括四个关键技术组成部分：</p><ol><li>Embedding 模型：用于将外部文档和用户查询转换成 Embedding 向量</li><li>向量数据库：用于存储 Embedding 向量和执行向量相似性检索（检索出最相关的 Top-K 个信息）</li><li>提示词工程（Prompt engineering）：用于将用户的问题和检索到的上下文组合成大模型的输入</li><li>大语言模型（LLM）：用于生成回答</li></ol><p>上述的基础 RAG 架构可以有效解决 LLM 产生“幻觉”、生成内容不可靠的问题。但是，<strong>一些企业用户对上下文相关性和问答准确度提出了更高要求，需要更为复杂的架构。一个行之有效且较为流行的做法就是在 RAG 应用中集成 Reranker</strong>。</p><h3 id="什么是-Reranker？"><a href="#什么是-Reranker？" class="headerlink" title="什么是 Reranker？"></a><strong>什么是 Reranker？</strong></h3><p><strong>Reranker 是信息检索（IR）生态系统中的一个重要组成部分，用于评估搜索结果，并进行重新排序，从而提升查询结果相关性</strong>。</p><p>在 RAG 应用中，主要在拿到向量查询（ANN）的结果后使用 Reranker，能够更有效地确定文档和查询之间的语义相关性，更精细地对结果重排，最终提高搜索质量。</p><h3 id="step-1：Reranker-篇"><a href="#step-1：Reranker-篇" class="headerlink" title="step 1：Reranker 篇"></a><strong>step 1：Reranker 篇</strong></h3><ol><li>理论学习：</li><li><strong><a href="https://articles.zsxq.com/id_hrdg0abngzww.html">【RAG文档检索——Reranker 篇】</a></strong></li><li>实战技巧：</li><li><strong><a href="https://articles.zsxq.com/id_ed7i2t32wdrz.html">【Reranker——bge-reranker篇】</a></strong></li></ol><h2 id="模块六：RAG-评测面"><a href="#模块六：RAG-评测面" class="headerlink" title="模块六：RAG 评测面"></a><strong>模块六：RAG 评测面</strong></h2><h3 id="为什么需要-对-RAG-进行评测？"><a href="#为什么需要-对-RAG-进行评测？" class="headerlink" title="为什么需要 对 RAG 进行评测？"></a><strong>为什么需要 对 RAG 进行评测？</strong></h3><p>在探索和优化 RAG（检索增强生成器）的过程中，如何有效评估其性能已经成为关键问题。</p><h3 id="step-1：RAG-评测-篇"><a href="#step-1：RAG-评测-篇" class="headerlink" title="step 1：RAG 评测 篇"></a><strong>step 1：RAG 评测 篇</strong></h3><ol><li>理论学习：</li><li><strong><a href="https://articles.zsxq.com/id_bs4s6x213o8i.html">【RAG评测篇】</a></strong></li></ol><h2 id="模块七：RAG-开源项目推荐学习"><a href="#模块七：RAG-开源项目推荐学习" class="headerlink" title="模块七：RAG 开源项目推荐学习"></a><strong>模块七：RAG 开源项目推荐学习</strong></h2><h3 id="为什么-需要-RAG-开源项目推荐学习？"><a href="#为什么-需要-RAG-开源项目推荐学习？" class="headerlink" title="为什么 需要 RAG 开源项目推荐学习？"></a><strong>为什么 需要 RAG 开源项目推荐学习？</strong></h3><p>前面已经带你走完了 RAG 的各个流程，下面将推荐一些 RAG 开源项目，帮助大佬们进行消化学习。</p><h4 id="RAG-开源项目推荐-——-RAGFlow-篇"><a href="#RAG-开源项目推荐-——-RAGFlow-篇" class="headerlink" title="RAG 开源项目推荐 —— RAGFlow 篇"></a><strong>RAG 开源项目推荐 —— RAGFlow 篇</strong></h4><ol><li>介绍：RAGFlow 是一款基于深度文档理解构建的开源 RAG（Retrieval-Augmented Generation）引擎。RAGFlow 可以为各种规模的企业及个人提供一套精简的 RAG 工作流程，结合大语言模型（LLM）针对用户各类不同的复杂格式数据提供可靠的问答以及有理有据的引用。</li><li>项目学习：</li><li><strong><a href="https://articles.zsxq.com/id_oota38wboidk.html">【RAG 项目推荐——RagFlow 篇(一)——RagFlow docker 部署】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_lfsekvfvqrs3.html">【RAG 项目推荐——RagFlow 篇(二)——RagFlow 知识库构建】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_ac0xn785c6mo.html">【RAG 项目推荐——RagFlow 篇(三)——RagFlow 模型供应商选择】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_aamqhv6h4lsn.html">【RAG 项目推荐——RagFlow 篇(四)——RagFlow 对话】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_ol0qu2w2eraf.html">【RAG 项目推荐——RagFlow 篇(五)——RAGFlow Api 接入（以 ollama 为例）】</a></strong></li><li><strong><a href="https://articles.zsxq.com/id_c0br2l9vkwi3.html">【RAG 项目推荐——RagFlow 篇(六)——RAGFlow 源码学习】</a></strong></li></ol><h4 id="RAG-开源项目推荐-——-QAnything-篇"><a href="#RAG-开源项目推荐-——-QAnything-篇" class="headerlink" title="RAG 开源项目推荐 —— QAnything 篇"></a><strong>RAG 开源项目推荐 —— QAnything 篇</strong></h4><ol><li>介绍：QAnything（Question and Answer based on Anything）是一个本地知识库问答系统，旨在支持多种文件格式和数据库，允许离线安装和使用。使用QAnything，您可以简单地删除本地存储的任何格式的文件，并获得准确、快速和可靠的答案。QAnything目前支持的知识库文件格式包括：PDF(pdf) , Word(docx) , PPT(pptx) , XLS(xlsx) , Markdown(md) , Email(eml) , TXT(txt) , Image(jpg，jpeg，png) , CSV (csv)、网页链接(html)等。</li><li>项目学习：</li><li><strong><a href="https://articles.zsxq.com/id_ead246k33bxk.html">【RAG 开源项目推荐 —— QAnything 篇】</a></strong></li></ol><h4 id="RAG-开源项目推荐-——-ElasticSearch-Langchain-篇"><a href="#RAG-开源项目推荐-——-ElasticSearch-Langchain-篇" class="headerlink" title="RAG 开源项目推荐 —— ElasticSearch-Langchain 篇"></a><strong>RAG 开源项目推荐 —— ElasticSearch-Langchain 篇</strong></h4><ol><li>介绍：受langchain-ChatGLM项目启发，由于Elasticsearch可实现文本和向量两种方式混合查询，且在业务场景中使用更广泛，因此本项目用Elasticsearch代替Faiss作为知识存储库，利用Langchain+Chatglm2实现基于自有知识库的智能问答。</li><li>项目学习：</li><li><strong><a href="https://articles.zsxq.com/id_0259did6jf16.html">【【LLMs 入门实战】基于 本地知识库 的高效 🤖ElasticSearch-Langchain-Chatglm2】</a></strong></li></ol><h4 id="RAG-开源项目推荐-——-Langchain-Chatchat-篇"><a href="#RAG-开源项目推荐-——-Langchain-Chatchat-篇" class="headerlink" title="RAG 开源项目推荐 —— Langchain-Chatchat 篇"></a><strong>RAG 开源项目推荐 —— Langchain-Chatchat 篇</strong></h4><ol><li>介绍：Langchain-Chatchat（原Langchain-ChatGLM）基于 Langchain 与 ChatGLM 等语言模型的本地知识库问答 | Langchain-Chatchat (formerly langchain-ChatGLM), local knowledge based LLM (like ChatGLM) QA app with langchain</li><li>项目学习：</li><li><strong><a href="https://github.com/chatchat-space/Langchain-Chatchat">【【LLMs 入门实战】基于 本地知识库 的高效 🤖Langchain-Chatchat】</a></strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> LLM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> ARG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序添加购物车动画</title>
      <link href="/blog/2024/06/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2024/06/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>因为最近在做一个添加购物车的页面,涉及到贝塞尔曲线绘制技术,在用户点击添加到购物车时，会出现一个小球从点击位置飞向购物车图标的位置，模拟商品被添加到购物车的动画效果。</p><p><img src="/blog/2024-06-15_11.45.05.gif" alt="效果图"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p>与是网上查阅资料,下面简单介绍下关于贝塞尔曲线的一些原理知识。</p><p>贝塞尔曲线通过一组控制点来定义其形状。最常见的贝塞尔曲线是二次和三次贝塞尔曲线。下面通过图文介绍其原理。</p><h4 id="1-二次贝塞尔曲线"><a href="#1-二次贝塞尔曲线" class="headerlink" title="1. 二次贝塞尔曲线"></a>1. 二次贝塞尔曲线</h4><p>二次贝塞尔曲线由三个点定义：起点 P0、控制点 P1 和终点 P2。曲线的方程如下：</p><p>B(t)&#x3D;(1−t)2P0+2(1−t)tP1+t2P2B(t) &#x3D; (1 - t)^2 P0 + 2(1 - t)t P1 + t^2 P2B(t)&#x3D;(1−t)2P0+2(1−t)tP1+t2P2</p><p>其中 ttt 是一个从 0 到 1 的参数，控制曲线从 P0 移动到 P2。</p><p><img src="/blog/b1.gif" alt="二次贝塞尔曲线"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p><em>图1：二次贝塞尔曲线</em></p><h4 id="2-三次贝塞尔曲线"><a href="#2-三次贝塞尔曲线" class="headerlink" title="2. 三次贝塞尔曲线"></a>2. 三次贝塞尔曲线</h4><p>三次贝塞尔曲线由四个点定义：起点 P0、两个控制点 P1 和 P2、以及终点 P3。曲线的方程如下：</p><p>B(t)&#x3D;(1−t)3P0+3(1−t)2tP1+3(1−t)t2P2+t3P3B(t) &#x3D; (1 - t)^3 P0 + 3(1 - t)^2 t P1 + 3(1 - t) t^2 P2 + t^3 P3B(t)&#x3D;(1−t)3P0+3(1−t)2tP1+3(1−t)t2P2+t3P3</p><p>同样，ttt 是一个从 0 到 1 的参数。</p><p><img src="/blog/b2.gif" alt="三次贝塞尔曲线"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p><em>图2：三次贝塞尔曲线</em></p><h3 id="贝塞尔曲线的构建步骤"><a href="#贝塞尔曲线的构建步骤" class="headerlink" title="贝塞尔曲线的构建步骤"></a>贝塞尔曲线的构建步骤</h3><p>以三次贝塞尔曲线为例：</p><ol><li><strong>线性插值</strong>：从 P0 到 P1、从 P1 到 P2 和从 P2 到 P3 进行线性插值，生成新的点 Q0、Q1 和 Q2。</li><li><strong>二次插值</strong>：对 Q0 到 Q1 和 Q1 到 Q2 进行线性插值，生成新的点 R0 和 R1。</li><li><strong>三次插值</strong>：对 R0 到 R1 进行线性插值，生成最终的贝塞尔曲线点 B(t)。</li></ol><p>通过这个过程，贝塞尔曲线的形状由控制点决定，不同的控制点位置会生成不同形状的曲线。</p><h3 id="贝塞尔曲线的应用"><a href="#贝塞尔曲线的应用" class="headerlink" title="贝塞尔曲线的应用"></a>贝塞尔曲线的应用</h3><ol><li><strong>矢量图形设计</strong>：贝塞尔曲线广泛应用于矢量图形软件（如 Adobe Illustrator 和 CorelDRAW）中，用于绘制平滑的曲线和形状。</li><li><strong>动画</strong>：贝塞尔曲线用于描述物体的运动路径，使动画看起来更加自然和流畅。</li><li><strong>UI设计</strong>：在 UI 设计中，贝塞尔曲线用于定义过渡动画，使界面交互更加生动。</li></ol><h3 id="贝塞尔曲线的优点"><a href="#贝塞尔曲线的优点" class="headerlink" title="贝塞尔曲线的优点"></a>贝塞尔曲线的优点</h3><ul><li><strong>平滑性</strong>：通过调整控制点，可以绘制非常平滑的曲线。</li><li><strong>可控性</strong>：控制点的位置直接影响曲线的形状，便于设计师精确调整。</li><li><strong>效率高</strong>：计算贝塞尔曲线的点只需要简单的线性插值操作，计算效率高。</li></ul><h3 id="组件目录"><a href="#组件目录" class="headerlink" title="组件目录"></a>组件目录</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">parabola-ball/</span><br><span class="line">├── components/</span><br><span class="line">│   ├── parabola-ball/</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   ├── index.wxss</span><br><span class="line">│   │   └── index.json</span><br><span class="line">├── pages/</span><br><span class="line">│   ├── <span class="keyword">index</span>/</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── index.wxml</span><br><span class="line">│   │   ├── index.wxss</span><br><span class="line">│   │   └── index.json</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">└── README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;startX, startY&#x27;</span>: <span class="keyword">function</span>(<span class="params">startX, startY</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> style = <span class="string">`--startX:<span class="subst">$&#123;startX&#125;</span>px;--startY:<span class="subst">$&#123;startY&#125;</span>px;--endX: <span class="subst">$&#123;<span class="variable language_">this</span>.data.endX&#125;</span>;--endY: <span class="subst">$&#123;<span class="variable language_">this</span>.data.endY&#125;</span>;`</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        style</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>index.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container animation&quot;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;show&#125;&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;&#123;&#123;style&#125;&#125;&quot;</span> <span class="attr">bindanimationend</span>=<span class="string">&quot;onAnimaEnd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>show</code>:是否展示动画。</li><li><code>onAnimaEnd</code>:动画结束的回调函数。</li></ul><p>index.wxss</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">  <span class="attribute">animation</span>: top-y <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">1</span>) forwards, </span><br><span class="line">             drop-y <span class="number">0.4s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.7</span>) <span class="number">0.3s</span> forwards,</span><br><span class="line">             scale-size <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.48</span>, <span class="number">0.33</span>, <span class="number">0.24</span>, <span class="number">1.18</span>) <span class="number">0.3s</span> forwards, </span><br><span class="line">             throwX <span class="number">0.7s</span> linear forwards, </span><br><span class="line">             show-hide <span class="number">0.7s</span> linear forwards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>css主要是cubic-bezier()来定义贝塞尔曲线的函数,其他是一些基本的动画和样式,该函数一共四个参数,可以结合以上内容理解P0和P3的关系,也可以使用<a href="https://cubic-bezier.com/">cubic-bezier</a> 一个神奇的可视化交互工具,可以通过拖动来控制动画的形状,感兴趣的可以去看一下。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><strong>引入组件</strong></li></ol><p>在页面的 JSON 文件中引入 <code>parabola-ball</code> 组件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ball&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/components/parabola-ball/index&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><strong>在页面中使用组件</strong></li></ol><p>在页面的 WXML 文件中使用 <code>parabola-ball</code> 组件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">  &lt;-你的组件-&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">ball</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">show</span>=<span class="string">&quot;&#123;&#123;show&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">startX</span>=<span class="string">&quot;&#123;&#123;startX&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">startY</span>=<span class="string">&quot;&#123;&#123;startY&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bind:animationHasDone</span>=<span class="string">&quot;handleAnimationEnd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ball</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>页面逻辑</strong></li></ol><p>在页面的 JS 文件中实现逻辑控制，包括点击事件处理和动画完成处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">dataList</span>: [],</span><br><span class="line">    <span class="attr">addList</span>: [],</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">endX</span>: <span class="string">&#x27;15vw&#x27;</span>,</span><br><span class="line">    <span class="attr">endY</span>: <span class="string">&#x27;92vh&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="variable language_">this</span>.<span class="title function_">generateTestData</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">dataList</span>: list</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">generateTestData</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> testData = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">      testData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="string">`食物<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">info</span>: &#123;</span><br><span class="line">          <span class="string">&quot;能量&quot;</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">500</span>) + <span class="number">50</span>&#125;</span>千卡`</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> testData;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onItemTap</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">item</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; clientX, clientY &#125; = event.<span class="property">touches</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">showBall</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">position</span>: &#123;</span><br><span class="line">        <span class="attr">startX</span>: clientX,</span><br><span class="line">        <span class="attr">startY</span>: clientY</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onAnimationHasDone</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">showBall</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onAddToCart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; currentFood, addList &#125; = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (!addList.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === currentFood.<span class="property">id</span>)) &#123;</span><br><span class="line">      addList.<span class="title function_">push</span>(currentFood);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        addList</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/2322222223/parabola-ball">github</a> 地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量化存储FAISS与Pgvector的对比</title>
      <link href="/blog/2024/06/14/%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%98%E5%82%A8FAISS%E4%B8%8EPgvector%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
      <url>/blog/2024/06/14/%E5%90%91%E9%87%8F%E5%8C%96%E5%AD%98%E5%82%A8FAISS%E4%B8%8EPgvector%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="FAISS-与-Pgvector-Scalability对比"><a href="#FAISS-与-Pgvector-Scalability对比" class="headerlink" title="FAISS 与 Pgvector Scalability对比"></a>FAISS 与 Pgvector Scalability对比</h2><table><thead><tr><th>功能特性</th><th>FAISS</th><th>Pgvector</th></tr></thead><tbody><tr><td>计算存储分离</td><td>❌</td><td>Yes（利用 pgvector 等解决方案来实现存储计算分离，将应用程序数据存储在一个数据库中，同时将向量、查找值和过滤值存储在另一个数据库中）</td></tr><tr><td>查询插入分离</td><td>No</td><td>❌</td></tr><tr><td>多副本</td><td>❌</td><td>❌</td></tr><tr><td>动态 Segment 替换 vs. 静态数据 Sharding</td><td>无分布式数据替换</td><td>❌</td></tr><tr><td>云原生</td><td>❌</td><td>❌</td></tr><tr><td>支持 10 亿级向量数据</td><td>❌</td><td>❌</td></tr><tr><td>可扩展性</td><td>FAISS 不支持单节点扩展</td><td>利用 YugaByteDB 等解决方案来扩展 Postgres 在分布式环境中的性能</td></tr><tr><td>基于角色的访问控制（RBAC）</td><td>❌</td><td>❌</td></tr><tr><td>支持磁盘索引</td><td>❌</td><td>❌</td></tr><tr><td>混合查询或标量过滤</td><td>❌</td><td>❌</td></tr><tr><td>Partition&#x2F;Namespace&#x2F;逻辑分组</td><td>❌</td><td>❌</td></tr><tr><td>支持的索引类型</td><td>FLAT、IVS_FLAT、IVF_SQ8、IVF_PQ、HNSW、BIN_FLAT 和 BIN_IVF_FLAT</td><td>HNSW &amp; IVFFlat</td></tr><tr><td>支持多类型内存索引</td><td>❌</td><td>❌</td></tr><tr><td>向量数据库的应用场景</td><td>提供全托管的向量数据库解决方案，用于存储、索引和搜索大规模非结构化数据，利用机器学习模型中强大的 Embedding 技术。向量数据库应具备以下功能：可扩展性和可调性、多租户和数据隔离、完整的 API 套件、直观的用户界面&#x2F;管理控制台</td><td></td></tr><tr><td>专为向量打造</td><td>❌</td><td>pgvector 插件</td></tr><tr><td>支持调节数据一致性等级</td><td>❌</td><td>❌</td></tr><tr><td>支持流式、批式向量数据</td><td>❌</td><td>❌</td></tr><tr><td>支持二进制向量</td><td>❌</td><td>❌</td></tr><tr><td>多语言 SDK</td><td>Python、JavaScript</td><td>支持任意语言的 Postgres 客户端</td></tr><tr><td>数据回滚</td><td>❌</td><td>❌</td></tr><tr><td>License</td><td>MIT</td><td>PostgreSQL</td></tr><tr><td>其他信息</td><td>FAISS 是一个用于高效相似性搜索和密集向量聚类的强大库，它具有 GPU 加速算法和 Python 库。FAISS 由 Meta 公司基础 AI 研究团队 FAIR 开发。</td><td>pgvector是 PostgreSQL 扩展组件，用于在 PostgreSQL 数据库内方便地存储、查询和索引向量。</td></tr></tbody></table><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th>特性</th><th>FAISS</th><th>Pgvector</th></tr></thead><tbody><tr><td>性能和扩展性</td><td>不支持单节点扩展</td><td>通过 YugaByteDB 等解决方案在分布式环境中扩展</td></tr><tr><td>支持的索引类型</td><td>多种索引类型</td><td>HNSW 和 IVFFlat</td></tr><tr><td>应用场景</td><td>高效相似性搜索和密集向量聚类</td><td>向量数据的存储、查询和索引</td></tr><tr><td>License</td><td>MIT</td><td>PostgreSQL</td></tr></tbody></table><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h3><p>FAISS<br>FAISS 是一个用于高效相似性搜索和密集向量聚类的强大库，具有以下特点：</p><p>高效的相似性搜索<br>支持多种索引类型（如 FLAT、IVS_FLAT、IVF_SQ8、IVF_PQ、HNSW、BIN_FLAT 和 BIN_IVF_FLAT）<br>具有 GPU 加速算法<br>主要用于单节点，不支持分布式扩展<br>由 Meta 公司基础 AI 研究团队 FAIR 开发<br>许可证：MIT<br>Pgvector<br>Pgvector 是 PostgreSQL 的一个扩展组件，用于在数据库内方便地存储、查询和索引向量，具有以下特点：</p><p>通过 pgvector 等解决方案实现存储计算分离<br>支持 HNSW 和 IVFFlat 索引类型<br>通过 YugaByteDB 等解决方案可以在分布式环境中扩展 Postgres 的性能<br>作为 PostgreSQL 插件，支持任意语言的 Postgres 客户端<br>许可证：PostgreSQL<br>适用场景对比<br>FAISS 更适用于高效相似性搜索和密集向量聚类，尤其是在需要 GPU 加速和高效处理的单节点环境中。Pgvector 则适用于需要在 PostgreSQL 数据库中方便地存储和查询向量数据，并能通过分布式解决方案扩展性能的场景。</p><p>数据来自于网络。</p>]]></content>
      
      
      <categories>
          
          <category> LLM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> 向量化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(四)Activity启动流程</title>
      <link href="/blog/2024/06/14/Android-Framework-%E5%9B%9B-Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/blog/2024/06/14/Android-Framework-%E5%9B%9B-Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Android Activity启动流程详解</p><ol><li><p>简介<br>在Android应用中，Activity是最常用的组件之一。Activity的启动流程涉及多个系统服务和组件的交互，包括ActivityManagerService（AMS）、PackageManagerService（PMS）和WindowManagerService（WMS）等。本文将详细介绍Activity的启动流程，并结合源码进行深入分析。</p></li><li><p>Activity启动流程概述<br>Activity的启动流程可以分为以下几个步骤：</p></li></ol><p>创建Intent：在源Activity中创建一个Intent对象。<br>调用startActivity：调用startActivity方法启动目标Activity。<br>ActivityManagerService处理：AMS接收启动请求，进行相关处理。<br>启动目标Activity进程：如果目标Activity所在的进程尚未启动，则启动该进程。<br>创建目标Activity实例：在目标进程中创建Activity实例。<br>调用Activity生命周期方法：调用目标Activity的onCreate等生命周期方法。<br>2.1 创建Intent<br>在源Activity中，创建一个Intent对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, TargetActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.2 调用startActivity<br>调用startActivity方法启动目标Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>2.3 ActivityManagerService处理<br>系统调用AMS处理启动请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    Instrumentation.<span class="type">ActivityResult</span> <span class="variable">ar</span> <span class="operator">=</span> mInstrumentation.execStartActivity(</span><br><span class="line">            <span class="built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="built_in">this</span>,</span><br><span class="line">            intent, requestCode, options);</span><br><span class="line">    <span class="keyword">if</span> (ar != <span class="literal">null</span>) &#123;</span><br><span class="line">        mMainThread.sendActivityResult(</span><br><span class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">                ar.getResultData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execStartActivity方法通过Binder调用AMS的startActivity方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">        Intent intent, String resolvedType, IBinder resultTo, String resultWho,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> requestCode, <span class="type">int</span> flags, ProfilerInfo profilerInfo, Bundle options)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mActivityManager.startActivity(caller, callingPackage, intent,</span><br><span class="line">            resolvedType, resultTo, resultWho, requestCode, flags,</span><br><span class="line">            profilerInfo, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.4 启动目标Activity进程<br>如果目标Activity所在的进程尚未启动，则启动该进程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Process.start(<span class="string">&quot;com.example.targetapp&quot;</span>, app.processName, uid, gids,</span><br><span class="line">        runtimeFlags, mountExternal, seInfo, startTime, instructionSet);</span><br></pre></td></tr></table></figure><p>2.5 创建目标Activity实例<br>在目标进程中，创建Activity实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Activity <span class="title function_">instantiateActivity</span><span class="params">(ClassLoader cl, String className, Intent intent)</span></span><br><span class="line">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> (Activity)cl.loadClass(className).newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.6 调用Activity生命周期方法<br>调用目标Activity的onCreate等生命周期方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>源码分析<br>以下是Activity启动相关核心代码的详细分析及。</li></ol><p>3.1 Instrumentation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line">    <span class="comment">// 执行startActivity</span></span><br><span class="line">    <span class="keyword">public</span> ActivityResult <span class="title function_">execStartActivity</span><span class="params">(Context who, IBinder contextThread, IBinder token,</span></span><br><span class="line"><span class="params">            Activity target, Intent intent, <span class="type">int</span> requestCode, Bundle options)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用AMS的startActivity方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ActivityManagerNative.getDefault().startActivity(</span><br><span class="line">                    contextThread, who.getBasePackageName(), intent,</span><br><span class="line">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                    token, target != <span class="literal">null</span> ? target.mEmbeddedID : <span class="literal">null</span>,</span><br><span class="line">                    requestCode, <span class="number">0</span>, <span class="literal">null</span>, options);</span><br><span class="line">            checkStartActivityResult(result, intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failure from system&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title class_">IActivityManager</span>.Stub &#123;</span><br><span class="line">    <span class="comment">// 启动Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> requestCode, <span class="type">int</span> flags, ProfilerInfo profilerInfo, Bundle options)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                resultWho, requestCode, flags, profilerInfo, options,</span><br><span class="line">                UserHandle.getCallingUserId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> requestCode, <span class="type">int</span> flags, ProfilerInfo profilerInfo, Bundle options,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">&quot;startActivity&quot;</span>);</span><br><span class="line">        userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</span><br><span class="line">                userId, <span class="literal">false</span>, ALLOW_FULL_ONLY, <span class="string">&quot;startActivity&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 启动Activity</span></span><br><span class="line">        <span class="keyword">return</span> mActivityStarter.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</span><br><span class="line">                resolvedType, <span class="literal">null</span>, <span class="literal">null</span>, resultTo, resultWho, requestCode, flags,</span><br><span class="line">                profilerInfo, <span class="literal">null</span>, options, <span class="literal">false</span>, userId, <span class="literal">null</span>, <span class="string">&quot;startActivityAsUser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 ActivityStarter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityStarter</span> &#123;</span><br><span class="line">    <span class="comment">// 启动Activity</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="type">int</span> callingUid, String callingPackage,</span></span><br><span class="line"><span class="params">            Intent intent, String resolvedType, IVoiceInteractionSession voiceSession,</span></span><br><span class="line"><span class="params">            IVoiceInteractor voiceInteractor, IBinder resultTo, String resultWho, <span class="type">int</span> requestCode,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> startFlags, ProfilerInfo profilerInfo, WaitResult outResult, Bundle options,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> ignoreTargetSecurity, <span class="type">int</span> userId, TaskRecord inTask, String reason)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理Intent，查找匹配的Activity</span></span><br><span class="line">        <span class="type">ResolveInfo</span> <span class="variable">rInfo</span> <span class="operator">=</span> mSupervisor.resolveIntent(intent, resolvedType, userId, <span class="number">0</span>,</span><br><span class="line">                computeResolveFilterUid(callingUid, userId));</span><br><span class="line">        <span class="type">ActivityInfo</span> <span class="variable">aInfo</span> <span class="operator">=</span> rInfo != <span class="literal">null</span> ? rInfo.activityInfo : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 启动目标Activity</span></span><br><span class="line">        <span class="keyword">return</span> startActivity(caller, intent, resolvedType, aInfo, resultTo, resultWho,</span><br><span class="line">                requestCode, startFlags, profilerInfo, options, inTask, reason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, Intent intent, String resolvedType,</span></span><br><span class="line"><span class="params">            ActivityInfo aInfo, IBinder resultTo, String resultWho, <span class="type">int</span> requestCode,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options, TaskRecord inTask,</span></span><br><span class="line"><span class="params">            String reason)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建ActivityRecord</span></span><br><span class="line">        <span class="type">ActivityRecord</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityRecord</span>(mService, callerApp, callingPid, callingUid,</span><br><span class="line">                callingPackage, intent, resolvedType, aInfo, mService.getGlobalConfiguration(),</span><br><span class="line">                resultTo, resultWho, requestCode, startFlags, profilerInfo, options, inTask);</span><br><span class="line">        <span class="comment">// 启动Activity</span></span><br><span class="line">        mRootActivityContainer.startActivityLocked(r, reason);</span><br><span class="line">        <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4 ActivityThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ActivityThread</span> &#123;</span><br><span class="line">    <span class="comment">// 启动Activity</span></span><br><span class="line">    <span class="keyword">public</span> Activity <span class="title function_">startActivityNow</span><span class="params">(ActivityRecord r, String reason)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Activity实例</span></span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> mInstrumentation.newActivity(</span><br><span class="line">                r.intent.getComponent().getClassName(), r.intent);</span><br><span class="line">        <span class="comment">// 调用Activity生命周期方法</span></span><br><span class="line">        activity.attach(<span class="built_in">this</span>, r.appToken, r.intent, r.activityInfo,</span><br><span class="line">                r.title, r.parent, r.embeddedID, r.lastNonConfigurationInstances,</span><br><span class="line">                r.referrer, r.voiceInteractor, r.configCallback);</span><br><span class="line">        activity.performCreate(r.state);</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Activity启动流程详解<br>4.1 Activity启动请求<br>创建Intent：源Activity创建一个Intent对象，指定目标Activity的类名和需要传递的数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, TargetActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p>调用startActivity：源Activity调用startActivity方法，向AMS发起启动目标Activity的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>4.2 ActivityManagerService处理请求<br>接收请求：AMS通过Binder机制接收startActivity请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span><br><span class="line"><span class="params">        Intent intent, String resolvedType, IBinder resultTo, String resultWho,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> requestCode, <span class="type">int</span> flags, ProfilerInfo profilerInfo, Bundle options)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">            resultWho, requestCode, flags, profilerInfo, options,</span><br><span class="line">            UserHandle.getCallingUserId());</span><br><span class="line">&#125;</span><br><span class="line">启动Activity：AMS调用ActivityStarter的startActivityMayWait方法，进行Intent解析和匹配，找到目标Activity并启动。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="type">int</span> callingUid, String callingPackage,</span></span><br><span class="line"><span class="params">Intent intent, String resolvedType, IVoiceInteractionSession voiceSession,</span></span><br><span class="line"><span class="params">IVoiceInteractor voiceInteractor, IBinder resultTo, String resultWho, <span class="type">int</span> requestCode,</span></span><br><span class="line"><span class="params"><span class="type">int</span> startFlags, ProfilerInfo profilerInfo, WaitResult outResult, Bundle options,</span></span><br><span class="line"><span class="params"><span class="type">boolean</span> ignoreTargetSecurity, <span class="type">int</span> userId, TaskRecord inTask, String reason)</span> &#123;</span><br><span class="line"><span class="comment">// 处理Intent，查找匹配的Activity</span></span><br><span class="line"><span class="type">ResolveInfo</span> <span class="variable">rInfo</span> <span class="operator">=</span> mSupervisor.resolveIntent(intent, resolvedType, userId, <span class="number">0</span>,</span><br><span class="line">computeResolveFilterUid(callingUid, userId));</span><br><span class="line"><span class="type">ActivityInfo</span> <span class="variable">aInfo</span> <span class="operator">=</span> rInfo != <span class="literal">null</span> ? rInfo.activityInfo : <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 启动目标Activity</span></span><br><span class="line"><span class="keyword">return</span> startActivity(caller, intent, resolvedType, aInfo, resultTo, resultWho,</span><br><span class="line">requestCode, startFlags, profilerInfo, options, inTask, reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-启动目标Activity进程"><a href="#4-3-启动目标Activity进程" class="headerlink" title="4.3 启动目标Activity进程"></a>4.3 启动目标Activity进程</h5><ol><li><strong>检查进程状态</strong>：AMS检查目标Activity所在进程是否已启动。如果未启动，则启动该进程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Process.start(<span class="string">&quot;com.example.targetapp&quot;</span>, app.processName, uid, gids,</span><br><span class="line">        runtimeFlags, mountExternal, seInfo, startTime, instructionSet);</span><br></pre></td></tr></table></figure><p>创建Activity实例：在目标进程中，AMS调用ActivityThread的performLaunchActivity方法，创建目标Activity实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Activity <span class="title function_">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> &#123;</span><br><span class="line">    <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过类加载器创建Activity实例</span></span><br><span class="line">        activity = mInstrumentation.newActivity(cl, r.intent.getComponent().getClassName(), r.intent);</span><br><span class="line">        <span class="comment">// 调用Activity生命周期方法</span></span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> r.packageInfo.makeApplication(<span class="literal">false</span>, mInstrumentation);</span><br><span class="line">            activity.attach(<span class="built_in">this</span>, app, r.intent, r.activityInfo, r.title, r.parent,</span><br><span class="line">                    r.embeddedID, r.lastNonConfigurationInstances, r.referrer, r.voiceInteractor,</span><br><span class="line">                    r.configCallback);</span><br><span class="line">            activity.performCreate(r.state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unable to instantiate activity &quot;</span> + r.intent.getComponent().getClassName()</span><br><span class="line">                + <span class="string">&quot;: &quot;</span> + e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Activity生命周期方法：在目标Activity实例创建完成后，AMS调用Activity的onCreate等生命周期方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Activity启动流程总结<br>创建Intent：源Activity创建一个Intent对象，指定目标Activity的类名和需要传递的数据。<br>调用startActivity：源Activity调用startActivity方法，向AMS发起启动目标Activity的请求。<br>ActivityManagerService处理请求：AMS接收启动请求，解析Intent，找到匹配的Activity，并启动目标Activity进程（如果尚未启动）。<br>创建Activity实例：在目标进程中，AMS调用ActivityThread的performLaunchActivity方法，创建目标Activity实例。<br>调用Activity生命周期方法：在目标Activity实例创建完成后，AMS调用Activity的onCreate等生命周期方法。</li><li>结论<br>本文深入了解了Android中Activity的启动流程。Activity的启动过程涉及多个系统服务和组件的协同工作，包括Intent的创建与解析、ActivityManagerService的请求处理、目标Activity进程的启动与实例创建、以及Activity生命周期方法的调用。理解Activity的启动流程，对于掌握Android应用的启动机制和性能优化具有重要意义。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次挖矿病毒kdevtmpfsi的处理过程</title>
      <link href="/blog/2024/06/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92kdevtmpfsi%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
      <url>/blog/2024/06/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92kdevtmpfsi%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>端午节了,我终于可以休息下了,但是发现我的服务器没有休息.<br>早上突然收到一条服务器的恶意软件的告警信息.<br>然后想登录服务器查看,但无法连接,然后只能重启机器,<br>通过查看内存:</p><p><img src="/blog/image.png" alt="alt text"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/blog/img/404.jpg"'></p><p>发现一个kdevtmpfsi,PID为171665的进程占用了99.7%的CPU,由于忙着其他事情当时没有在意,所以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 171665</span><br></pre></td></tr></table></figure><p>等到下午的时候登录服务器的时候,居然又发现了同样的问题,于是网上搜了一下,原来kdevtmpfsi是一个挖矿病毒,大多数是在数据库,redis,pg等侵入.</p><p>于是果断开始处理,首先kill掉然后查找进程目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 xxx</span><br><span class="line"></span><br><span class="line">sudo find / -name kdevtmpfsi</span><br></pre></td></tr></table></figure><p>发现改进程位于Docker容器中:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/overlay2/ee800047c4836b9e6585caaee9a555f8af1685b7fd08006c051e8a5bee6808f0/diff/tmp/kdevtmpfsi</span><br><span class="line">/var/lib/docker/overlay2/ee800047c4836b9e6585caaee9a555f8af1685b7fd08006c051e8a5bee6808f0/merged/tmp/kdevtmpfsi</span><br></pre></td></tr></table></figure><p>这个时候证实了,病毒的由来应该是某个容器被感染了,于是检查容器:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxx:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                                                 COMMAND                  CREATED          STATUS                 PORTS                                                                              NAMES</span><br><span class="line">e115cc9046bb   reduce-server   <span class="string">&quot;bash -c &#x27;python3 /r…&quot;</span>   28 minutes ago   Up 28 minutes          22/tcp, 22222/tcp, 0.0.0.0:2222-2223-&gt;2222-2223/tcp, :::2222-2223-&gt;2222-2223/tcp   reduce-api</span><br><span class="line">fc3feefdf275   base-pg-16.3    <span class="string">&quot;docker-entrypoint.s…&quot;</span>   24 hours ago     Up 4 hours (healthy)   0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp                                          reduce-pg</span><br></pre></td></tr></table></figure><p>通过排查是因为pg容器内的,于是果断:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop fc3feefdf275</span><br><span class="line">sudo docker <span class="built_in">rm</span> fc3feefdf275</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker/overlay2/ee800047c4836b9e6585caaee9a555f8af1685b7fd08006c051e8a5bee6808f0/diff/tmp/kdevtmpfsi</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker/overlay2/ee800047c4836b9e6585caaee9a555f8af1685b7fd08006c051e8a5bee6808f0/merged/tmp/kdevtmpfsi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>清除完成后重新构建镜像,然后通过安装一些软件来帮助排查</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rkhunter chkrootkit</span><br><span class="line">sudo rkhunter --check</span><br><span class="line">sudo chkrootkit</span><br></pre></td></tr></table></figure><p>经过一些列操作,最后未发现可疑文件,才重新运行了容器,定时任务的检查就略过了.</p><p>后期安全防护措施:</p><ol><li>定期更新软件 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure></li><li>安装杀毒扫描软件定期检查 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rkhunter chkrootkit</span><br><span class="line">sudo rkhunter --check</span><br><span class="line">sudo chkrootkit</span><br></pre></td></tr></table></figure></li><li>删除可以的定时任务 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前用户的cron任务</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统级别的cron任务</span></span><br><span class="line">sudo <span class="built_in">ls</span> /etc/cron.*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看at任务</span></span><br><span class="line">atq</span><br></pre></td></tr></table></figure></li><li>显示端口,只开通80和443等必要的.</li></ol><hr><p>以上就是本篇文章的所有内容.</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 病毒 </tag>
            
            <tag> kdevtmpfsi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(三)Intent</title>
      <link href="/blog/2024/06/11/Android-Framework-%E4%B8%89-Intent/"/>
      <url>/blog/2024/06/11/Android-Framework-%E4%B8%89-Intent/</url>
      
        <content type="html"><![CDATA[<h3 id="Android-Intent机制详解"><a href="#Android-Intent机制详解" class="headerlink" title="Android Intent机制详解"></a>Android Intent机制详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android开发中，<code>Intent</code>是用于进程内和进程间通信的关键机制。它不仅用于启动活动（Activity）、服务（Service）和广播接收器（BroadcastReceiver），还用于在不同组件之间传递数据。本文将详细介绍<code>Intent</code>的工作原理、实现流程和相关源码。</p><h4 id="2-Intent的基本原理"><a href="#2-Intent的基本原理" class="headerlink" title="2. Intent的基本原理"></a>2. Intent的基本原理</h4><p><code>Intent</code>是一个消息对象，包含了要执行的动作和所需的数据。它可以分为显式Intent和隐式Intent：</p><ul><li><strong>显式Intent</strong>：明确指定目标组件。</li><li><strong>隐式Intent</strong>：没有明确指定目标组件，而是通过匹配Intent过滤器来选择适当的组件。</li></ul><h5 id="2-1-Intent的结构"><a href="#2-1-Intent的结构" class="headerlink" title="2.1 Intent的结构"></a>2.1 Intent的结构</h5><p><code>Intent</code>的主要结构包括以下几个部分：</p><ul><li><strong>Action</strong>：描述要执行的动作，如<code>Intent.ACTION_VIEW</code>。</li><li><strong>Data</strong>：包含要操作的数据的URI。</li><li><strong>Category</strong>：提供额外的信息，帮助系统确定可以处理Intent的组件。</li><li><strong>Extras</strong>：附加的键值对，传递额外的数据。</li><li><strong>Component</strong>：明确指定的目标组件。</li></ul><h4 id="3-Intent的实现流程"><a href="#3-Intent的实现流程" class="headerlink" title="3. Intent的实现流程"></a>3. Intent的实现流程</h4><p>以下是Intent的实现流程：</p><ol><li><strong>创建Intent</strong>：在源组件中创建一个<code>Intent</code>对象。</li><li><strong>启动目标组件</strong>：调用<code>startActivity</code>、<code>startService</code>或<code>sendBroadcast</code>方法启动目标组件。</li><li><strong>Intent解析和匹配</strong>：系统解析Intent，找到匹配的组件。</li><li><strong>启动目标组件</strong>：系统启动匹配的目标组件，并将Intent传递给它。</li></ol><h5 id="3-1-创建Intent"><a href="#3-1-创建Intent" class="headerlink" title="3.1 创建Intent"></a>3.1 创建Intent</h5><p>在源组件中，创建一个Intent对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, TargetActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="3-2-启动目标组件"><a href="#3-2-启动目标组件" class="headerlink" title="3.2 启动目标组件"></a>3.2 启动目标组件</h5><p>调用<code>startActivity</code>方法启动目标组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h5 id="3-3-Intent解析和匹配"><a href="#3-3-Intent解析和匹配" class="headerlink" title="3.3 Intent解析和匹配"></a>3.3 Intent解析和匹配</h5><p>系统解析Intent，并找到匹配的组件。匹配过程主要在<code>PackageManager</code>中进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> ComponentName <span class="title function_">resolveActivity</span><span class="params">(Intent intent, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">    <span class="type">ResolveInfo</span> <span class="variable">info</span> <span class="operator">=</span> resolveIntent(intent, resolvedType, flags, userId);</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(info.activityInfo.packageName, info.activityInfo.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resolveIntent</code>方法解析Intent，并找到匹配的组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> ResolveInfo <span class="title function_">resolveIntent</span><span class="params">(Intent intent, String resolvedType, <span class="type">int</span> flags, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    List&lt;ResolveInfo&gt; query = queryIntentActivities(intent, resolvedType, flags, userId);</span><br><span class="line">    <span class="keyword">if</span> (query != <span class="literal">null</span> &amp;&amp; !query.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> query.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-启动目标组件"><a href="#3-4-启动目标组件" class="headerlink" title="3.4 启动目标组件"></a>3.4 启动目标组件</h5><p>系统启动匹配的目标组件，并将Intent传递给它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    Instrumentation.<span class="type">ActivityResult</span> <span class="variable">ar</span> <span class="operator">=</span> mInstrumentation.execStartActivity(</span><br><span class="line">            <span class="built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="built_in">this</span>,</span><br><span class="line">            intent, requestCode, options);</span><br><span class="line">    <span class="keyword">if</span> (ar != <span class="literal">null</span>) &#123;</span><br><span class="line">        mMainThread.sendActivityResult(</span><br><span class="line">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">                ar.getResultData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h4><p>以下是Intent相关核心代码的详细分析及。</p><h5 id="4-1-Intent-java"><a href="#4-1-Intent-java" class="headerlink" title="4.1 Intent.java"></a>4.1 Intent.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Intent</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span>, Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> String mAction;</span><br><span class="line">    <span class="keyword">private</span> Uri mData;</span><br><span class="line">    <span class="keyword">private</span> String mType;</span><br><span class="line">    <span class="keyword">private</span> String mPackage;</span><br><span class="line">    <span class="keyword">private</span> ComponentName mComponent;</span><br><span class="line">    <span class="keyword">private</span> ArraySet&lt;String&gt; mCategories;</span><br><span class="line">    <span class="keyword">private</span> Bundle mExtras;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Intent</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Intent</span><span class="params">(String action)</span> &#123;</span><br><span class="line">        mAction = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Intent</span><span class="params">(String action, Uri uri)</span> &#123;</span><br><span class="line">        mAction = action;</span><br><span class="line">        mData = uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Intent</span><span class="params">(Context packageContext, Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        mComponent = <span class="keyword">new</span> <span class="title class_">ComponentName</span>(packageContext, cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Action</span></span><br><span class="line">    <span class="keyword">public</span> Intent <span class="title function_">setAction</span><span class="params">(String action)</span> &#123;</span><br><span class="line">        mAction = action;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Action</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Data</span></span><br><span class="line">    <span class="keyword">public</span> Intent <span class="title function_">setData</span><span class="params">(Uri data)</span> &#123;</span><br><span class="line">        mData = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Data</span></span><br><span class="line">    <span class="keyword">public</span> Uri <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Component</span></span><br><span class="line">    <span class="keyword">public</span> Intent <span class="title function_">setComponent</span><span class="params">(ComponentName component)</span> &#123;</span><br><span class="line">        mComponent = component;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Component</span></span><br><span class="line">    <span class="keyword">public</span> ComponentName <span class="title function_">getComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加Category</span></span><br><span class="line">    <span class="keyword">public</span> Intent <span class="title function_">addCategory</span><span class="params">(String category)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCategories == <span class="literal">null</span>) &#123;</span><br><span class="line">            mCategories = <span class="keyword">new</span> <span class="title class_">ArraySet</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mCategories.add(category);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Categories</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getCategories</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mCategories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加额外数据</span></span><br><span class="line">    <span class="keyword">public</span> Intent <span class="title function_">putExtra</span><span class="params">(String name, String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mExtras == <span class="literal">null</span>) &#123;</span><br><span class="line">            mExtras = <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        mExtras.putString(name, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取额外数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringExtra</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mExtras != <span class="literal">null</span> ? mExtras.getString(name) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parcelable接口实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">describeContents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeToParcel</span><span class="params">(Parcel dest, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">        dest.writeString(mAction);</span><br><span class="line">        dest.writeParcelable(mData, flags);</span><br><span class="line">        dest.writeString(mType);</span><br><span class="line">        dest.writeString(mPackage);</span><br><span class="line">        dest.writeParcelable(mComponent, flags);</span><br><span class="line">        dest.writeArraySet(mCategories);</span><br><span class="line">        dest.writeBundle(mExtras);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Intent&gt; CREATOR = <span class="keyword">new</span> <span class="title class_">Parcelable</span>.Creator&lt;Intent&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> Intent <span class="title function_">createFromParcel</span><span class="params">(Parcel in)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Intent[] newArray(<span class="type">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Intent</span>[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Intent</span><span class="params">(Parcel in)</span> &#123;</span><br><span class="line">        mAction = in.readString();</span><br><span class="line">        mData = in.readParcelable(Uri.class.getClassLoader());</span><br><span class="line">        mType = in.readString();</span><br><span class="line">        mPackage = in.readString();</span><br><span class="line">        mComponent = in.readParcelable(ComponentName.class.getClassLoader());</span><br><span class="line">        mCategories = in.readArraySet(String.class.getClassLoader());</span><br><span class="line">        mExtras = in.readBundle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-PackageManagerService-java"><a href="#4-2-PackageManagerService-java" class="headerlink" title="4.2 PackageManagerService.java"></a>4.2 PackageManagerService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackageManagerService</span> <span class="keyword">extends</span> <span class="title class_">IPackageManager</span>.Stub &#123;</span><br><span class="line">    <span class="comment">// 解析Intent，找到匹配的Activity</span></span><br><span class="line">    <span class="keyword">public</span> ResolveInfo <span class="title function_">resolveIntent</span><span class="params">(Intent intent, String resolvedType, <span class="type">int</span> flags, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        List&lt;ResolveInfo&gt; query = queryIntentActivities(intent, resolvedType, flags, userId);</span><br><span class="line">        <span class="keyword">if</span> (query != <span class="literal">null</span> &amp;&amp; !query.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> query.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询匹配的Activity列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ResolveInfo&gt; <span class="title function_">queryIntentActivities</span><span class="params">(Intent intent, String resolvedType, <span class="type">int</span> flags, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询逻辑</span></span><br><span class="line">        <span class="comment">// 省略具体实现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-ActivityManagerService-java"><a href="#4-3-ActivityManagerService-java" class="headerlink" title="4.3 ActivityManagerService.java"></a>4.3 ActivityManagerService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title class_">IActivityManager</span>.Stub &#123;</span><br><span class="line">    <span class="comment">// 启动Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取ActivityStackSupervisor</span></span><br><span class="line">        <span class="type">ActivityStackSupervisor</span> <span class="variable">supervisor</span> <span class="operator">=</span> mStackSupervisor;</span><br><span class="line">        <span class="comment">// 通过ActivityStarter启动Activity</span></span><br><span class="line">        supervisor.startActivityLocked(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityStackSupervisor</span> &#123;</span><br><span class="line">    <span class="comment">// 启动Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivityLocked</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取目标Activity的信息</span></span><br><span class="line">        <span class="type">ResolveInfo</span> <span class="variable">resolveInfo</span> <span class="operator">=</span> mService.getPackageManager().resolveIntent(intent, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">ActivityInfo</span> <span class="variable">aInfo</span> <span class="operator">=</span> resolveInfo.activityInfo;</span><br><span class="line">        <span class="comment">// 启动目标Activity</span></span><br><span class="line">        <span class="type">ActivityRecord</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityRecord</span>(mService, intent, aInfo);</span><br><span class="line">        mService.startActivityLocked(r);</span><br><span class="line">        <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Intent的好处"><a href="#5-Intent的好处" class="headerlink" title="5. Intent的好处"></a>5. Intent的好处</h4><ol><li><strong>灵活性</strong>：Intent支持多种数据传递方式，包括基本数据类型、对象和URI等。</li><li><strong>组件解耦</strong>：通过Intent，组件之间的调用不需要直接引用，降低了耦合度。</li><li><strong>跨进程通信</strong>：Intent支持在不同进程之间进行通信，提高了系统的模块化和扩展性。</li></ol><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p>Intent作为Android系统中关键的通信机制，为应用程序之间的交互提供了强大而灵活的支持。理解Intent的实现原理，对于编写高效、稳定的Android应用具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Intent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker修改镜像内的包</title>
      <link href="/blog/2023/10/13/Docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%86%85%E7%9A%84%E5%8C%85/"/>
      <url>/blog/2023/10/13/Docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%86%85%E7%9A%84%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍如何修改Image中的某个一个pip包版本并替换旧的版本，其他操作也类似:</p><h3 id="步骤一：拉取旧的镜像"><a href="#步骤一：拉取旧的镜像" class="headerlink" title="步骤一：拉取旧的镜像"></a>步骤一：拉取旧的镜像</h3><ol><li>拉取旧的Docker镜像到本地。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker pull &lt;my_image&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>运行一个容器以便在其中修改。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker run -it --name modify-container &lt;my_image&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="步骤二：修改pip包版本"><a href="#步骤二：修改pip包版本" class="headerlink" title="步骤二：修改pip包版本"></a>步骤二：修改pip包版本</h3><ol><li>进入容器后，查看当前安装的pip包列表以确认需要修改的包。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><ol start="2"><li>卸载旧版本的pip包。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip uninstall &lt;package_name&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装指定版本的新pip包。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install &lt;package_name&gt;==&lt;desired_version&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>验证新版本的pip包是否安装成功。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip show &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤三：提交修改后的镜像"><a href="#步骤三：提交修改后的镜像" class="headerlink" title="步骤三：提交修改后的镜像"></a>步骤三：提交修改后的镜像</h3><ol><li>退出容器。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><ol start="2"><li>提交修改后的容器为一个新的镜像。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker commit modify-container &lt;my_image&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>验证新镜像是否包含修改后的pip包版本。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it &lt;my_image&gt; /bin/bash</span><br><span class="line">pip show &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤四：推送新的镜像"><a href="#步骤四：推送新的镜像" class="headerlink" title="步骤四：推送新的镜像"></a>步骤四：推送新的镜像</h3><ol><li>登录到私有镜像仓库（如果需要）。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker login &lt;addr&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>推送新的镜像到私有仓库。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker push &lt;my_image&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤五：清理工作"><a href="#步骤五：清理工作" class="headerlink" title="步骤五：清理工作"></a>步骤五：清理工作</h3><ol><li>删除临时创建的容器。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> modify-container</span><br></pre></td></tr></table></figure><ol start="2"><li>删除旧的本地镜像（如果需要）。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker rmi &lt;old_image_id&gt;</span><br></pre></td></tr></table></figure><p>以上就是修改镜像中的所有操作,附带一个脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -ne 3 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &lt;IMAGE_NAME&gt; &lt;PACKAGE_NAME&gt; &lt;DESIRED_VERSION&gt;&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取传递的参数</span></span><br><span class="line">IMAGE_NAME=<span class="variable">$1</span></span><br><span class="line">PACKAGE_NAME=<span class="variable">$2</span></span><br><span class="line">DESIRED_VERSION=<span class="variable">$3</span></span><br><span class="line">CONTAINER_NAME=<span class="string">&quot;modify-container&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取旧镜像</span></span><br><span class="line">docker pull <span class="variable">$IMAGE_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --name <span class="variable">$CONTAINER_NAME</span> <span class="variable">$IMAGE_NAME</span> <span class="built_in">tail</span> -f /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改pip包版本</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$CONTAINER_NAME</span> bash -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">    pip uninstall -y <span class="variable">$PACKAGE_NAME</span> &amp;&amp; \</span></span><br><span class="line"><span class="string">    pip install <span class="variable">$PACKAGE_NAME</span>==<span class="variable">$DESIRED_VERSION</span> &amp;&amp; \</span></span><br><span class="line"><span class="string">    pip show <span class="variable">$PACKAGE_NAME</span></span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交新镜像</span></span><br><span class="line">docker commit <span class="variable">$CONTAINER_NAME</span> <span class="variable">$IMAGE_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送新镜像 需要提前执行 docker login或者放开以下</span></span><br><span class="line"><span class="comment"># docker login</span></span><br><span class="line">docker push <span class="variable">$IMAGE_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">docker <span class="built_in">rm</span> -f <span class="variable">$CONTAINER_NAME</span></span><br></pre></td></tr></table></figure><p>使用方式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./update_package.sh  registry.cn-hangzhou.aliyuncs.com/rxc/xxxx package_name desired_version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本篇内容结束.</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Actions私有仓库部署踩坑记</title>
      <link href="/blog/2023/06/01/Github-Actions%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
      <url>/blog/2023/06/01/Github-Actions%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><em>在使用 GitHub Actions 自动化部署 Hexo 博客的过程中，因为我是使用的私有仓库来存储blog源码,更新后需要将public自动提交到公共仓库中.</em></p><ol><li><h5 id="部署密钥和令牌问题"><a href="#部署密钥和令牌问题" class="headerlink" title="部署密钥和令牌问题:"></a>部署密钥和令牌问题:</h5><ul><li>GitHub Actions 默认的 GITHUB_TOKEN 不支持推送到外部仓库。这意味着当我们尝试将生成的站点文件从一个仓库推送到另一个仓库时，GITHUB_TOKEN 无法使用,(我这里是使用<code>peaceiris/actions-gh-pages@v3</code>来进行部署)。 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure> 接下来推送代码,部署过程中报错然后查看Workflow Deploy: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: Action failed with <span class="string">&quot;The generated GITHUB_TOKEN (github_tokendoes not support to push to an external repository.</span></span><br><span class="line"><span class="string">Use deploy_key or personal_token.</span></span><br></pre></td></tr></table></figure> 原来GITHUB_TOKEN是不支持推送到外部仓库,只能在当前的仓库去执行操作,比如:如推送文件、修改 Issues 等。</li></ul><p> 那就去创建一个,接着:</p><ul><li><code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Generate new token</code> -&gt; <code>勾选repo</code> -&gt; <code>Generate</code></li></ul><p> 然后把创建的PAT添加到Secrets:</p><ul><li><code>仓库页面</code> -&gt; <code>Settings</code> -&gt; <code>Secrets and variables</code> -&gt; <code>Actions</code> -&gt; <code>New repository secret</code> -&gt; <code>填写Name和生成的PAT</code></li></ul><p> OK,把这个名称填写到:</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SECRETS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p> 注: secrets.NAME不能使用GITHUB_开头。</p><p> 下面介绍一下支持的Tokens:</p><table><thead><tr><th>Token</th><th>Private repo</th><th>Public repo</th><th>Protocol</th><th>Setup</th></tr></thead><tbody><tr><td>github_token</td><td>✅️</td><td>✅️</td><td>HTTPS</td><td>Unnecessary</td></tr><tr><td>deploy_key</td><td>✅️</td><td>✅️</td><td>SSH</td><td>Necessary</td></tr><tr><td>personal_token</td><td>✅️</td><td>✅️</td><td>HTTPS</td><td>Necessary</td></tr></tbody></table><p> 实际上GITHUB_TOKEN是可以访问部署GitHub Pages的,但由于我们第一步部署需要选择或者创建GitHub Pages分支,通常为:<code>gh-pages</code>,第一次操作通常没有添加write权限,所以会报错:<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/git push origin gh-pages</span><br><span class="line">remote: Write access to repository not granted.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/username/repository.git/&#x27;: The requested URL returned error: 403</span><br><span class="line">Error: Action failed with &quot;The process &#x27;/usr/bin/git&#x27; failed with exit code 128&quot;</span><br></pre></td></tr></table></figure></p></li><li><h5 id="SSH-私钥deploy-key限制"><a href="#SSH-私钥deploy-key限制" class="headerlink" title="SSH 私钥deploy_key限制:"></a>SSH 私钥deploy_key限制:</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Setup auth token</span><br><span class="line">Error: Action failed with &quot;not found deploy key or tokens&quot;</span><br></pre></td></tr></table></figure><ul><li>Secret中Aciton应该的对应的<code>personal_token</code>,主要作用是用于提交git-commit相关的一些操作。</li><li><code>deploy_key</code>应该通过Deploy keys应该是通过SSH生成的公钥。</li><li>同样SSH的私钥应该是在<code>Dependabot</code>中添加的,这样才能对应的上来。</li></ul><p> 具体的操作:</p><ol><li><p>生成部署的秘钥:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages-deploy -N &quot;&quot; </span><br></pre></td></tr></table></figure><p> 生成两个文件:<code>gh-pages-deploy.pub</code>公钥,<code>gh-pages-deploy</code> 私钥,<br> 查看并复制</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat gh-pages-deploy</span><br><span class="line">cat gh-pages-deploy.pub</span><br></pre></td></tr></table></figure></li><li><p>然后转到Deploy Key添加公钥，勾选允许写入访问</p></li><li><p>最后转到<code>仓库页面</code> -&gt; <code>Settings</code> -&gt; <code>Secrets and variables</code> -&gt; <code>Actions</code> -&gt; <code>New repository secret</code> 添加私钥</p></li></ol><p> 最后:<br> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SECRETS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUBLIC_DEPLOY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><p>GitHub Actions 是一个强大的工具，可以帮助自动化 Hexo 博客的部署过程。然而，正确配置是成功部署的关键。通过以上讨论的问题和解决方案，我们可以更有效地管理和解决在自动化部署过程中可能遇到的挑战。</p><hr><p>这篇文章概述了与 GitHub Actions 相关的一些常见问题以及如何解决这些问题，希望能帮助你更好地使用这个强大的自动化工具。</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/blog/2023/02/18/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2023/02/18/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ol><li>保存命令</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker save -o name.tar image-name</span><br><span class="line"></span><br><span class="line">#压缩镜像</span><br><span class="line">gzip name.tar</span><br></pre></td></tr></table></figure></blockquote><ol><li>保存并直接压缩</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save image-name |gzip&gt;name.tar.gz</span><br></pre></td></tr></table></figure></blockquote><ol><li>build</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t image-name:tag -f Dockerfile .</span><br><span class="line"></span><br><span class="line">#根据当前的cpu架构来构建</span><br><span class="line">#docker build -t 172.18.0.40:82/ai/kubeflow-dashboard-frontend-enterprise:2023.12.28-amd64 -f install/docker/dockerFrontend/Dockerfile .</span><br><span class="line"></span><br><span class="line">#指定平台构建 可以选择amd64或arm64或者打包两个</span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t image-name:tag -f Dockerfile .  --push</span><br></pre></td></tr></table></figure></blockquote><ol><li>推送</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push image-name</span><br></pre></td></tr></table></figure></blockquote><ol><li>运行</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br><span class="line"></span><br><span class="line">#docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">#使用 -d 参数在后台运行容器。-p 80:80 将容器的80端口映射到主机的80端口。--name webserver 给容器命名为 webserver。nginx 是要运行的镜像名称</span><br></pre></td></tr></table></figure></blockquote><ol><li>查看镜像</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">#列出所有本地存储的镜像</span><br></pre></td></tr></table></figure></blockquote><ol><li>查看容器</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">#列出当前运行的容器。</span><br><span class="line">#不带参数默认只显示运行中的容器。-a 参数显示所有容器，包括未运行</span><br></pre></td></tr></table></figure></blockquote><ol><li>停止</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop</span><br><span class="line">#停止一个或多个运行中的容器 docker stop webserver</span><br><span class="line">#停止所有: </span><br><span class="line">#docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure></blockquote><ol><li>删除容器</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm</span><br><span class="line">#删除一个或多个容器 docker rm webserver / docker rm -f webserver</span><br><span class="line">#删除所有:</span><br><span class="line">#docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure></blockquote><ol><li>删除镜像</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi</span><br><span class="line">#删除一个或多个镜像 docker rmi webserver</span><br><span class="line">#删除所有:</span><br><span class="line">#docker rmi $(docker ps -aq)</span><br></pre></td></tr></table></figure></blockquote><ol><li>进入容器执行命令</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec</span><br><span class="line">#进入容器可以执行命令 docker exec -it webserver bash</span><br><span class="line">#docker exec -it mysql mysql -uroot -p</span><br></pre></td></tr></table></figure></blockquote><ol><li>查看容器或镜像的详细信息</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker inspect</span><br><span class="line">#docker inspect webserver </span><br><span class="line">#webserver 是容器或镜像的名称或 ID</span><br></pre></td></tr></table></figure></blockquote><ol><li>查看log</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br><span class="line">#获取容器列出的日志</span><br><span class="line">#docker logs webserver</span><br></pre></td></tr></table></figure></blockquote><ol><li>其他:</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#启动容器</span><br><span class="line">docker start</span><br><span class="line"></span><br><span class="line">#暂停进程</span><br><span class="line">docker pause</span><br><span class="line"></span><br><span class="line">#恢复容器</span><br><span class="line">docker unpause</span><br><span class="line"></span><br><span class="line">#重启容器</span><br><span class="line">docker restart</span><br><span class="line"></span><br><span class="line">#杀掉运行中的容器</span><br><span class="line">docker kill</span><br><span class="line"></span><br><span class="line">#开启docker </span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#查看docker状态</span><br><span class="line">systemctl status docker </span><br><span class="line"></span><br><span class="line">#停止</span><br><span class="line">systemctl stop docker </span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">systemctl  restart docker</span><br><span class="line"></span><br><span class="line">#设置开启自启</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></blockquote><ol><li>打标签</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag</span><br><span class="line">#给本地镜像打标签</span><br><span class="line">#docker tag myimage:tag username/repository:tag</span><br></pre></td></tr></table></figure></blockquote><ol><li>加载本地镜像</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load</span><br><span class="line">#加载tar本地镜像</span><br><span class="line">#docker load -i filename.tar</span><br></pre></td></tr></table></figure></blockquote><ol><li>查看历史记录</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker history</span><br><span class="line">#查看镜像的历史记录</span><br><span class="line">#docker history myimage:tag</span><br></pre></td></tr></table></figure></blockquote><ol><li>从容器中拷贝</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp container-name file-name</span><br></pre></td></tr></table></figure></blockquote><p>19.导出容器 另存为文件</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export -o file-name.tar container-name/container-id</span><br></pre></td></tr></table></figure></blockquote><p>20.从文件导入镜像</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import file-name.tar container-name:tag</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/blog/2022/10/18/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2022/10/18/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="基础常用命令"><a href="#基础常用命令" class="headerlink" title="基础常用命令"></a>基础常用命令</h2><ul><li><p><code>某个命令 --h</code>，对这个命令进行解释</p></li><li><p><code>某个命令 --help</code>，解释这个命令(更详细)</p></li><li><p><code>man某个命令</code>，文档式解释这个命令(更更详细)(执行该命令后,还可以按&#x2F;+关键字进行查询结果的搜索)</p></li><li><p><code>Ctrl + c</code>，结束命令</p></li><li><p><code>history</code>，查看所有的历史命令</p></li><li><p><code>Ctrl + r</code>，进入历史命令的搜索功能模式</p></li><li><p><code>clear</code>，清除屏幕里面的所有命令</p></li><li><p><code>pwd</code>，显示当前目录路径（常用）</p></li><li><p><code>firefox&amp;</code>，最后后面的 <strong>&amp;</strong> 符号，表示使用后台方式打开 Firefox，然后显示该进程的 PID 值</p></li><li><p><code>jobs</code>，查看后台运行的程序列表</p></li><li><p><code>ifconfig</code>，查看内网 IP 等信息（常用）</p></li><li><p><code>curl ifconfig.me</code>，查看外网 IP 信息</p></li><li><p><code>curl ip.cn</code>，查看外网 IP 信息</p></li><li><pre><code>locate 搜索关键字<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，快速搜索系统文件/文件夹（类似 Windows 上的 everything 索引式搜索）（常用）</span><br><span class="line"></span><br><span class="line">  - `updatedb`，配合上面的 locate，给 locate 的索引更新（locate 默认是一天更新一次索引）（常用）</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  date</span><br></pre></td></tr></table></figure>，查看系统时间（常用）- `date -s20080103`，设置日期（常用）- `date -s18:24`，设置时间，如果要同时更改 BIOS 时间，再执行 `hwclock --systohc`（常用）</code></pre></li><li><p><code>cal</code>，在终端中查看日历，肯定没有农历显示的</p></li><li><p><code>uptime</code>，查看系统已经运行了多久，当前有几个用户等信息（常用）</p></li><li><p><code>cat 文件路名</code>，显示文件内容（属于打印语句）</p></li><li><p><code>cat -n 文件名</code>，显示文件，并每一行内容都编号</p></li><li><p><code>more 文件名</code>，用分页的方式查看文件内容（按 space 翻下一页，按 <em>Ctrl + B</em> 返回上页）</p></li><li><pre><code>less<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  文件名，用分页的方式查看文件内容（带上下翻页）</span><br><span class="line"></span><br><span class="line">  - 按 **j** 向下移动，按 **k** 向上移动</span><br><span class="line">  - 按 **/** 后，输入要查找的字符串内容，可以对文件进行向下查询，如果存在多个结果可以按 **n** 调到下一个结果出</span><br><span class="line">  - 按 **？** 后，输入要查找的字符串内容，可以对文件进行向上查询，如果存在多个结果可以按 **n** 调到下一个结果出</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  shutdown</span><br></pre></td></tr></table></figure>- `shutdown -hnow`，立即关机- `shutdown -h+10`，10 分钟后关机- `shutdown -h23:30`，23:30 关机- `shutdown -rnew`，立即重启</code></pre></li><li><p><code>poweroff</code>，立即关机（常用）</p></li><li><p><code>reboot</code>，立即重启（常用）</p></li><li><pre><code>zip mytest.zip /opt/test/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，把 /opt 目录下的 test/ 目录进行压缩，压缩成一个名叫 mytest 的 zip 文件</span><br><span class="line"></span><br><span class="line">  - `unzip mytest.zip`，对 mytest.zip 这个文件进行解压，解压到当前所在目录</span><br><span class="line">  - `unzip mytest.zip -d /opt/setups/`，对 mytest.zip 这个文件进行解压，解压到 /opt/setups/ 目录下</span><br><span class="line"></span><br><span class="line">- `tar -cvf mytest.tar mytest/`，对 mytest/ 目录进行归档处理（归档和压缩不一样）</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  tar -xvf mytest.tar</span><br></pre></td></tr></table></figure>，释放 mytest.tar 这个归档文件，释放到当前目录- `tar -xvf mytest.tar -C /opt/setups/`，释放 mytest.tar 这个归档文件，释放到 /opt/setups/ 目录下</code></pre></li><li><p><code>last</code>，显示最近登录的帐户及时间</p></li><li><p><code>lastlog</code>，显示系统所有用户各自在最近登录的记录，如果没有登录过的用户会显示 <strong>从未登陆过</strong></p></li><li><pre><code>ls<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">，列出当前目录下的所有没有隐藏的文件 / 文件夹。</span><br><span class="line"></span><br><span class="line">- `ls -a`，列出包括以.号开头的隐藏文件 / 文件夹（也就是所有文件）</span><br><span class="line">- `ls -R`，显示出目录下以及其所有子目录的文件 / 文件夹（递归地方式，不显示隐藏的文件）</span><br><span class="line">- `ls -a -R`，显示出目录下以及其所有子目录的文件 / 文件夹（递归地方式，显示隐藏的文件）</span><br><span class="line">- `ls -al`，列出目录下所有文件（包含隐藏）的权限、所有者、文件大小、修改时间及名称（也就是显示详细信息）</span><br><span class="line">- `ls -ld 目录名`，显示该目录的基本信息</span><br><span class="line">- `ls -t`，依照文件最后修改时间的顺序列出文件名。</span><br><span class="line">- `ls -F`，列出当前目录下的文件名及其类型。以 **/** 结尾表示为目录名，以 ***** 结尾表示为可执行文件，以 **@** 结尾表示为符号连接</span><br><span class="line">- `ls -lg`，同上，并显示出文件的所有者工作组名。</span><br><span class="line">- `ls -lh`，查看文件夹类文件详细信息，文件大小，文件修改时间</span><br><span class="line">- `ls /opt | head -5`，显示 opt 目录下前 5 条记录</span><br><span class="line">- `ls -l | grep &#x27;.jar&#x27;`，查找当前目录下所有 jar 文件</span><br><span class="line">- `ls -l /opt |grep &quot;^-&quot;|wc -l`，统计 opt 目录下文件的个数，不会递归统计</span><br><span class="line">- `ls -lR /opt |grep &quot;^-&quot;|wc -l`，统计 opt 目录下文件的个数，会递归统计</span><br><span class="line">- `ls -l /opt |grep &quot;^d&quot;|wc -l`，统计 opt 目录下目录的个数，不会递归统计</span><br><span class="line">- `ls -lR /opt |grep &quot;^d&quot;|wc -l`，统计 opt 目录下目录的个数，会递归统计</span><br><span class="line">- `ls -lR /opt |grep &quot;js&quot;|wc -l`，统计 opt 目录下 js 文件的个数，会递归统计</span><br><span class="line">- `ls -l`，列出目录下所有文件的权限、所有者、文件大小、修改时间及名称（也就是显示详细信息，不显示隐藏文件）。显示出来的效果如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>-rwxr-xr-x. 1 root root 4096 3月 26 10:57，其中最前面的 - 表示这是一个普通文件lrwxrwxrwx. 1 root root 4096 3月 26 10:57，其中最前面的 l 表示这是一个链接文件，类似 Windows 的快捷方式drwxr-xr-x. 5 root root 4096 3月 26 10:57，其中最前面的 d 表示这是一个目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  cd</span><br></pre></td></tr></table></figure>，目录切换- `cd ..`，改变目录位置至当前目录的父目录(上级目录)。- `cd ~`，改变目录位置至用户登录时的工作目录。- `cd 回车`，回到家目录- `cd -`，上一个工作目录- `cd dir1/`，改变目录位置至 dir1 目录下。- `cd ~user`，改变目录位置至用户的工作目录。- `cd ../user`，改变目录位置至相对路径user的目录下。- `cd /../..`，改变目录位置至绝对路径的目录位置下。</code></pre></li><li><pre><code>cp 源文件 目标文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，复制文件</span><br><span class="line"></span><br><span class="line">  - `cp -r 源文件夹 目标文件夹`，复制文件夹</span><br><span class="line">  - `cp -r -v 源文件夹 目标文件夹`，复制文件夹(显示详细信息，一般用于文件夹很大，需要查看复制进度的时候)</span><br><span class="line">  - `cp /usr/share/easy-rsa/2.0/keys/&#123;ca.crt,server.&#123;crt,key&#125;,dh2048.pem,ta.key&#125; /etc/openvpn/keys/`，复制同目录下花括号中的文件</span><br><span class="line"></span><br><span class="line">- `tar cpf - . | tar xpf - -C /opt`，复制当前所有文件到 /opt 目录下，一般如果文件夹文件多的情况下用这个更好，用 cp 比较容易出问题</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  mv 文件 目标文件夹</span><br></pre></td></tr></table></figure>，移动文件到目标文件夹- `mv 文件`，不指定目录重命名后的名字，用来重命名文件</code></pre></li><li><p><code>touch 文件名</code>，创建一个空白文件&#x2F;更新已有文件的时间(后者少用)</p></li><li><p><code>mkdir 文件夹名</code>，创建文件夹</p></li><li><p><code>mkdir -p /opt/setups/nginx/conf/</code>，创建一个名为 conf 文件夹，如果它的上级目录 nginx 没有也会跟着一起生成，如果有则跳过</p></li><li><p><code>rmdir 文件夹名</code>，删除文件夹(只能删除文件夹里面是没有东西的文件夹)</p></li><li><pre><code>rm 文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，删除文件</span><br><span class="line"></span><br><span class="line">  - `rm -r 文件夹`，删除文件夹</span><br><span class="line">  - `rm -r -i 文件夹`，在删除文件夹里的文件会提示(要的话,在提示后面输入yes)</span><br><span class="line">  - `rm -r -f 文件夹`，强制删除</span><br><span class="line">  - `rm -r -f 文件夹1/ 文件夹2/ 文件夹3/`删除多个</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  find</span><br></pre></td></tr></table></figure>，高级查找- `find . -name *lin*`，其中 . 代表在当前目录找，-name 表示匹配文件名 / 文件夹名，*lin* 用通配符搜索含有lin的文件或是文件夹- `find . -iname *lin*`，其中 . 代表在当前目录找，-iname 表示匹配文件名 / 文件夹名（忽略大小写差异），*lin* 用通配符搜索含有lin的文件或是文件夹- `find / -name *.conf`，其中 / 代表根目录查找，*.conf代表搜索后缀会.conf的文件- `find /opt -name .oh-my-zsh`，其中 /opt 代表目录名，.oh-my-zsh 代表搜索的是隐藏文件 / 文件夹名字为 oh-my-zsh 的- `find /opt -type f -iname .oh-my-zsh`，其中 /opt 代表目录名，-type f 代表只找文件，.oh-my-zsh 代表搜索的是隐藏文件名字为 oh-my-zsh 的- `find /opt -type d -iname .oh-my-zsh`，其中 /opt 代表目录名，-type d 代表只找目录，.oh-my-zsh 代表搜索的是隐藏文件夹名字为 oh-my-zsh 的- `find . -name &quot;lin*&quot; -exec ls -l &#123;&#125; \;`，当前目录搜索lin开头的文件，然后用其搜索后的结果集，再执行ls -l的命令（这个命令可变，其他命令也可以），其中 -exec 和 &#123;&#125; ; 都是固定格式- `find /opt -type f -size +800M  -print0 | xargs -0 du -h | sort -nr`，找出 /opt 目录下大于 800 M 的文件- `find / -name &quot;*tower*&quot; -exec rm &#123;&#125; \;`，找到文件并删除- `find / -name &quot;*tower*&quot; -exec mv &#123;&#125; /opt \;`，找到文件并移到 opt 目录- `find . -name &quot;*&quot; |xargs grep &quot;youmeek&quot;`，递归查找当前文件夹下所有文件内容中包含 youmeek 的文件- `find . -size 0 | xargs rm -f &amp;`，删除当前目录下文件大小为0的文件- `du -hm --max-depth=2 | sort -nr | head -12`，找出系统中占用容量最大的前 12 个目录</code></pre></li><li><p><code>cat /etc/resolv.conf</code>，查看 DNS 设置</p></li><li><p><code>netstat -tlunp</code>，查看当前运行的服务，同时可以查看到：运行的程序已使用端口情况</p></li><li><p><code>env</code>，查看所有系统变量</p></li><li><p><code>export</code>，查看所有系统变量</p></li><li><pre><code>echo<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  - `echo $JAVA_HOME`，查看指定系统变量的值，这里查看的是自己配置的 JAVA_HOME。</span><br><span class="line">  - `echo &quot;字符串内容&quot;`，输出 &quot;字符串内容&quot;</span><br><span class="line">  - `echo &gt; aa.txt`，清空 aa.txt 文件内容（类似的还有：`: &gt; aa.txt`，其中 : 是一个占位符, 不产生任何输出）</span><br><span class="line"></span><br><span class="line">- `unset $JAVA_HOME`，删除指定的环境变量</span><br><span class="line"></span><br><span class="line">- `ln -s /opt/data /opt/logs/data`，表示给 /opt/logs 目录下创建一个名为 data 的软链接，该软链接指向到 /opt/data</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  grep</span><br></pre></td></tr></table></figure>- `shell grep -H &#39;安装&#39; *.sh`，查找当前目录下所有 sh 类型文件中，文件内容包含 `安装` 的当前行内容- `grep &#39;test&#39; java*`，显示当前目录下所有以 java 开头的文件中包含 test 的行- `grep &#39;test&#39; spring.ini docker.sh`，显示当前目录下 spring.ini docker.sh 两个文件中匹配 test 的行</code></pre></li><li><pre><code>ps<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  - `ps –ef|grep java`，查看当前系统中有关 java 的所有进程</span><br><span class="line">  - `ps -ef|grep --color java`，高亮显示当前系统中有关 java 的所有进程</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  kill</span><br></pre></td></tr></table></figure>- `kill 1234`，结束 pid 为 1234 的进程- `kill -9 1234`，强制结束 pid 为 1234 的进程（慎重）- `killall java`，结束同一进程组内的所有为 java 进程- `ps -ef|grep hadoop|grep -v grep|cut -c 9-15|xargs kill -9`，结束包含关键字 hadoop 的所有进程</code></pre></li><li><pre><code>head<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  - `head -n 10 spring.ini`，查看当前文件的前 10 行内容</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  tail</span><br></pre></td></tr></table></figure>- `tail -n 10 spring.ini`，查看当前文件的后 10 行内容- `tail -200f 文件名`，查看文件被更新的新内容尾 200 行，如果文件还有在新增可以动态查看到（一般用于查看日记文件）</code></pre></li></ul><h2 id="用户、权限-相关命令"><a href="#用户、权限-相关命令" class="headerlink" title="用户、权限-相关命令"></a>用户、权限-相关命令</h2><ul><li><p>使用 pem 证书登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i /opt/mykey.pem root@192.168.0.70</span><br></pre></td></tr></table></figure><ul><li>证书权限不能太大，不然无法使用：<code>chmod 600 mykey.pem</code></li></ul></li><li><p><code>hostname</code>，查看当前登陆用户全名</p></li><li><p><code>cat /etc/group</code>，查看所有组</p></li><li><p><code>cat /etc/passwd</code>，查看所有用户</p></li><li><p><code>groups youmeek</code>，查看 youmeek 用户属于哪个组</p></li><li><p><code>useradd youmeek -g judasn</code>，添加用户并绑定到 judasn 组下</p></li><li><pre><code>userdel -r youmeek<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，删除名字为 youmeek 的用户</span><br><span class="line"></span><br><span class="line">  - 参数：`-r`，表示删除用户的时候连同用户的家目录一起删除</span><br><span class="line"></span><br><span class="line">- 修改普通用户 youmeek 的权限跟 root 权限一样：</span><br><span class="line"></span><br><span class="line">  - 常用方法（原理是把该用户加到可以直接使用 sudo 的一个权限状态而已）：</span><br><span class="line"></span><br><span class="line">    - 编辑配置文件：`vim /etc/sudoers`</span><br><span class="line">    - 找到 98 行（预估），有一个：`root    ALL=(ALL)   ALL`，在这一行下面再增加一行，效果如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>   root    ALL=(ALL)   ALL   youmeek    ALL=(ALL)   ALL  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  - 另一种方法：</span><br><span class="line"></span><br><span class="line">    - 编辑系统用户的配置文件：`vim /etc/passwd`，找到 **root** 和 **youmeek** 各自开头的那一行，比如 root 是：`root:x:0:0:root:/root:/bin/zsh`，这个代表的含义为：*用户名:密码:UserId:GroupId:描述:家目录:登录使用的 shell*</span><br><span class="line">    - 通过这两行对比，我们可以直接修改 youmeek 所在行的 UserId 值 和 GroupId 值，都改为 0。</span><br><span class="line"></span><br><span class="line">- `groupadd judasn`，添加一个名为 judasn 的用户组</span><br><span class="line"></span><br><span class="line">- `groupdel judasn`，删除一个名为 judasn 的用户组（前提：先删除组下面的所有用户）</span><br><span class="line"></span><br><span class="line">- `usermod 用户名 -g 组名`，把用户修改到其他组下</span><br><span class="line"></span><br><span class="line">- `passwd youmeek`，修改 youmeek 用户的密码（前提：只有 root 用户才有修改其他用户的权限，其他用户只能修改自己的）</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  chmod 777 文件名/目录</span><br></pre></td></tr></table></figure>，给指定文件增加最高权限，系统中的所有人都可以进行读写。- linux 的权限分为 rwx。r 代表：可读，w 代表：可写，x 代表：可执行- 这三个权限都可以转换成数值表示，r = 4，w = 2，x = 1，- = 0，所以总和是 7，也就是最大权限。第一个 7 是所属主（user）的权限，第二个 7 是所属组（group）的权限，最后一位 7 是非本群组用户（others）的权限。- `chmod -R 777 目录` 表示递归目录下的所有文件夹，都赋予 777 权限- `chown myUsername:myGroupName myFile` 表示修改文件所属用户、组- `chown -R myUsername:myGroupName myFolder` 表示递归修改指定目录下的所有文件权限</code></pre></li><li><pre><code>suchown -R &lt;username&gt; a/chgrp -R &lt;username&gt; a/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ：切换到 root 用户，终端目录还是原来的地方（常用）</span><br><span class="line"></span><br><span class="line">  - `su -`：切换到 root 用户，其中 **-** 号另起一个终端并切换账号</span><br><span class="line">  - `su 用户名`，切换指定用户帐号登陆，终端目录还是原来地方。</span><br><span class="line">  - `su - 用户名`，切换到指定用户帐号登陆，其中 **-** 号另起一个终端并切换账号</span><br><span class="line"></span><br><span class="line">- `exit`，注销当前用户（常用）</span><br><span class="line"></span><br><span class="line">- `sudo 某个命令`，使用管理员权限使用命令，使用 sudo 回车之后需要输入当前登录账号的密码。（常用）</span><br><span class="line"></span><br><span class="line">- `passwd`，修改当前用户密码（常用）</span><br><span class="line"></span><br><span class="line">- 添加临时账号，并指定用户根目录，并只有可读权限方法</span><br><span class="line"></span><br><span class="line">  - 添加账号并指定根目录（用户名 tempuser）：`useradd -d /data/logs -m tempuser`</span><br><span class="line">  - 设置密码：`passwd tempuser` 回车设置密码</span><br><span class="line">  - 删除用户（该用户必须退出 SSH 才能删除成功），也会同时删除组：`userdel tempuser`</span><br><span class="line"></span><br><span class="line">## 磁盘管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  df -h</span><br></pre></td></tr></table></figure>，自动以合适的磁盘容量单位查看磁盘大小和使用空间- `df -k`，以磁盘容量单位 K 为数值结果查看磁盘使用情况- `df -m`，以磁盘容量单位 M 为数值结果查看磁盘使用情况</code></pre></li><li><p><code>du -sh /opt</code>，查看 opt 这个文件夹大小 （h 的意思 human-readable 用人类可读性较好方式显示，系统会自动调节单位，显示合适大小的单位）</p></li><li><p><code>du -sh ./*</code>，查看当前目录下所有文件夹大小 （h 的意思 human-readable 用人类可读性较好方式显示，系统会自动调节单位，显示合适大小的单位）</p></li><li><p><code>du -sh /opt/setups/</code>，显示 &#x2F;opt&#x2F;setups&#x2F; 目录所占硬盘空间大小（s 表示 –summarize 仅显示总计，即当前目录的大小。h 表示 –human-readable 以 KB，MB，GB 为单位，提高信息的可读性）</p></li><li><pre><code>mount /dev/sdb5 /newDir/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  ，把分区 sdb5 挂载在根目录下的一个名为 newDir 的空目录下，需要注意的是：这个目录最好为空，不然已有的那些文件将看不到，除非卸载挂载。</span><br><span class="line"></span><br><span class="line">  - 挂载好之后，通过：`df -h`，查看挂载情况。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  umount /newDir/</span><br></pre></td></tr></table></figure>，卸载挂载，用目录名- 如果这样卸载不了可以使用：`umount -l /newDir/`</code></pre></li><li><p><code>umount /dev/sdb5</code>，卸载挂载，用分区名</p></li></ul><h2 id="wget-下载文件"><a href="#wget-下载文件" class="headerlink" title="wget 下载文件"></a>wget 下载文件</h2><ul><li>常规下载：<code>wget http://www.gitnavi.com/index.html</code></li><li>自动断点下载：<code>wget -c http://www.gitnavi.com/index.html</code></li><li>后台下载：<code>wget -b http://www.gitnavi.com/index.html</code></li><li>伪装代理名称下载：<code>wget --user-agent=&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16&quot; http://www.gitnavi.com/index.html</code></li><li>限速下载：<code>wget --limit-rate=300k http://www.gitnavi.com/index.html</code></li><li>批量下载：<code>wget -i /opt/download.txt</code>，一个下载地址一行</li><li>后台批量下载：<code>wget -b -c -i /opt/download.txt</code>，一个下载地址一行</li></ul><hr><h1 id="Linux-下常用压缩文件的解压、压缩"><a href="#Linux-下常用压缩文件的解压、压缩" class="headerlink" title="Linux 下常用压缩文件的解压、压缩"></a>Linux 下常用压缩文件的解压、压缩</h1><h2 id="常用压缩包–解压–令整理"><a href="#常用压缩包–解压–令整理" class="headerlink" title="常用压缩包–解压–令整理"></a>常用压缩包–解压–令整理</h2><ul><li><p>Linux 后缀为 <code>.war</code> 格式的文件（一般用在部署 Tomcat 项目的时候）</p></li><li><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -oq XXXXXX.war -d ROOT</span><br></pre></td></tr></table></figure><ul><li>如果没有 ROOT 目录会自动创建 ROOT 目录。</li></ul></li><li><p>Linux 后缀为 <code>.tar.gz</code> 格式的文件-解压</p></li><li><p>命令：<code>tar zxvf XXXXXX.tar.gz</code></p></li><li><p>Linux 后缀为 <code>.bz2</code> 格式的文件-解压</p></li><li><p>命令：<code>bzip2 -d XXXXXX.bz2</code></p></li><li><p>Linux 后缀为 <code>.tar.bz2</code> 格式的文件-解压</p></li><li><p>命令：<code>tar jxvf XXXXXX.tar.bz2</code></p></li><li><p>Linux 后缀为 <code>.tar</code> 格式的文件-解压</p></li><li><p>命令：<code>tar zxvf XXXXXX.tar</code></p></li><li><p>Linux 后缀为 <code>.gz</code> 格式的文件-解压</p></li><li><p>命令：<code>gunzip XXXXXX.gz</code></p></li><li><p>Linux 后缀为 <code>.zip</code> 格式的文件-解压</p></li><li><p>命令：<code>unzip XXXXXX.zip</code></p></li><li><p>命令：<code>unzip XXXXXX.zip -d /opt/</code>，解压到指定目录</p></li><li><p>Linux 后缀为 <code>.7z</code> 格式的文件-解压</p></li><li><p>命令：<code>7za x XXXXXX.7z</code></p></li><li><p>Linux 后缀为 <code>.tar.xz</code> 格式的文件-解压，解压出来是tar，再对tar进行解压</p></li><li><p>命令：<code>tar xf XXXXXX.tar.xz</code></p></li></ul><hr><h2 id="常用文件进行–压缩–命令整理"><a href="#常用文件进行–压缩–命令整理" class="headerlink" title="常用文件进行–压缩–命令整理"></a>常用文件进行–压缩–命令整理</h2><ul><li>Linux 压缩文件夹为后缀 <code>.war</code> 格式的文件（最好不要对根目录进行压缩，不然会多出一级目录）</li><li>命令：<code>jar -cvfM0 cas.war /opt/cas/META-INF /opt/cas/WEB-INF /opt/cas/index.jsp</code></li><li>或者命令：<code>cd 项目根目录 ; jar -cvfM0 cas.war ./*</code></li><li>Linux 压缩文件为后缀 <code>.tar</code> 格式的文件</li><li>命令：<code>tar -zcvf test11.tar test11</code></li><li>Linux 压缩文件为后缀 <code>.tar.gz</code> 格式的文件</li><li>命令：<code>tar -zcvf test11.tar.gz test11</code></li><li>Linux 压缩文件为后缀 <code>.bz2</code> 格式的文件</li><li>命令：<code>bzip2 -v test.txt</code></li><li>Linux 压缩文件为后缀 <code>.tar.bz2</code> 格式的文件</li><li>命令：<code>tar -jcvf test11.tar.gz test11</code></li><li>Linux 压缩文件为后缀 <code>.zip</code> 格式的文件</li><li>命令：<code>zip -r test1.zip /opt/test1/</code></li><li>Linux 压缩文件为后缀 <code>.7z</code> 格式的文件</li><li>命令：<code>7za a test1.7z /opt/test1/</code></li></ul><h2 id="分卷压缩"><a href="#分卷压缩" class="headerlink" title="分卷压缩"></a>分卷压缩</h2><ul><li>分卷压缩：<code>zip -s 100M myFile.zip --out newFile.zip</code></li><li>最终效果：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">newFile.z01</span><br><span class="line">newFile.z02</span><br><span class="line">newFile.z03</span><br><span class="line">newFile.z04</span><br><span class="line">newFile.zip</span><br></pre></td></tr></table></figure><h2 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h2><ul><li>7z<ul><li>7z 的安装：<ul><li>访问官网下载解压包：<a href="http://sourceforge.net/projects/p7zip/files/p7zip/">http://sourceforge.net/projects/p7zip/files/p7zip/</a></li><li>解压压缩包：<code>tar jxvf p7zip_15.14_src_all.tar.bz2</code></li><li>进入目录：<code>cd p7zip_15.14</code></li><li>执行安装：<code>sh install.sh</code></li></ul></li></ul></li><li>rar<ul><li>rar 的安装：<ul><li>下载：<code>wget http://www.rarlab.com/rar/rarlinux-3.8.0.tar.gz</code></li><li>解压下载下来的压缩包：<code>tar zxvf rarlinux-3.8.0.tar.gz</code></li><li>进入解压后目录：<code>cd rar</code></li><li>编译：<code>make</code></li><li>安装：<code>make install</code></li></ul></li><li>rar 解压：<code>rar x 文件名.rar</code></li></ul></li></ul><hr><p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。</p><p>注解</p><p>类似的工具有rsync；scp消耗资源少，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。rsync比scp会快一点，但当小文件多的情况下，rsync会导致硬盘I&#x2F;O非常高，而scp基本不影响系统正常使用。</p><h2 id="18-1-命令格式："><a href="#18-1-命令格式：" class="headerlink" title="18.1. 命令格式："></a>18.1. 命令格式：</h2><p>scp [参数] [原路径] [目标路径]</p><h2 id="18-2-命令参数："><a href="#18-2-命令参数：" class="headerlink" title="18.2. 命令参数："></a>18.2. 命令参数：</h2><ul><li>-1 强制scp命令使用协议ssh1</li><li>-2 强制scp命令使用协议ssh2</li><li>-4 强制scp命令只使用IPv4寻址</li><li>-6 强制scp命令只使用IPv6寻址</li><li>-B 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li><li>-p 留原文件的修改时间，访问时间和访问权限。</li><li>-q 不显示传输进度条。</li><li>-r 递归复制整个目录。</li><li>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit 限定用户所能使用的带宽，以Kbit&#x2F;s为单位。</li><li>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port 注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul><h2 id="18-3-使用说明"><a href="#18-3-使用说明" class="headerlink" title="18.3. 使用说明"></a>18.3. 使用说明</h2><h3 id="从本地服务器复制到远程服务器"><a href="#从本地服务器复制到远程服务器" class="headerlink" title="从本地服务器复制到远程服务器"></a>从本地服务器复制到远程服务器</h3><p>复制文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$scp local_file remote_username@remote_ip:remote_folder</span><br><span class="line">$scp local_file remote_username@remote_ip:remote_file</span><br><span class="line">$scp local_file remote_ip:remote_folder</span><br><span class="line">$scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure><p>指定了用户名，命令执行后需要输入用户密码；如果不指定用户名，命令执行后需要输入用户名和密码；</p><p>复制目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$scp -r local_folder remote_username@remote_ip:remote_folder</span><br><span class="line">$scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure><p>第1个指定了用户名，命令执行后需要输入用户密码； 第2个没有指定用户名，命令执行后需要输入用户名和密码；</p><p>注解</p><p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p><h2 id="18-4-使用示例"><a href="#18-4-使用示例" class="headerlink" title="18.4. 使用示例"></a>18.4. 使用示例</h2><h3 id="实例1：从远处复制文件到本地目录"><a href="#实例1：从远处复制文件到本地目录" class="headerlink" title="实例1：从远处复制文件到本地目录"></a>实例1：从远处复制文件到本地目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</span><br></pre></td></tr></table></figure><p>说明： 从10.6.159.147机器上的&#x2F;opt&#x2F;soft&#x2F;的目录中下载demo.tar 文件到本地&#x2F;opt&#x2F;soft&#x2F;目录中</p><h3 id="实例2：从远处复制到本地"><a href="#实例2：从远处复制到本地" class="headerlink" title="实例2：从远处复制到本地"></a>实例2：从远处复制到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</span><br></pre></td></tr></table></figure><p>说明： 从10.6.159.147机器上的&#x2F;opt&#x2F;soft&#x2F;中下载test目录到本地的&#x2F;opt&#x2F;soft&#x2F;目录来。</p><h3 id="实例3：上传本地文件到远程机器指定目录"><a href="#实例3：上传本地文件到远程机器指定目录" class="headerlink" title="实例3：上传本地文件到远程机器指定目录"></a>实例3：上传本地文件到远程机器指定目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scp /opt/soft/demo.tar root@10.6.159.147:/opt/soft/scptest</span><br></pre></td></tr></table></figure><p>说明： 复制本地opt&#x2F;soft&#x2F;目录下的文件demo.tar 到远程机器10.6.159.147的opt&#x2F;soft&#x2F;scptest目录</p><h3 id="实例4：上传本地目录到远程机器指定目录"><a href="#实例4：上传本地目录到远程机器指定目录" class="headerlink" title="实例4：上传本地目录到远程机器指定目录"></a>实例4：上传本地目录到远程机器指定目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scp -r /opt/soft/test root@10.6.159.147:/opt/soft/scptest</span><br></pre></td></tr></table></figure><p>说明： 上传本地目录 &#x2F;opt&#x2F;soft&#x2F;test到远程机器10.6.159.147上&#x2F;opt&#x2F;soft&#x2F;scptest的目录中</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB 常用命令</title>
      <link href="/blog/2022/04/16/ADB-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2022/04/16/ADB-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="常用的ADB命令"><a href="#常用的ADB命令" class="headerlink" title="常用的ADB命令"></a>常用的ADB命令</h4><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h5 id="连接USB"><a href="#连接USB" class="headerlink" title="连接USB"></a>连接USB</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb usb</span><br></pre></td></tr></table></figure><h5 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure><h5 id="连接局域网手机"><a href="#连接局域网手机" class="headerlink" title="连接局域网手机"></a>连接局域网手机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.x.x:5555</span><br></pre></td></tr></table></figure><h5 id="断开所有连接"><a href="#断开所有连接" class="headerlink" title="断开所有连接"></a>断开所有连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure><h5 id="查看已连接手机"><a href="#查看已连接手机" class="headerlink" title="查看已连接手机"></a>查看已连接手机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><h5 id="断开手机连接"><a href="#断开手机连接" class="headerlink" title="断开手机连接"></a>断开手机连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb disconnect 192.168.x.x</span><br></pre></td></tr></table></figure><h5 id="指定端口号"><a href="#指定端口号" class="headerlink" title="指定端口号"></a>指定端口号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -p 5555 start-server</span><br></pre></td></tr></table></figure><ul><li>默认为5037</li></ul><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><h5 id="android-系统版本号"><a href="#android-系统版本号" class="headerlink" title="android 系统版本号"></a>android 系统版本号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><h5 id="查看IP地址"><a href="#查看IP地址" class="headerlink" title="查看IP地址"></a>查看IP地址</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ifconfig | grep Mask</span><br></pre></td></tr></table></figure><h5 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><h5 id="查看内存信息"><a href="#查看内存信息" class="headerlink" title="查看内存信息"></a>查看内存信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/meminfo</span><br></pre></td></tr></table></figure><ul><li><p>更多系统信息:</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>ro.build.version.sdk</td><td>SDK 版本</td></tr><tr><td>ro.build.version.release</td><td>Android 系统版本</td></tr><tr><td>ro.build.version.security_patch</td><td>Android 安全补丁程序级别</td></tr><tr><td>ro.product.model</td><td>型号</td></tr><tr><td>ro.product.brand</td><td>品牌</td></tr><tr><td>ro.product.name</td><td>设备名</td></tr><tr><td>ro.product.board</td><td>处理器型号</td></tr><tr><td>ro.product.cpu.abilist</td><td>CPU 支持的 abi 列表[<em>节注一</em>]</td></tr><tr><td>persist.sys.isUsbOtgEnabled</td><td>是否支持 OTG</td></tr><tr><td>dalvik.vm.heapsize</td><td>每个应用程序的内存上限</td></tr><tr><td>ro.sf.lcd_density</td><td>屏幕密度</td></tr></tbody></table></li></ul><h5 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps</span><br></pre></td></tr></table></figure><p>  各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>所属用户</td></tr><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PPID</td><td>父进程 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><h5 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell top</span><br></pre></td></tr></table></figure><p>  各列含义：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>CPU%</td><td>当前瞬间占用 CPU 百分比</td></tr><tr><td>S</td><td>进程状态（R&#x3D;运行，S&#x3D;睡眠，T&#x3D;跟踪&#x2F;停止，Z&#x3D;僵尸进程）</td></tr><tr><td>#THR</td><td>线程数</td></tr><tr><td>VSS</td><td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td></tr><tr><td>RSS</td><td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td></tr><tr><td>PCY</td><td>调度策略优先级，SP_BACKGROUND&#x2F;SPFOREGROUND</td></tr><tr><td>UID</td><td>进程所有者的用户 ID</td></tr><tr><td>NAME</td><td>进程名</td></tr></tbody></table><h5 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package &lt;pn&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h5 id="指定端口号-1"><a href="#指定端口号-1" class="headerlink" title="指定端口号"></a>指定端口号</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -p 5555 start-server</span><br></pre></td></tr></table></figure><ul><li>默认为5037</li></ul><hr><h3 id="查看应用于交互"><a href="#查看应用于交互" class="headerlink" title="查看应用于交互"></a>查看应用于交互</h3><ul><li><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下:</p><ul><li><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options] &lt;INTENT&gt;</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop &lt;packagename&gt;</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table></li><li><p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a &lt;ACTION&gt;</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c &lt;CATEGORY&gt;</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n &lt;COMPONENT&gt;</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>&#96;-e</td><td>–es <EXTRA_KEY> <EXTRA_STRING_VALUE>&#96;</td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table></li></ul></li></ul><h5 id="查看前台Activity"><a href="#查看前台Activity" class="headerlink" title="查看前台Activity"></a>查看前台Activity</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities</span><br></pre></td></tr></table></figure><h5 id="安卓App"><a href="#安卓App" class="headerlink" title="安卓App"></a>安卓App</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install</span><br></pre></td></tr></table></figure><p>  后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下:</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 &#x2F;mnt&#x2F;asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><h5 id="卸载App"><a href="#卸载App" class="headerlink" title="卸载App"></a>卸载App</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [-k] &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>  -k为可选参数,表示卸载后保留缓存目录</p><h5 id="截图保存到当前那文件夹"><a href="#截图保存到当前那文件夹" class="headerlink" title="截图保存到当前那文件夹"></a>截图保存到当前那文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb exec-out screencap -p &gt; sc.png</span><br></pre></td></tr></table></figure><h5 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h5><ul><li><p>录制屏幕以 mp4 格式保存到 &#x2F;sdcard：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><p>需要停止时按 Ctrl-C，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/filename.mp4</span><br></pre></td></tr></table></figure></li></ul><h5 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><h5 id="清楚应用缓存"><a href="#清楚应用缓存" class="headerlink" title="清楚应用缓存"></a>清楚应用缓存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;pn&gt;</span><br></pre></td></tr></table></figure><h5 id="显示虚拟按键"><a href="#显示虚拟按键" class="headerlink" title="显示虚拟按键"></a>显示虚拟按键</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice -n com.android.systemui/.SystemUIService</span><br></pre></td></tr></table></figure><h5 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop &lt;pn&gt;adb reboot</span><br></pre></td></tr></table></figure><hr><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h5 id="复制设备文件到电脑"><a href="#复制设备文件到电脑" class="headerlink" title="复制设备文件到电脑"></a>复制设备文件到电脑</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;设备路径&gt; [电脑目录]</span><br></pre></td></tr></table></figure><ul><li>不设置电脑目录,默认复制到当前文件夹下</li></ul><h5 id="复制电脑文件到手机"><a href="#复制电脑文件到手机" class="headerlink" title="复制电脑文件到手机"></a>复制电脑文件到手机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑路径&gt; &lt;设备目录&gt;</span><br></pre></td></tr></table></figure><ul><li>adb push ~&#x2F;sr.mp4 &#x2F;sdcard&#x2F;</li></ul><h3 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键&#x2F;输入"></a>模拟按键&#x2F;输入</h3><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，通过它可以做一些有趣的事情。</p><h5 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent &lt;keycode&gt;</span><br></pre></td></tr></table></figure><p>  - </p><table><thead><tr><th>keycode</th><th>含义</th></tr></thead><tbody><tr><td>3</td><td>HOME 键</td></tr><tr><td>4</td><td>返回键</td></tr><tr><td>5</td><td>打开拨号应用</td></tr><tr><td>6</td><td>挂断电话</td></tr><tr><td>24</td><td>增加音量</td></tr><tr><td>25</td><td>降低音量</td></tr><tr><td>26</td><td>电源键</td></tr><tr><td>27</td><td>拍照（需要在相机应用里）</td></tr><tr><td>64</td><td>打开浏览器</td></tr><tr><td>82</td><td>菜单键</td></tr><tr><td>85</td><td>播放&#x2F;暂停</td></tr><tr><td>86</td><td>停止播放</td></tr><tr><td>87</td><td>播放下一首</td></tr><tr><td>88</td><td>播放上一首</td></tr><tr><td>122</td><td>移动光标到行首或列表顶部</td></tr><tr><td>123</td><td>移动光标到行末或列表底部</td></tr><tr><td>126</td><td>恢复播放</td></tr><tr><td>127</td><td>暂停播放</td></tr><tr><td>164</td><td>静音</td></tr><tr><td>176</td><td>打开系统设置</td></tr><tr><td>187</td><td>切换应用</td></tr><tr><td>207</td><td>打开联系人</td></tr><tr><td>208</td><td>打开日历</td></tr><tr><td>209</td><td>打开音乐</td></tr><tr><td>210</td><td>打开计算器</td></tr><tr><td>220</td><td>降低屏幕亮度</td></tr><tr><td>221</td><td>提高屏幕亮度</td></tr><tr><td>223</td><td>系统休眠</td></tr><tr><td>224</td><td>点亮屏幕</td></tr><tr><td>231</td><td>打开语音助手</td></tr><tr><td>276</td><td>如果没有 wakelock 则让系统休眠</td></tr></tbody></table><h5 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h5><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 26</span><br></pre></td></tr></table></figure><p>执行效果相当于按电源键。</p><h5 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h5><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 82</span><br></pre></td></tr></table></figure><h5 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h5><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 3</span><br></pre></td></tr></table></figure><h5 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h5><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 4</span><br></pre></td></tr></table></figure><h5 id="增加音量："><a href="#增加音量：" class="headerlink" title="增加音量："></a>增加音量：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 24</span><br></pre></td></tr></table></figure><h5 id="降低音量："><a href="#降低音量：" class="headerlink" title="降低音量："></a>降低音量：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 25</span><br></pre></td></tr></table></figure><h5 id="静音："><a href="#静音：" class="headerlink" title="静音："></a>静音：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 164</span><br></pre></td></tr></table></figure><h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><h5 id="播放-暂停："><a href="#播放-暂停：" class="headerlink" title="播放&#x2F;暂停："></a>播放&#x2F;暂停：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 85</span><br></pre></td></tr></table></figure><h5 id="停止播放："><a href="#停止播放：" class="headerlink" title="停止播放："></a>停止播放：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 86</span><br></pre></td></tr></table></figure><h5 id="播放下一首："><a href="#播放下一首：" class="headerlink" title="播放下一首："></a>播放下一首：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 87</span><br></pre></td></tr></table></figure><h5 id="播放上一首："><a href="#播放上一首：" class="headerlink" title="播放上一首："></a>播放上一首：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 88</span><br></pre></td></tr></table></figure><h5 id="恢复播放："><a href="#恢复播放：" class="headerlink" title="恢复播放："></a>恢复播放：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 126</span><br></pre></td></tr></table></figure><h5 id="暂停播放："><a href="#暂停播放：" class="headerlink" title="暂停播放："></a>暂停播放：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 127</span><br></pre></td></tr></table></figure><h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮&#x2F;熄灭屏幕"></a>点亮&#x2F;熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p><h5 id="点亮屏幕："><a href="#点亮屏幕：" class="headerlink" title="点亮屏幕："></a>点亮屏幕：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 224</span><br></pre></td></tr></table></figure><h5 id="熄灭屏幕："><a href="#熄灭屏幕：" class="headerlink" title="熄灭屏幕："></a>熄灭屏幕：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 223</span><br></pre></td></tr></table></figure><h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 <code>input swipe</code> 来解锁。</p><p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe 300 1000 300 500</span><br></pre></td></tr></table></figure><p>参数 <code>300 1000 300 500</code> 分别表示<code>起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</code>。</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 <code>input</code> 命令来输入文本。</p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text hello</span><br></pre></td></tr></table></figure><p>现在 <code>hello</code> 出现在文本框了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的三棵树</title>
      <link href="/blog/2021/11/07/Flutter%E4%B8%AD%E7%9A%84%E4%B8%89%E6%A3%B5%E6%A0%91/"/>
      <url>/blog/2021/11/07/Flutter%E4%B8%AD%E7%9A%84%E4%B8%89%E6%A3%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter的核心渲染模块：三棵树详解"><a href="#Flutter的核心渲染模块：三棵树详解" class="headerlink" title="Flutter的核心渲染模块：三棵树详解"></a>Flutter的核心渲染模块：三棵树详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Flutter中，渲染机制是整个框架的核心部分，它将开发者的代码转化为用户界面。Flutter的渲染机制主要由三棵树组成：Widget树、Element树和RenderObject树。这三棵树相互协作，共同实现了Flutter的高效渲染。本文将详细分析这三棵树的作用、关系及其内部工作原理，并结合源码进行说明。</p><h4 id="2-Widget树"><a href="#2-Widget树" class="headerlink" title="2. Widget树"></a>2. Widget树</h4><p>Widget树是Flutter中的声明式UI结构，描述了用户界面中的各个组件及其属性。每一个Widget都是不可变的，一旦创建后就不能修改。当需要改变UI时，Flutter会创建一个新的Widget。</p><h5 id="2-1-Widget树的结构"><a href="#2-1-Widget树的结构" class="headerlink" title="2.1 Widget树的结构"></a>2.1 Widget树的结构</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter Widget Tree&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">&#x27;Hello, Flutter!&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码生成了一棵简单的Widget树，其结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mathematica</span><br><span class="line"></span><br><span class="line">MyApp</span><br><span class="line">└── MaterialApp</span><br><span class="line">    └── Scaffold</span><br><span class="line">        ├── AppBar</span><br><span class="line">        │   └── Text</span><br><span class="line">        └── Center</span><br><span class="line">            └── Text</span><br></pre></td></tr></table></figure><h4 id="3-Element树"><a href="#3-Element树" class="headerlink" title="3. Element树"></a>3. Element树</h4><p>Element树是Widget树的实例化版本，管理着Widget的生命周期和状态。每个Widget对应一个Element。Element树的主要作用是维护Widget的构建上下文，并在Widget发生变化时进行更新。</p><h5 id="3-1-Element树的结构"><a href="#3-1-Element树的结构" class="headerlink" title="3.1 Element树的结构"></a>3.1 Element树的结构</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView.builder(</span><br><span class="line">    itemBuilder: (context, index) &#123;</span><br><span class="line">      <span class="keyword">return</span> ListTile(</span><br><span class="line">        title: Text(<span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>ListView.builder</code>构建时，会生成一棵Element树，类似如下结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mathematica</span><br><span class="line"></span><br><span class="line">ListView</span><br><span class="line">└── BuilderElement</span><br><span class="line">    ├── ListTile</span><br><span class="line">    │   └── Text</span><br><span class="line">    ├── ListTile</span><br><span class="line">    │   └── Text</span><br><span class="line">    └── ListTile</span><br><span class="line">        └── Text</span><br></pre></td></tr></table></figure><h4 id="4-RenderObject树"><a href="#4-RenderObject树" class="headerlink" title="4. RenderObject树"></a>4. RenderObject树</h4><p>RenderObject树是最终的渲染树，负责布局、绘制和命中测试。每个RenderObject对应一个Element，并通过布局和绘制的方式将UI渲染到屏幕上。</p><h5 id="4-1-RenderObject树的结构"><a href="#4-1-RenderObject树的结构" class="headerlink" title="4.1 RenderObject树的结构"></a>4.1 RenderObject树的结构</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRenderObject</span> <span class="keyword">extends</span> <span class="title">RenderBox</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> performLayout() &#123;</span><br><span class="line">    size = constraints.biggest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(PaintingContext context, Offset offset) &#123;</span><br><span class="line">    context.canvas.drawRect(offset &amp; size, Paint()..color = Colors.blue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当自定义RenderObject时，会生成一棵RenderObject树，其结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RenderView</span><br><span class="line">└── MyRenderObject</span><br></pre></td></tr></table></figure><h4 id="5-三棵树的关系"><a href="#5-三棵树的关系" class="headerlink" title="5. 三棵树的关系"></a>5. 三棵树的关系</h4><ol><li><strong>Widget树</strong>：声明UI结构，不可变。</li><li><strong>Element树</strong>：Widget树的实例化，管理Widget的生命周期和状态。</li><li><strong>RenderObject树</strong>：负责布局和绘制，将UI渲染到屏幕上。</li></ol><p>这三棵树之间的关系可以通过下图来表示：</p><h4 id="6-源码解析"><a href="#6-源码解析" class="headerlink" title="6. 源码解析"></a>6. 源码解析</h4><p>以下是Flutter中三棵树的核心代码。</p><h5 id="6-1-Widget树的源码解析"><a href="#6-1-Widget树的源码解析" class="headerlink" title="6.1 Widget树的源码解析"></a>6.1 Widget树的源码解析</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Key key;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">Element</span> createElement();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString(&#123; DiagnosticLevel minLevel = DiagnosticLevel.debug &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;<span class="subst">$&#123;describeIdentity(<span class="keyword">this</span>)&#125;</span>(<span class="subst">$&#123;toStringDetails()&#125;</span>)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">String</span> toStringDetails() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-Element树的源码解析"><a href="#6-2-Element树的源码解析" class="headerlink" title="6.2 Element树的源码解析"></a>6.2 Element树的源码解析</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> <span class="keyword">implements</span> <span class="title">BuildContext</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Element</span>(Widget widget) : _widget = widget;</span><br><span class="line"></span><br><span class="line">  Widget <span class="keyword">get</span> widget =&gt; _widget;</span><br><span class="line">  Widget _widget;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> mount(<span class="built_in">Element</span> parent, <span class="built_in">dynamic</span> newSlot) &#123;</span><br><span class="line">    _parent = parent;</span><br><span class="line">    _slot = newSlot;</span><br><span class="line">    _depth = _parent != <span class="keyword">null</span> ? _parent.depth + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    _active = <span class="keyword">true</span>;</span><br><span class="line">    _updateInheritance();</span><br><span class="line">    _rebuild();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> rebuild() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_active || !_dirty)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    performRebuild();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="keyword">void</span> performRebuild();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-RenderObject树的源码解析"><a href="#6-3-RenderObject树的源码解析" class="headerlink" title="6.3 RenderObject树的源码解析"></a>6.3 RenderObject树的源码解析</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderObject</span> <span class="keyword">extends</span> <span class="title">AbstractNode</span> <span class="title">with</span> <span class="title">DiagnosticableTreeMixin</span> <span class="keyword">implements</span> <span class="title">HitTestTarget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> layout(Constraints constraints, &#123; <span class="built_in">bool</span> parentUsesSize = <span class="keyword">false</span> &#125;) &#123;</span><br><span class="line">    RenderObject parent = <span class="keyword">this</span>.parent;</span><br><span class="line">    <span class="keyword">if</span> (!parentUsesSize || parent <span class="keyword">is</span>! RenderObject) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(!_doingThisLayoutWithCallback);</span><br><span class="line">      _doingThisLayoutWithCallback = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        performLayout();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _doingThisLayoutWithCallback = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="keyword">void</span> performLayout();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> paint(PaintingContext context, Offset offset);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> hitTest(HitTestResult result, &#123; Offset position &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h4><p>通过本文的详细分析，我们深入了解了Flutter的核心渲染模块——三棵树：Widget树、Element树和RenderObject树。这三棵树分别负责声明UI结构、管理生命周期和状态、以及最终的布局和绘制。理解这三棵树的关系和工作原理，对于开发高效、流畅的Flutter应用具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中与原生Android、iOS进行通信</title>
      <link href="/blog/2021/07/03/Flutter%E4%B8%AD%E4%B8%8E%E5%8E%9F%E7%94%9FAndroid%E3%80%81iOS%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/"/>
      <url>/blog/2021/07/03/Flutter%E4%B8%AD%E4%B8%8E%E5%8E%9F%E7%94%9FAndroid%E3%80%81iOS%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter与原生Android、iOS的通信"><a href="#Flutter与原生Android、iOS的通信" class="headerlink" title="Flutter与原生Android、iOS的通信"></a>Flutter与原生Android、iOS的通信</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>Flutter提供了三种主要的通信方式：BasicMessageChannel、MethodChannel和EventChannel。本文将详细介绍Flutter如何与原生Android和iOS进行通信，并结合代码示例和详细解释这三种通信方式的原理。</p><h4 id="2-Flutter与原生通信的基本流程"><a href="#2-Flutter与原生通信的基本流程" class="headerlink" title="2. Flutter与原生通信的基本流程"></a>2. Flutter与原生通信的基本流程</h4><ol><li><strong>Flutter端</strong>：通过调用Flutter插件的通信通道（如MethodChannel）来发送消息或请求。</li><li><strong>原生端</strong>：在相应的通信通道中接收消息或请求，并进行处理，然后将结果返回给Flutter端。</li></ol><h4 id="3-BasicMessageChannel"><a href="#3-BasicMessageChannel" class="headerlink" title="3. BasicMessageChannel"></a>3. BasicMessageChannel</h4><p>BasicMessageChannel用于传输文本消息和半结构化数据（如字符串和Map）。它是双向的，可以用于Flutter和原生之间的相互通信。</p><h5 id="3-1-Flutter端代码示例"><a href="#3-1-Flutter端代码示例" class="headerlink" title="3.1 Flutter端代码示例"></a>3.1 Flutter端代码示例</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> BasicMessageChannel&lt;<span class="built_in">String</span>&gt; _channel = BasicMessageChannel&lt;<span class="built_in">String</span>&gt;(<span class="string">&#x27;basic_channel&#x27;</span>, StringCodec());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;BasicMessageChannel Example&#x27;</span>)),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: ElevatedButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="built_in">String</span> reply = <span class="keyword">await</span> _channel.send(<span class="string">&#x27;Hello from Flutter!&#x27;</span>);</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&#x27;Received reply: <span class="subst">$reply</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&#x27;Send Message&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-Android端代码示例"><a href="#3-2-Android端代码示例" class="headerlink" title="3.2 Android端代码示例"></a>3.2 Android端代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity;</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.BasicMessageChannel;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.StringCodec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureFlutterEngine</span><span class="params">(FlutterEngine flutterEngine)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureFlutterEngine(flutterEngine);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BasicMessageChannel</span>&lt;&gt;(flutterEngine.getDartExecutor().getBinaryMessenger(), <span class="string">&quot;basic_channel&quot;</span>, StringCodec.INSTANCE)</span><br><span class="line">            .setMessageHandler((message, reply) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Received message: &quot;</span> + message);</span><br><span class="line">                reply.reply(<span class="string">&quot;Hello from Android!&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-iOS端代码示例"><a href="#3-3-iOS端代码示例" class="headerlink" title="3.3 iOS端代码示例"></a>3.3 iOS端代码示例</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">FlutterAppDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">application</span>(</span><br><span class="line">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span><br><span class="line">  ) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> controller <span class="operator">=</span> window<span class="operator">?</span>.rootViewController <span class="keyword">as!</span> <span class="type">FlutterViewController</span></span><br><span class="line">    <span class="keyword">let</span> channel <span class="operator">=</span> <span class="type">FlutterBasicMessageChannel</span>(name: <span class="string">&quot;basic_channel&quot;</span>, binaryMessenger: controller.binaryMessenger, codec: <span class="type">FlutterStringCodec</span>.sharedInstance())</span><br><span class="line"></span><br><span class="line">    channel.setMessageHandler &#123; (message, reply) <span class="keyword">in</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;Received message: <span class="subst">\(message <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class="line">      reply(<span class="string">&quot;Hello from iOS!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-MethodChannel"><a href="#4-MethodChannel" class="headerlink" title="4. MethodChannel"></a>4. MethodChannel</h4><p>MethodChannel用于传输方法调用，它是Flutter与原生代码通信的最常用方式。Flutter端调用原生方法，原生端执行相应操作并返回结果。</p><h5 id="4-1-Flutter端代码示例"><a href="#4-1-Flutter端代码示例" class="headerlink" title="4.1 Flutter端代码示例"></a>4.1 Flutter端代码示例</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _channel = MethodChannel(<span class="string">&#x27;method_channel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;MethodChannel Example&#x27;</span>)),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: ElevatedButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="built_in">String</span> result = <span class="keyword">await</span> _channel.invokeMethod(<span class="string">&#x27;getPlatformVersion&#x27;</span>);</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Platform version: <span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Failed to get platform version: &#x27;<span class="subst">$&#123;e.message&#125;</span>&#x27;.&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&#x27;Get Platform Version&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-Android端代码示例"><a href="#4-2-Android端代码示例" class="headerlink" title="4.2 Android端代码示例"></a>4.2 Android端代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity;</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNEL</span> <span class="operator">=</span> <span class="string">&quot;method_channel&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureFlutterEngine</span><span class="params">(FlutterEngine flutterEngine)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureFlutterEngine(flutterEngine);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MethodChannel</span>(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)</span><br><span class="line">            .setMethodCallHandler(</span><br><span class="line">                (MethodCall call, MethodChannel.Result result) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (call.method.equals(<span class="string">&quot;getPlatformVersion&quot;</span>)) &#123;</span><br><span class="line">                        result.success(<span class="string">&quot;Android &quot;</span> + Build.VERSION.RELEASE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.notImplemented();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-iOS端代码示例（本人没有写过IOS代码源于网络）"><a href="#4-3-iOS端代码示例（本人没有写过IOS代码源于网络）" class="headerlink" title="4.3 iOS端代码示例（本人没有写过IOS代码源于网络）"></a>4.3 iOS端代码示例（本人没有写过IOS代码源于网络）</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">FlutterAppDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">application</span>(</span><br><span class="line">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span><br><span class="line">  ) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> controller <span class="operator">=</span> window<span class="operator">?</span>.rootViewController <span class="keyword">as!</span> <span class="type">FlutterViewController</span></span><br><span class="line">    <span class="keyword">let</span> channel <span class="operator">=</span> <span class="type">FlutterMethodChannel</span>(name: <span class="string">&quot;method_channel&quot;</span>, binaryMessenger: controller.binaryMessenger)</span><br><span class="line"></span><br><span class="line">    channel.setMethodCallHandler &#123; (call, result) <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> call.method <span class="operator">==</span> <span class="string">&quot;getPlatformVersion&quot;</span> &#123;</span><br><span class="line">        result(<span class="string">&quot;iOS &quot;</span> <span class="operator">+</span> <span class="type">UIDevice</span>.current.systemVersion)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result(<span class="type">FlutterMethodNotImplemented</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-EventChannel"><a href="#5-EventChannel" class="headerlink" title="5. EventChannel"></a>5. EventChannel</h4><p>EventChannel用于传输数据流（如传感器数据），它是单向的，通常用于从原生代码向Flutter传递持续的数据流。</p><h5 id="5-1-Flutter端代码示例"><a href="#5-1-Flutter端代码示例" class="headerlink" title="5.1 Flutter端代码示例"></a>5.1 Flutter端代码示例</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> EventChannel _channel = EventChannel(<span class="string">&#x27;event_channel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;EventChannel Example&#x27;</span>)),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: StreamBuilder(</span><br><span class="line">            stream: _channel.receiveBroadcastStream(),</span><br><span class="line">            builder: (context, snapshot) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&#x27;Received event: <span class="subst">$&#123;snapshot.data&#125;</span>&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&#x27;Waiting for events...&#x27;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-Android端代码示例"><a href="#5-2-Android端代码示例" class="headerlink" title="5.2 Android端代码示例"></a>5.2 Android端代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity;</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.EventChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">FlutterActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNEL</span> <span class="operator">=</span> <span class="string">&quot;event_channel&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> EventChannel.EventSink eventSink;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureFlutterEngine</span><span class="params">(FlutterEngine flutterEngine)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureFlutterEngine(flutterEngine);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">EventChannel</span>(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)</span><br><span class="line">            .setStreamHandler(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">EventChannel</span>.StreamHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onListen</span><span class="params">(Object arguments, EventChannel.EventSink events)</span> &#123;</span><br><span class="line">                        eventSink = events;</span><br><span class="line">                        <span class="comment">// 模拟持续发送事件</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                                    eventSink.success(<span class="string">&quot;Event &quot;</span> + i);</span><br><span class="line">                                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                eventSink.error(<span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;Interrupted&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).start();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancel</span><span class="params">(Object arguments)</span> &#123;</span><br><span class="line">                        eventSink = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-3-iOS端代码示例"><a href="#5-3-iOS端代码示例" class="headerlink" title="5.3 iOS端代码示例"></a>5.3 iOS端代码示例</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">FlutterAppDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">application</span>(</span><br><span class="line">    <span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>,</span><br><span class="line">    <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span></span><br><span class="line">  ) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> controller <span class="operator">=</span> window<span class="operator">?</span>.rootViewController <span class="keyword">as!</span> <span class="type">FlutterViewController</span></span><br><span class="line">    <span class="keyword">let</span> channel <span class="operator">=</span> <span class="type">FlutterEventChannel</span>(name: <span class="string">&quot;event_channel&quot;</span>, binaryMessenger: controller.binaryMessenger)</span><br><span class="line"></span><br><span class="line">    channel.setStreamHandler(<span class="type">EventStreamHandler</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventStreamHandler</span>: <span class="title class_">NSObject</span>, <span class="title class_">FlutterStreamHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> eventSink: <span class="type">FlutterEventSink</span>?</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">onListen</span>(<span class="params">withArguments</span> <span class="params">arguments</span>: <span class="keyword">Any</span><span class="operator">?</span>, <span class="params">eventSink</span> <span class="params">events</span>: <span class="keyword">@escaping</span> <span class="type">FlutterEventSink</span>) -&gt; <span class="type">FlutterError</span>? &#123;</span><br><span class="line">    <span class="keyword">self</span>.eventSink <span class="operator">=</span> events</span><br><span class="line">    <span class="comment">// 模拟持续发送事件</span></span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.eventSink<span class="operator">?</span>(<span class="string">&quot;Event <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">onCancel</span>(<span class="params">withArguments</span> <span class="params">arguments</span>: <span class="keyword">Any</span><span class="operator">?</span>) -&gt; <span class="type">FlutterError</span>? &#123;</span><br><span class="line">    eventSink <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure><p>本文主要介绍了三种主要的通信方式：BasicMessageChannel、MethodChannel和EventChannel，并通过示例代码展示了每种方式的具体实现。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的单线程模型与Ioslate</title>
      <link href="/blog/2021/06/30/Flutter%E4%B8%AD%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8EIoslate/"/>
      <url>/blog/2021/06/30/Flutter%E4%B8%AD%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8EIoslate/</url>
      
        <content type="html"><![CDATA[<h3 id="Dart的单线程模型与Isolate详解"><a href="#Dart的单线程模型与Isolate详解" class="headerlink" title="Dart的单线程模型与Isolate详解"></a>Dart的单线程模型与Isolate详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>Dart是一种单线程的编程语言，这意味着所有的Dart代码在同一个线程上执行。为了实现并发和并行操作，Dart提供了<code>Isolate</code>，这是一种独立的内存和线程环境，可以运行并行代码。本文将详细介绍Dart的单线程模型及其运行原理，并深入解析Isolate的工作机制。</p><h4 id="2-Dart的单线程模型"><a href="#2-Dart的单线程模型" class="headerlink" title="2. Dart的单线程模型"></a>2. Dart的单线程模型</h4><p>Dart语言采用单线程事件循环模型，这意味着它在一个单线程中处理所有的事件和任务。这个模型与JavaScript的事件循环模型类似。</p><h5 id="2-1-事件循环"><a href="#2-1-事件循环" class="headerlink" title="2.1 事件循环"></a>2.1 事件循环</h5><p>事件循环是Dart单线程模型的核心。它负责调度任务，并在任务完成时触发相应的回调函数。</p><h6 id="事件循环的基本流程"><a href="#事件循环的基本流程" class="headerlink" title="事件循环的基本流程"></a>事件循环的基本流程</h6><ol><li><strong>主线程初始化</strong>：Dart程序从主函数（<code>main</code>）开始执行。</li><li><strong>事件循环启动</strong>：主线程启动事件循环，等待事件到达。</li><li><strong>任务队列</strong>：事件循环维护一个任务队列，任务包括I&#x2F;O操作、定时器、微任务等。</li><li><strong>处理任务</strong>：事件循环从任务队列中取出任务并执行。</li><li><strong>循环执行</strong>：事件循环不断重复上述步骤，直到所有任务完成。</li></ol><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line"></span><br><span class="line">Main start</span><br><span class="line">Main end</span><br><span class="line">Future 1</span><br><span class="line">Future 2</span><br></pre></td></tr></table></figure><p>这是因为<code>Future</code>中的任务被放入事件循环的任务队列中，在主线程中的同步任务执行完毕后，事件循环才开始执行任务队列中的异步任务。</p><h5 id="2-2-微任务队列"><a href="#2-2-微任务队列" class="headerlink" title="2.2 微任务队列"></a>2.2 微任务队列</h5><p>除了普通任务队列外，Dart还有一个微任务队列。微任务的优先级高于普通任务，会在当前任务执行完毕后立即执行。</p><h6 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line"></span><br><span class="line">Main start</span><br><span class="line">Main end</span><br><span class="line">Microtask 1</span><br><span class="line">Microtask 2</span><br><span class="line">Future 1</span><br><span class="line">Future 2</span><br></pre></td></tr></table></figure><p>这是因为微任务队列中的任务在主线程中的同步任务执行完毕后立即执行，优先于普通任务队列中的任务。</p><h4 id="3-Isolate的原理介绍"><a href="#3-Isolate的原理介绍" class="headerlink" title="3. Isolate的原理介绍"></a>3. Isolate的原理介绍</h4><p>在Dart中，Isolate是一个独立的执行环境，每个Isolate都有自己的内存和事件循环，与其他Isolate不共享内存。Isolate之间通过消息传递进行通信，类似于多进程模型。</p><h5 id="3-1-Isolate的创建与通信"><a href="#3-1-Isolate的创建与通信" class="headerlink" title="3.1 Isolate的创建与通信"></a>3.1 Isolate的创建与通信</h5><p>创建Isolate时，会启动一个新的线程，并在该线程中运行指定的代码。Isolate之间通过消息传递进行通信。</p><h6 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:isolate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 创建一个接收端口</span></span><br><span class="line">  <span class="keyword">final</span> receivePort = ReceivePort();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动一个新的Isolate</span></span><br><span class="line">  <span class="keyword">await</span> Isolate.spawn(isolateEntry, receivePort.sendPort);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收消息</span></span><br><span class="line">  receivePort.listen((message) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received message: <span class="subst">$message</span>&#x27;</span>);</span><br><span class="line">    receivePort.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Isolate入口函数</span></span><br><span class="line"><span class="keyword">void</span> isolateEntry(SendPort sendPort) &#123;</span><br><span class="line">  <span class="comment">// 发送消息</span></span><br><span class="line">  sendPort.send(<span class="string">&#x27;Hello from Isolate&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，主线程创建了一个接收端口（<code>ReceivePort</code>），并启动了一个新的Isolate。在新Isolate中，通过发送端口（<code>SendPort</code>）向主线程发送消息。</p><h5 id="3-2-Isolate的原理"><a href="#3-2-Isolate的原理" class="headerlink" title="3.2 Isolate的原理"></a>3.2 Isolate的原理</h5><ol><li><strong>独立的执行环境</strong>：每个Isolate都有自己的内存和事件循环，彼此之间不共享内存。</li><li><strong>消息传递</strong>：Isolate之间通过消息传递进行通信，消息是通过<code>SendPort</code>和<code>ReceivePort</code>进行传递的。</li><li><strong>并行执行</strong>：每个Isolate在独立的线程上运行，实现了真正的并行执行。</li></ol><h5 id="3-3-Isolate的优势"><a href="#3-3-Isolate的优势" class="headerlink" title="3.3 Isolate的优势"></a>3.3 Isolate的优势</h5><ol><li><strong>内存隔离</strong>：由于每个Isolate都有独立的内存，避免了多线程编程中的数据竞争和死锁问题。</li><li><strong>并行处理</strong>：Isolate允许Dart程序利用多核CPU，实现并行处理，提高了程序的性能。</li><li><strong>简单易用</strong>：通过消息传递进行通信，避免了复杂的线程同步问题。</li></ol><h4 id="4-Dart的单线程模型与Isolate的对比"><a href="#4-Dart的单线程模型与Isolate的对比" class="headerlink" title="4. Dart的单线程模型与Isolate的对比"></a>4. Dart的单线程模型与Isolate的对比</h4><table><thead><tr><th>特性</th><th>单线程模型</th><th>Isolate模型</th></tr></thead><tbody><tr><td>内存共享</td><td>是</td><td>否</td></tr><tr><td>并行处理</td><td>否</td><td>是</td></tr><tr><td>通信方式</td><td>通过任务队列和微任务队列</td><td>通过消息传递</td></tr><tr><td>数据竞争和死锁</td><td>可能发生</td><td>不会发生</td></tr><tr><td>使用复杂度</td><td>较低</td><td>较高</td></tr><tr><td>适用场景</td><td>单线程异步任务处理</td><td>多线程并行处理</td></tr></tbody></table><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>通过本文的详细分析，我们深入了解了Dart的单线程模型及其运行原理，并详细介绍了Isolate的工作机制。Dart的单线程事件循环模型通过任务队列和微任务队列实现了高效的异步任务处理，而Isolate模型则通过独立的执行环境和消息传递实现了并行处理。理解这两种模型对于编写高效、可靠的Dart程序具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Ioslate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter性能优化</title>
      <link href="/blog/2021/06/21/Flutter%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2021/06/21/Flutter%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>尽管 Flutter 本身性能已经非常出色，但在实际应用中仍然存在优化的空间。本文将详细介绍一些 Flutter 性能优化的示例和技巧，以帮助开发者提升应用的运行效率和用户体验。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E5%87%8F%E5%B0%91-rebuild">减少 Rebuild</a></li><li><a href="#%E4%BD%BF%E7%94%A8-const-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">使用 const 构造函数</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E9%AB%98%E6%95%88%E7%9A%84%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6">使用高效的列表控件</a></li><li><a href="#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%B8%83%E5%B1%80%E8%AE%A1%E7%AE%97">避免不必要的布局计算</a></li><li><a href="#%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86-io-%E6%93%8D%E4%BD%9C">异步处理 I&#x2F;O 操作</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%98%BE%E5%BC%8F%E5%8A%A8%E7%94%BB">使用显式动画</a></li><li><a href="#%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96">图片优化</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%BC%98%E5%8C%96">网络请求优化</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7">使用性能分析工具</a></li></ol><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在开发 Flutter 应用时，性能优化主要集中在以下几个方面：</p><ul><li><strong>UI 渲染效率</strong>：避免不必要的 UI 重建和布局计算。</li><li><strong>图片处理</strong>：优化图片加载和显示。</li><li><strong>网络请求</strong>：减少网络请求的频率和大小。</li><li><strong>动画</strong>：使用高效的动画控件和方法。</li><li><strong>异步操作</strong>：确保 I&#x2F;O 操作异步执行，不阻塞主线程。</li></ul><p>接下来，我们将详细讨论这些方面的优化方法和示例。</p><h2 id="减少-Rebuild"><a href="#减少-Rebuild" class="headerlink" title="减少 Rebuild"></a>减少 Rebuild</h2><p>在 Flutter 中，Widget 是不可变的，每次状态变化都会导致 Widget 重建。如果不加以控制，频繁的重建会导致性能问题。我们可以通过以下几种方式减少不必要的 rebuild：</p><h3 id="使用-const-构造函数"><a href="#使用-const-构造函数" class="headerlink" title="使用 const 构造函数"></a>使用 <code>const</code> 构造函数</h3><p>使用 <code>const</code> 构造函数创建的 Widget 是不可变的，只会在初始化时构建一次。这样可以避免不必要的重建，提高性能。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-AutomaticKeepAliveClientMixin"><a href="#使用-AutomaticKeepAliveClientMixin" class="headerlink" title="使用 AutomaticKeepAliveClientMixin"></a>使用 <code>AutomaticKeepAliveClientMixin</code></h3><p>在长列表中，滚动时会销毁不在屏幕上的 Widget。我们可以使用 <code>AutomaticKeepAliveClientMixin</code> 来保留这些 Widget，从而减少重建。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListItem</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyListItemState createState() =&gt; _MyListItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyListItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyListItem</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);</span><br><span class="line">    <span class="keyword">return</span> ListTile(title: Text(<span class="string">&#x27;List Item&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用高效的列表控件"><a href="#使用高效的列表控件" class="headerlink" title="使用高效的列表控件"></a>使用高效的列表控件</h2><p>在处理长列表时，使用高效的列表控件可以显著提高性能。<code>ListView.builder</code> 和 <code>GridView.builder</code> 是处理长列表的最佳选择，因为它们只会构建当前屏幕上可见的项。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ListView.builder(</span><br><span class="line">  itemCount: <span class="number">1000</span>,</span><br><span class="line">  itemBuilder: (context, index) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(<span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="避免不必要的布局计算"><a href="#避免不必要的布局计算" class="headerlink" title="避免不必要的布局计算"></a>避免不必要的布局计算</h2><p>使用 <code>LayoutBuilder</code> 可以避免在布局过程中进行不必要的计算。<code>LayoutBuilder</code> 只有在其约束条件改变时才会重新构建其子 Widget。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LayoutBuilder(</span><br><span class="line">  builder: (context, constraints) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: constraints.maxWidth / <span class="number">2</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="异步处理-I-O-操作"><a href="#异步处理-I-O-操作" class="headerlink" title="异步处理 I&#x2F;O 操作"></a>异步处理 I&#x2F;O 操作</h2><p>将耗时的 I&#x2F;O 操作（如文件读取和网络请求）放在异步方法中执行，避免阻塞主线程，从而提高应用的响应速度。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> data = <span class="keyword">await</span> fetchDataFromNetwork();</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _data = data;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用显式动画"><a href="#使用显式动画" class="headerlink" title="使用显式动画"></a>使用显式动画</h2><p>Flutter 提供了多种动画控件，如 <code>AnimatedContainer</code>、<code>AnimatedOpacity</code> 等。这些控件在状态变化时会自动执行动画，简化了动画的实现过程。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AnimatedContainer(</span><br><span class="line">  duration: <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">  width: _isExpanded ? <span class="number">200</span> : <span class="number">100</span>,</span><br><span class="line">  height: <span class="number">50</span>,</span><br><span class="line">  color: _isExpanded ? Colors.blue : Colors.red,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><h3 id="使用合适的图片格式"><a href="#使用合适的图片格式" class="headerlink" title="使用合适的图片格式"></a>使用合适的图片格式</h3><p>根据图片内容选择合适的格式。例如，矢量图使用 SVG 格式，照片使用 JPEG 格式，图标使用 PNG 格式。</p><h3 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h3><p>使用 <code>cached_network_image</code> 包可以轻松实现图片缓存，减少网络请求次数，提高图片加载速度。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CachedNetworkImage(</span><br><span class="line">  imageUrl: <span class="string">&quot;https://example.com/image.jpg&quot;</span>,</span><br><span class="line">  placeholder: (context, url) =&gt; CircularProgressIndicator(),</span><br><span class="line">  errorWidget: (context, url, error) =&gt; Icon(Icons.error),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="网络请求优化"><a href="#网络请求优化" class="headerlink" title="网络请求优化"></a>网络请求优化</h2><h3 id="批量请求"><a href="#批量请求" class="headerlink" title="批量请求"></a>批量请求</h3><p>将多个网络请求合并为一个请求，减少请求次数和网络开销。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; fetchMultipleData() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> responses = <span class="keyword">await</span> Future.wait([</span><br><span class="line">    http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://example.com/data1&#x27;</span>)),</span><br><span class="line">    http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://example.com/data2&#x27;</span>)),</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理响应数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用合适的数据格式"><a href="#使用合适的数据格式" class="headerlink" title="使用合适的数据格式"></a>使用合适的数据格式</h3><p>根据需求选择合适的数据格式。例如，文本数据使用 JSON 格式，二进制数据使用 Protobuf 格式。</p><h2 id="使用性能分析工具"><a href="#使用性能分析工具" class="headerlink" title="使用性能分析工具"></a>使用性能分析工具</h2><p>Flutter 提供了多种性能分析工具，如 Flutter DevTools、Dart DevTools 等。这些工具可以帮助开发者检测和解决性能问题。</p><h3 id="Flutter-DevTools"><a href="#Flutter-DevTools" class="headerlink" title="Flutter DevTools"></a>Flutter DevTools</h3><p>Flutter DevTools 提供了详细的性能分析和调试功能，可以用来检测 UI 渲染性能、内存使用情况等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行应用时，使用以下命令启动 DevTools：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line"></span><br><span class="line">flutter pub global activate devtools</span><br><span class="line">flutter pub global run devtools</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>以上是一些基础的优化方案，可以提高 Flutter 应用的性能。在实际开发中，应结合具体应用场景，选择适合的优化方法，不断提升应用的运行效率和用户体验。</p><p>希望本文对你在 Flutter 性能优化方面有所帮助。如果有任何疑问或建议，欢迎在评论区交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发过程中一些常见的问题和解决方案</title>
      <link href="/blog/2021/05/02/Flutter%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2021/05/02/Flutter%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>在Flutter开发过程中，我们难免会遇到一些复杂和棘手的问题。这些深度问题往往需要更深入的理解和技术背景才能解决。本文将详细探讨一些Flutter开发中的深度疑难杂症，并提供相应的解决方案。</p><hr><h4 id="1-复杂状态管理"><a href="#1-复杂状态管理" class="headerlink" title="1. 复杂状态管理"></a>1. <strong>复杂状态管理</strong></h4><p><strong>问题描述：</strong> 在大型应用中，状态管理变得极为复杂，导致代码难以维护和调试。</p><p><strong>解决方案：</strong></p><ol><li><p><strong>引入Bloc（Business Logic Component）模式：</strong></p><p>Bloc是一个用于分离业务逻辑和UI层的模式。通过使用Bloc，我们可以将应用的状态管理集中到一个地方，使得代码更易于维护和测试。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_bloc/flutter_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterEvent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Increment</span> <span class="keyword">extends</span> <span class="title">CounterEvent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decrement</span> <span class="keyword">extends</span> <span class="title">CounterEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> counter;</span><br><span class="line">  CounterState(<span class="keyword">this</span>.counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Bloc</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">CounterEvent</span>, <span class="title">CounterState</span>&gt; </span>&#123;</span><br><span class="line">  CounterBloc() : <span class="keyword">super</span>(CounterState(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;CounterState&gt; mapEventToState(CounterEvent event) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> Increment) &#123;</span><br><span class="line">      <span class="keyword">yield</span> CounterState(state.counter + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> Decrement) &#123;</span><br><span class="line">      <span class="keyword">yield</span> CounterState(state.counter - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Bloc</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocProvider(</span><br><span class="line">      create: (context) =&gt; CounterBloc(),</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Counter&#x27;</span>)),</span><br><span class="line">        body: BlocBuilder&lt;CounterBloc, CounterState&gt;(</span><br><span class="line">          builder: (context, state) &#123;</span><br><span class="line">            <span class="keyword">return</span> Center(</span><br><span class="line">              child: Text(<span class="string">&#x27;Counter: <span class="subst">$&#123;state.counter&#125;</span>&#x27;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButton: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: () =&gt; context.read&lt;CounterBloc&gt;().add(Increment()),</span><br><span class="line">              child: Icon(Icons.add),</span><br><span class="line">            ),</span><br><span class="line">            SizedBox(height: <span class="number">8</span>),</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: () =&gt; context.read&lt;CounterBloc&gt;().add(Decrement()),</span><br><span class="line">              child: Icon(Icons.remove),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用Provider结合ChangeNotifier：</strong></p><p>Provider是Flutter推荐的状态管理解决方案之一，通过与ChangeNotifier结合，可以实现简洁而高效的状态管理。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="title">with</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> count =&gt; _count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> increment() &#123;</span><br><span class="line">    _count++;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> decrement() &#123;</span><br><span class="line">    _count--;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(</span><br><span class="line">    ChangeNotifierProvider(</span><br><span class="line">      create: (context) =&gt; Counter(),</span><br><span class="line">      child: MyApp(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Counter&#x27;</span>)),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Consumer&lt;Counter&gt;(</span><br><span class="line">            builder: (context, counter, child) &#123;</span><br><span class="line">              <span class="keyword">return</span> Text(<span class="string">&#x27;Counter: <span class="subst">$&#123;counter.count&#125;</span>&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButton: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: () =&gt; context.read&lt;Counter&gt;().increment(),</span><br><span class="line">              child: Icon(Icons.add),</span><br><span class="line">            ),</span><br><span class="line">            SizedBox(height: <span class="number">8</span>),</span><br><span class="line">            FloatingActionButton(</span><br><span class="line">              onPressed: () =&gt; context.read&lt;Counter&gt;().decrement(),</span><br><span class="line">              child: Icon(Icons.remove),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2. 性能优化"></a>2. <strong>性能优化</strong></h4><p><strong>问题描述：</strong> 应用在渲染复杂界面时出现卡顿，影响用户体验。</p><p><strong>解决方案：</strong></p><ol><li><p><strong>避免不必要的重建：</strong></p><p>使用<code>const</code>关键字来标记不可变的Widget，避免每次构建时不必要的重建。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyWidget = Text(<span class="string">&#x27;Hello, Flutter!&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用<code>RepaintBoundary</code>：</strong></p><p>对于复杂的绘制操作，可以使用<code>RepaintBoundary</code>来隔离重绘区域，从而减少重绘的开销。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RepaintBoundary(</span><br><span class="line">  child: CustomPaint(</span><br><span class="line">    painter: MyPainter(),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>优化ListView：</strong></p><p>对于长列表，使用<code>ListView.builder</code>代替<code>ListView</code>，并确保列表项是轻量级的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ListView.builder(</span><br><span class="line">  itemCount: <span class="number">1000</span>,</span><br><span class="line">  itemBuilder: (context, index) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(<span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>缓存图片：</strong></p><p>使用<code>cached_network_image</code>包对网络图片进行缓存，减少网络请求和重绘开销。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CachedNetworkImage(</span><br><span class="line">  imageUrl: <span class="string">&#x27;https://example.com/image.jpg&#x27;</span>,</span><br><span class="line">  placeholder: (context, url) =&gt; CircularProgressIndicator(),</span><br><span class="line">  errorWidget: (context, url, error) =&gt; Icon(Icons.error),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用Flutter DevTools：</strong></p><p>通过Flutter DevTools分析应用性能，定位性能瓶颈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">flutter pub global activate devtools</span><br><span class="line">flutter pub global run devtools</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="3-自定义绘制与动画"><a href="#3-自定义绘制与动画" class="headerlink" title="3. 自定义绘制与动画"></a>3. <strong>自定义绘制与动画</strong></h4><p><strong>问题描述：</strong> 在实现复杂动画和自定义绘制时，代码难以维护和扩展。</p><p><strong>解决方案：</strong></p><ol><li><p><strong>使用<code>CustomPainter</code>进行自定义绘制：</strong></p><p>通过<code>CustomPainter</code>实现复杂的绘制逻辑，并结合<code>AnimationController</code>实现动画效果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> progress;</span><br><span class="line"></span><br><span class="line">  MyPainter(<span class="keyword">this</span>.progress);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">final</span> paint = Paint()</span><br><span class="line">      ..color = Colors.blue</span><br><span class="line">      ..strokeWidth = <span class="number">4.0</span></span><br><span class="line">      ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> path = Path()</span><br><span class="line">      ..moveTo(<span class="number">0</span>, size.height)</span><br><span class="line">      ..lineTo(size.width * progress, size.height * (<span class="number">1</span> - progress));</span><br><span class="line"></span><br><span class="line">    canvas.drawPath(path, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(<span class="keyword">covariant</span> CustomPainter oldDelegate) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAnimatedWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAnimatedWidgetState createState() =&gt; _MyAnimatedWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAnimatedWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyAnimatedWidget</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">      duration: <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">    )..repeat(reverse: <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> AnimatedBuilder(</span><br><span class="line">      animation: _controller,</span><br><span class="line">      builder: (context, child) &#123;</span><br><span class="line">        <span class="keyword">return</span> CustomPaint(</span><br><span class="line">          painter: MyPainter(_controller.value),</span><br><span class="line">          child: Container(),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用<code>Flare</code>或<code>Rive</code>实现复杂动画：</strong></p><p><code>Flare</code>和<code>Rive</code>是强大的动画工具，可以在Flutter中轻松实现复杂动画。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yaml</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  flare_flutter: ^2.0.6</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flare_flutter/flare_actor.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlareAnimation</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> FlareActor(</span><br><span class="line">      <span class="string">&quot;assets/flare_animation.flr&quot;</span>,</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      fit: BoxFit.contain,</span><br><span class="line">      animation: <span class="string">&quot;animate&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="4-平台特定代码"><a href="#4-平台特定代码" class="headerlink" title="4. 平台特定代码"></a>4. <strong>平台特定代码</strong></h4><p><strong>问题描述：</strong> 需要在Flutter应用中调用原生平台（iOS&#x2F;Android）的特定功能。</p><p><strong>解决方案：</strong></p><ol><li><p><strong>使用平台通道调用原生代码：</strong></p><p>Flutter通过平台通道提供了与原生代码交互的机制。以下是调用原生代码的示例：</p><p><strong>Android：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line">// MainActivity.java</span><br><span class="line">import io.flutter.embedding.android.FlutterActivity;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends FlutterActivity &#123;</span><br><span class="line">  private static final String CHANNEL = &quot;com.example.myapp/native&quot;;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) &#123;</span><br><span class="line">    super.configureFlutterEngine(flutterEngine);</span><br><span class="line">    new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)</span><br><span class="line">        .setMethodCallHandler(</span><br><span class="line">            (call, result) -&gt; &#123;</span><br><span class="line">              if (call.method.equals(&quot;getBatteryLevel&quot;)) &#123;</span><br><span class="line">                int batteryLevel = getBatteryLevel();</span><br><span class="line"></span><br><span class="line">                if (batteryLevel != -1) &#123;</span><br><span class="line">                  result.success(batteryLevel);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                  result.error(&quot;UNAVAILABLE&quot;, &quot;Battery level not available.&quot;, null);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                result.notImplemented();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private int getBatteryLevel() &#123;</span><br><span class="line">    int batteryLevel = -1;</span><br><span class="line">    if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">      BatteryManager batteryManager = (BatteryManager) getSystemService(BATTERY_SERVICE);</span><br><span class="line">      batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      Intent intent = new ContextWrapper(getApplicationContext()).registerReceiver(null,</span><br><span class="line">          new IntentFilter(Intent.ACTION_BATTERY_CHANGED));</span><br><span class="line">      batteryLevel = (intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) * 100) /</span><br><span class="line">          intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return batteryLevel;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Flutter：</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Platform Channel Example&#x27;</span>)),</span><br><span class="line">        body: BatteryLevel(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatteryLevel</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BatteryLevelState createState() =&gt; _BatteryLevelState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BatteryLevelState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BatteryLevel</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> platform = MethodChannel(<span class="string">&#x27;com.example.myapp/native&#x27;</span>);</span><br><span class="line">  <span class="built_in">String</span> _batteryLevel = <span class="string">&#x27;Unknown battery level.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _getBatteryLevel() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> batteryLevel;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">int</span> result = <span class="keyword">await</span> platform.invokeMethod(<span class="string">&#x27;getBatteryLevel&#x27;</span>);</span><br><span class="line">      batteryLevel = <span class="string">&#x27;Battery level at <span class="subst">$result</span> % .&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      batteryLevel = <span class="string">&quot;Failed to get battery level: &#x27;<span class="subst">$&#123;e.message&#125;</span>&#x27;.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _batteryLevel = batteryLevel;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(_batteryLevel),</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            onPressed: _getBatteryLevel,</span><br><span class="line">            child: Text(<span class="string">&#x27;Get Battery Level&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用<code>flutter_native_view</code>包实现自定义平台视图：</strong></p><p>该包允许在Flutter应用中嵌入原生平台视图，适用于需要高度自定义的UI组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yaml</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  flutter_native_view: ^0.1.0</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_native_view/flutter_native_view.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeViewExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Native View Example&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          child: FlutterNativeView(</span><br><span class="line">            viewType: <span class="string">&#x27;nativeView&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>iOS：</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AppDelegate.m</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;AppDelegate.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Flutter/Flutter.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;flutter_native_view/FlutterNativeViewPlugin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NativeViewFactory</span> : <span class="title">NSObject</span> &lt;<span class="title">FlutterPlatformViewFactory</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NativeViewFactory</span></span></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="built_in">NSObject</span>&lt;FlutterPlatformView&gt; *)createWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">                                              viewIdentifier:(int64_t)viewId</span><br><span class="line">                                                   arguments:(<span class="type">id</span> _Nullable)args &#123;</span><br><span class="line">  <span class="keyword">return</span> [[NativeView alloc] initWithFrame:frame viewIdentifier:viewId arguments:args];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NativeView</span> : <span class="title">NSObject</span> &lt;<span class="title">FlutterPlatformView</span>&gt;</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">                viewIdentifier:(int64_t)viewId</span><br><span class="line">                     arguments:(<span class="type">id</span> _Nullable)args;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NativeView</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</span><br><span class="line">                viewIdentifier:(int64_t)viewId</span><br><span class="line">                     arguments:(<span class="type">id</span> _Nullable)args &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="variable language_">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化视图</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)view &#123;</span><br><span class="line">  <span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</span><br><span class="line">  view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">  <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line">- (<span class="type">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">    didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">  FlutterViewController *controller = (FlutterViewController *)<span class="keyword">self</span>.window.rootViewController;</span><br><span class="line">  FlutterNativeViewPlugin *plugin = [[FlutterNativeViewPlugin alloc] initWithMessenger:controller];</span><br><span class="line">  [plugin registerViewFactory:[[NativeViewFactory alloc] init] withId:<span class="string">@&quot;nativeView&quot;</span>];</span><br><span class="line">  <span class="keyword">return</span> [<span class="variable language_">super</span> application:application didFinishLaunchingWithOptions:launchOptions];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="5-网络请求与数据处理"><a href="#5-网络请求与数据处理" class="headerlink" title="5. 网络请求与数据处理"></a>5. <strong>网络请求与数据处理</strong></h4><p><strong>问题描述：</strong> 在处理复杂网络请求和数据处理时，可能会遇到性能瓶颈和数据一致性问题。</p><p><strong>解决方案：</strong></p><ol><li><p><strong>使用<code>dio</code>库处理复杂网络请求：</strong></p><p><code>dio</code>是一个强大的Dart HTTP请求库，支持拦截器、全局配置、表单数据、文件上传&#x2F;下载、请求取消等功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yaml</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  dio: ^4.0.0</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Dio _dio = Dio(BaseOptions(baseUrl: <span class="string">&#x27;https://api.example.com&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  Future&lt;Response&gt; getData(<span class="built_in">String</span> endpoint) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> _dio.<span class="keyword">get</span>(endpoint);</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to load data: <span class="subst">$&#123;e.message&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用<code>json_serializable</code>库进行JSON序列化：</strong></p><p>通过<code>json_serializable</code>库，可以自动生成数据类的序列化和反序列化代码，简化数据处理逻辑。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">json_annotation:</span> <span class="string">^4.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^2.0.0</span></span><br><span class="line">  <span class="attr">json_serializable:</span> <span class="string">^5.0.0</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;user.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> email;</span><br><span class="line"></span><br><span class="line">  User(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.id, <span class="keyword">required</span> <span class="keyword">this</span>.name, <span class="keyword">required</span> <span class="keyword">this</span>.email&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以下命令生成序列化代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">flutter pub run build_runner build</span><br></pre></td></tr></table></figure></li></ol><hr><p>希望这些解决方案能帮助你解决在Flutter开发过程中遇到的深度疑难杂症。如果你有其他问题或需要更多帮助，欢迎留言讨论！</p><hr>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-动画之-进阶动画</title>
      <link href="/blog/2021/03/22/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E8%BF%9B%E9%98%B6%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2021/03/22/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E8%BF%9B%E9%98%B6%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>大家好，欢迎回到Flutter动画系列的第三篇！在前两篇文章中，我们探讨了基础动画和中级动画的实现及使用场景。今天，我们将进一步深入，探索一些高级动画技术，来实现更加复杂和炫酷的动画效果。</p><h3 id="一、动画组（AnimationGroup）"><a href="#一、动画组（AnimationGroup）" class="headerlink" title="一、动画组（AnimationGroup）"></a>一、动画组（AnimationGroup）</h3><p>动画组允许我们将多个动画组合在一起，同时执行。这对于创建复杂的动画效果非常有用，例如多个组件同时进行不同的动画。</p><h4 id="1-1-动画组实现"><a href="#1-1-动画组实现" class="headerlink" title="1.1 动画组实现"></a>1.1 动画组实现</h4><p>我们来看一个使用动画组的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationGroupExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimationGroupExampleState createState() =&gt; _AnimationGroupExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimationGroupExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimationGroupExample</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _scaleAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _rotationAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _scaleAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.5</span>, end: <span class="number">1.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _rotationAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: <span class="number">2</span> * <span class="number">3.14</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _controller.repeat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Animation Group&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform.scale(</span><br><span class="line">              scale: _scaleAnimation.value,</span><br><span class="line">              child: Transform.rotate(</span><br><span class="line">                angle: _rotationAnimation.value,</span><br><span class="line">                child: child,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用<code>AnimationController</code>和两个<code>Tween</code>分别控制缩放和旋转动画，并通过<code>AnimatedBuilder</code>组合在一起。</p><h3 id="二、嵌套动画（Nested-Animations）"><a href="#二、嵌套动画（Nested-Animations）" class="headerlink" title="二、嵌套动画（Nested Animations）"></a>二、嵌套动画（Nested Animations）</h3><p>嵌套动画是指在一个动画中嵌套另一个动画，这种技术可以实现更加复杂的动画效果。例如，一个组件在缩放的同时进行旋转。</p><h4 id="2-1-嵌套动画实现"><a href="#2-1-嵌套动画实现" class="headerlink" title="2.1 嵌套动画实现"></a>2.1 嵌套动画实现</h4><p>以下是一个嵌套动画的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NestedAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _NestedAnimationExampleState createState() =&gt; _NestedAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_NestedAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">NestedAnimationExample</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _scaleAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _rotationAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _scaleAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.5</span>, end: <span class="number">1.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _rotationAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: <span class="number">2</span> * <span class="number">3.14</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Curves.easeInOut,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _controller.repeat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Nested Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform.scale(</span><br><span class="line">              scale: _scaleAnimation.value,</span><br><span class="line">              child: Transform.rotate(</span><br><span class="line">                angle: _rotationAnimation.value,</span><br><span class="line">                child: child,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用<code>Transform.scale</code>和<code>Transform.rotate</code>实现了嵌套动画效果。</p><h3 id="三、序列动画（Sequence-Animation）"><a href="#三、序列动画（Sequence-Animation）" class="headerlink" title="三、序列动画（Sequence Animation）"></a>三、序列动画（Sequence Animation）</h3><p>序列动画允许我们定义一系列按顺序执行的动画，这对于创建复杂的多步动画效果非常有用。例如，一个组件先淡入然后再移动。</p><h4 id="3-1-序列动画实现"><a href="#3-1-序列动画实现" class="headerlink" title="3.1 序列动画实现"></a>3.1 序列动画实现</h4><p>以下是一个序列动画的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequenceAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SequenceAnimationExampleState createState() =&gt; _SequenceAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SequenceAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SequenceAnimationExample</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _opacityAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;Offset&gt; _slideAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">4</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _opacityAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.0</span>, end: <span class="number">1.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.0</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _slideAnimation = Tween&lt;Offset&gt;(begin: Offset(<span class="number">0</span>, <span class="number">0</span>), end: Offset(<span class="number">1</span>, <span class="number">0</span>)).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.5</span>, <span class="number">1.0</span>, curve: Curves.easeInOut),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Sequence Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Opacity(</span><br><span class="line">              opacity: _opacityAnimation.value,</span><br><span class="line">              child: SlideTransition(</span><br><span class="line">                position: _slideAnimation,</span><br><span class="line">                child: child,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们先定义了一个透明度动画，然后定义了一个滑动动画，并通过<code>Interval</code>将它们按顺序执行。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本篇文章主要介绍Flutter中的高级动画技巧，包括动画组、嵌套动画和序列动画。这些动画技术可以帮助你在Flutter应用中创建更加复杂和炫酷的效果。如果你有补充或者需要进一步讨论，欢迎在评论区留言，也可以通过邮箱联系我: <a href="mailto:&#103;&#50;&#x33;&#50;&#50;&#50;&#x32;&#50;&#x32;&#50;&#51;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#103;&#50;&#x33;&#50;&#50;&#50;&#x32;&#50;&#x32;&#50;&#51;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a> ~。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-动画之-中级动画</title>
      <link href="/blog/2021/03/01/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E4%B8%AD%E7%BA%A7%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2021/03/01/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E4%B8%AD%E7%BA%A7%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>大家好，欢迎回到Flutter动画系列的第二篇！在上一篇中，我们探讨了基础动画的使用和实现。今天，我们将进一步深入，了解一些中级动画的技巧和方法，帮助你在Flutter中创建更加复杂和精美的动画效果。</p><h3 id="一、交错动画（Staggered-Animations）"><a href="#一、交错动画（Staggered-Animations）" class="headerlink" title="一、交错动画（Staggered Animations）"></a>一、交错动画（Staggered Animations）</h3><p>交错动画是指一组动画在时间上彼此交错执行，这种效果常用于创建复杂的视觉效果，例如列表项依次出现等。我们通过组合多个动画控制器和补间动画来实现交错动画。</p><h4 id="1-1-交错动画实现"><a href="#1-1-交错动画实现" class="headerlink" title="1.1 交错动画实现"></a>1.1 交错动画实现</h4><p>我们先来看一个简单的交错动画示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaggeredAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StaggeredAnimationExampleState createState() =&gt; _StaggeredAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StaggeredAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StaggeredAnimationExample</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _opacityAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _scaleAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _opacityAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0</span>, end: <span class="number">1</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.0</span>, <span class="number">0.5</span>, curve: Curves.easeIn),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _scaleAnimation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.5</span>, end: <span class="number">1.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.5</span>, <span class="number">1.0</span>, curve: Curves.easeOut),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Staggered Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Opacity(</span><br><span class="line">              opacity: _opacityAnimation.value,</span><br><span class="line">              child: Transform.scale(</span><br><span class="line">                scale: _scaleAnimation.value,</span><br><span class="line">                child: child,</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了<code>Interval</code>来定义动画的时间间隔，从而实现交错动画效果。首先是透明度的变化，然后是缩放的变化。</p><h3 id="二、PageRouteBuilder动画"><a href="#二、PageRouteBuilder动画" class="headerlink" title="二、PageRouteBuilder动画"></a>二、PageRouteBuilder动画</h3><p>自定义页面切换动画也是中级动画中常见的一部分。通过<code>PageRouteBuilder</code>，我们可以控制页面切换的动画效果。</p><h4 id="2-1-PageRouteBuilder实现"><a href="#2-1-PageRouteBuilder实现" class="headerlink" title="2.1 PageRouteBuilder实现"></a>2.1 PageRouteBuilder实现</h4><p>以下是一个自定义页面切换动画的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageRouteAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Page Route Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ElevatedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.of(context).push(_createRoute());</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Text(<span class="string">&#x27;Go!&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Route _createRoute() &#123;</span><br><span class="line">    <span class="keyword">return</span> PageRouteBuilder(</span><br><span class="line">      pageBuilder: (context, animation, secondaryAnimation) =&gt; SecondPage(),</span><br><span class="line">      transitionsBuilder: (context, animation, secondaryAnimation, child) &#123;</span><br><span class="line">        <span class="keyword">const</span> begin = Offset(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">const</span> end = Offset.zero;</span><br><span class="line">        <span class="keyword">const</span> curve = Curves.ease;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SlideTransition(</span><br><span class="line">          position: animation.drive(tween),</span><br><span class="line">          child: child,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Second Page&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;Hello, Second Page!&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用<code>PageRouteBuilder</code>创建了一个自定义的页面切换动画，将新页面从右侧滑入。</p><h3 id="三、Hero动画"><a href="#三、Hero动画" class="headerlink" title="三、Hero动画"></a>三、Hero动画</h3><p><code>Hero</code>动画用于在页面切换时，实现两个页面之间共享元素的过渡动画。这个动画效果非常适合用在图片、按钮等元素的过渡上。</p><h4 id="3-1-Hero动画实现"><a href="#3-1-Hero动画实现" class="headerlink" title="3.1 Hero动画实现"></a>3.1 Hero动画实现</h4><p>以下是一个简单的<code>Hero</code>动画示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Hero Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: GestureDetector(</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            Navigator.of(context).push(MaterialPageRoute(builder: (context) =&gt; HeroDetailPage()));</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Hero(</span><br><span class="line">            tag: <span class="string">&#x27;hero-tag&#x27;</span>,</span><br><span class="line">            child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroDetailPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Hero Detail&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Hero(</span><br><span class="line">          tag: <span class="string">&#x27;hero-tag&#x27;</span>,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">300</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用<code>Hero</code> widget实现了页面切换时的图片过渡动画。通过<code>tag</code>属性来标识共享的元素。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本篇主要了解Flutter中的中级动画技巧，包括交错动画、页面切换动画和Hero动画。下期我们进入进阶动画~。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-动画之-基础动画</title>
      <link href="/blog/2021/02/05/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E5%9F%BA%E7%A1%80%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2021/02/05/Flutter-%E5%8A%A8%E7%94%BB%E4%B9%8B-%E5%9F%BA%E7%A1%80%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>大家好，欢迎来到Flutter动画系列文章的第一篇！在这个系列中，我们将详细介绍Flutter中的各种动画，展示它们的使用方式和对应的使用场景，并结合源码分析它们的实现。</p><h2 id="Flutter-动画之一：基础动画（Basic-Animation）"><a href="#Flutter-动画之一：基础动画（Basic-Animation）" class="headerlink" title="Flutter-动画之一：基础动画（Basic Animation）"></a>Flutter-动画之一：基础动画（Basic Animation）</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>在Flutter中，动画是通过<code>Animation</code>对象来驱动的。<code>Animation</code>对象在特定的时间范围内生成一系列值，这些值通常在一段时间内变化，并用于更新UI组件。Flutter提供了多种类型的动画对象和工具，帮助开发者创建丰富的动画效果。</p><h3 id="二、基础动画的实现"><a href="#二、基础动画的实现" class="headerlink" title="二、基础动画的实现"></a>二、基础动画的实现</h3><h4 id="2-1-动画控制器（AnimationController）"><a href="#2-1-动画控制器（AnimationController）" class="headerlink" title="2.1 动画控制器（AnimationController）"></a>2.1 动画控制器（AnimationController）</h4><p><code>AnimationController</code>是一个特殊的<code>Animation</code>对象，用于控制动画的开始、停止、前进和倒退。<code>AnimationController</code>通常需要一个<code>vsync</code>参数，用于同步屏幕刷新。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BasicAnimationExampleState createState() =&gt; _BasicAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BasicAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BasicAnimationExample</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    )..repeat(); <span class="comment">// 重复播放动画</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Basic Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform.scale(</span><br><span class="line">              scale: _controller.value,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们创建了一个<code>AnimationController</code>，并使用<code>AnimatedBuilder</code>和<code>Transform.scale</code>实现了一个简单的缩放动画。</p><h3 id="三、缓动动画（Curved-Animation）"><a href="#三、缓动动画（Curved-Animation）" class="headerlink" title="三、缓动动画（Curved Animation）"></a>三、缓动动画（Curved Animation）</h3><p><code>CurvedAnimation</code>允许我们在动画过程中应用非线性变化曲线，使动画效果更加自然和生动。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurvedAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CurvedAnimationExampleState createState() =&gt; _CurvedAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CurvedAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CurvedAnimationExample</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _animation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line">    _animation = CurvedAnimation(</span><br><span class="line">      parent: _controller,</span><br><span class="line">      curve: Curves.easeInOut,</span><br><span class="line">    )..repeat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Curved Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _animation,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform.scale(</span><br><span class="line">              scale: _animation.value,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>CurvedAnimation</code>和<code>Curves.easeInOut</code>曲线创建了一个缓动动画，使缩放效果更加平滑。</p><h3 id="四、Tween动画"><a href="#四、Tween动画" class="headerlink" title="四、Tween动画"></a>四、Tween动画</h3><p><code>Tween</code>（补间动画）用于在给定的时间段内生成一系列连续的值。它通常与<code>AnimationController</code>一起使用，以产生从起始值到结束值的插值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweenAnimationExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TweenAnimationExampleState createState() =&gt; _TweenAnimationExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TweenAnimationExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TweenAnimationExample</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _animation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line">    _animation = Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0</span>, end: <span class="number">1</span>).animate(_controller)..repeat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(<span class="string">&#x27;Tween Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _animation,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Opacity(</span><br><span class="line">              opacity: _animation.value,</span><br><span class="line">              child: child,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FlutterLogo(size: <span class="number">100</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>Tween</code>生成从0到1的连续值，并将其应用于<code>Opacity</code>组件，实现了一个淡入淡出的动画效果。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>本篇是动画第一章内容Flutter中的基础动画、缓动动画和Tween动画的使用方式。下期见</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Hot Reload功能</title>
      <link href="/blog/2020/11/12/Flutter-Hot-Reload%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2020/11/12/Flutter-Hot-Reload%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>声明下，虽然我觉得HotReload这个功能确实方便强大，但是我并不想去研究它的原理，无奈发现现在好多人都在讨论，所以就查下资料记录下。接下来进入正题。</p><h3 id="一、什么是Hot-Reload？"><a href="#一、什么是Hot-Reload？" class="headerlink" title="一、什么是Hot Reload？"></a>一、什么是Hot Reload？</h3><p>Hot Reload是Flutter提供的一项开发功能，允许开发者在不丢失应用状态的情况下，立即看到代码的更改结果。这对于UI开发和调试非常有用，因为可以快速迭代并查看效果。</p><h3 id="二、Hot-Reload的实现原理"><a href="#二、Hot-Reload的实现原理" class="headerlink" title="二、Hot Reload的实现原理"></a>二、Hot Reload的实现原理</h3><p>Hot Reload的核心是Dart虚拟机（Dart VM）的热重载功能。Flutter应用运行在Dart VM上，Dart VM支持在运行时加载新的代码，并将其应用到现有的应用状态中。以下是Hot Reload的实现过程：</p><h4 id="1-源代码修改与保存"><a href="#1-源代码修改与保存" class="headerlink" title="1. 源代码修改与保存"></a>1. 源代码修改与保存</h4><p>当开发者在IDE（如VS Code、Android Studio）中修改了Dart源代码并保存时，IDE会检测到文件的变化。</p><h4 id="2-触发Hot-Reload命令"><a href="#2-触发Hot-Reload命令" class="headerlink" title="2. 触发Hot Reload命令"></a>2. 触发Hot Reload命令</h4><p>IDE通过Flutter工具（<code>flutter_tools</code>）触发Hot Reload命令。Flutter工具是一个命令行工具，用于管理Flutter应用的构建、运行和调试。</p><h4 id="3-Flutter工具与Dart-VM通信"><a href="#3-Flutter工具与Dart-VM通信" class="headerlink" title="3. Flutter工具与Dart VM通信"></a>3. Flutter工具与Dart VM通信</h4><p>Flutter工具通过Dart VM的服务协议（VM Service Protocol）与运行中的Flutter应用通信。这个协议允许Flutter工具向Dart VM发送命令和请求数据。</p><h4 id="4-发送源代码变化"><a href="#4-发送源代码变化" class="headerlink" title="4. 发送源代码变化"></a>4. 发送源代码变化</h4><p>Flutter工具将修改的源代码发送给Dart VM。Dart VM接收到新的代码后，解析并编译成中间表示（Intermediate Representation）。</p><h4 id="5-更新代码与热重载"><a href="#5-更新代码与热重载" class="headerlink" title="5. 更新代码与热重载"></a>5. 更新代码与热重载</h4><p>Dart VM将新的中间表示替换现有的代码。对于已存在的类和函数，Dart VM会更新它们的实现。如果新代码中包含新增的类或函数，Dart VM会将它们添加到运行时环境中。</p><h4 id="6-重建Widget树"><a href="#6-重建Widget树" class="headerlink" title="6. 重建Widget树"></a>6. 重建Widget树</h4><p>在Dart VM完成代码更新后，Flutter框架会触发应用的重建过程。通常是通过调用根Widget的<code>reassemble</code>方法来实现的。</p><h3 id="三、源码解析"><a href="#三、源码解析" class="headerlink" title="三、源码解析"></a>三、源码解析</h3><p>接下来，我们从源码的角度详细解析Hot Reload的实现过程。</p><h4 id="3-1-Flutter工具的Hot-Reload实现"><a href="#3-1-Flutter工具的Hot-Reload实现" class="headerlink" title="3.1 Flutter工具的Hot Reload实现"></a>3.1 Flutter工具的Hot Reload实现</h4><p>Flutter工具中管理Hot Reload的代码位于<code>flutter_tools</code>包中，具体在<code>lib/src/run_hot.dart</code>文件中。以下是部分关键代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Future&lt;OperationResult&gt; _reloadSources(</span><br><span class="line">  &#123;<span class="built_in">bool</span> pause = <span class="keyword">false</span>,</span><br><span class="line">  <span class="built_in">String</span> reason = <span class="string">&#x27;manual&#x27;</span>&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 连接到Dart VM</span></span><br><span class="line">  <span class="keyword">final</span> vm_service.VmService vmService = <span class="keyword">await</span> connectToVmService();</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;vm_service.IsolateRef&gt; isolates = <span class="keyword">await</span> vmService.getVM().then((vm) =&gt; vm.isolates!);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Future&lt;vm_service.ReloadReport&gt;&gt; reloadReports = &lt;<span class="built_in">String</span>, Future&lt;vm_service.ReloadReport&gt;&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历所有isolate并执行热重载</span></span><br><span class="line">  <span class="keyword">for</span> (vm_service.IsolateRef isolateRef <span class="keyword">in</span> isolates) &#123;</span><br><span class="line">    reloadReports[isolateRef.id!] = vmService.reloadSources(isolateRef.id!, pause: pause, reason: reason);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待所有热重载操作完成</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;vm_service.ReloadReport&gt; reports = <span class="keyword">await</span> Future.wait(reloadReports.values);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查重载结果</span></span><br><span class="line">  <span class="keyword">for</span> (vm_service.ReloadReport report <span class="keyword">in</span> reports) &#123;</span><br><span class="line">    <span class="keyword">if</span> (report.success) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Hot Reload成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Hot Reload失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OperationResult.ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>_reloadSources</code>方法负责连接到Dart VM并触发热重载操作。它会遍历所有的isolate，并通过调用<code>reloadSources</code>方法来更新代码。</p><h4 id="3-2-Dart-VM中的热重载实现"><a href="#3-2-Dart-VM中的热重载实现" class="headerlink" title="3.2 Dart VM中的热重载实现"></a>3.2 Dart VM中的热重载实现</h4><p>Dart VM的热重载功能实现位于Dart SDK中。以下是相关的C++代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cpp</span><br><span class="line"> </span><br><span class="line">bool ReloadSources(Thread* thread,</span><br><span class="line">                   const String&amp; packages_url,</span><br><span class="line">                   const String&amp; root_lib_url,</span><br><span class="line">                   bool force_reload,</span><br><span class="line">                   JSONStream* js) &#123;</span><br><span class="line">  // 解析和编译新的源代码</span><br><span class="line">  Dart_SourceFile* source_files = ParseSourceFiles(packages_url, root_lib_url);</span><br><span class="line">  if (source_files == nullptr) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 更新类和函数的实现</span><br><span class="line">  UpdateClassesAndFunctions(source_files);</span><br><span class="line"></span><br><span class="line">  // 释放资源</span><br><span class="line">  FreeSourceFiles(source_files);</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>ReloadSources</code>函数负责解析和编译新的源代码，并更新类和函数的实现。这个过程是Hot Reload的核心。</p><h4 id="3-3-Flutter框架中的重建过程"><a href="#3-3-Flutter框架中的重建过程" class="headerlink" title="3.3 Flutter框架中的重建过程"></a>3.3 Flutter框架中的重建过程</h4><p>在Dart VM完成代码更新后，Flutter框架会触发应用的重建过程。以下是<code>reassemble</code>方法的实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span>&gt; <span class="keyword">extends</span> <span class="title">Diagnosticable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> reassemble() &#123;</span><br><span class="line">    <span class="comment">// 通知框架Widget需要重建</span></span><br><span class="line">    rebuildElement();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>reassemble</code>方法中，<code>rebuildElement</code>方法被调用，这会导致Widget树重新构建，从而应用新的代码变化。</p><h3 id="四、Hot-Reload的优势与局限"><a href="#四、Hot-Reload的优势与局限" class="headerlink" title="四、Hot Reload的优势与局限"></a>四、Hot Reload的优势与局限</h3><h4 id="4-1-优势"><a href="#4-1-优势" class="headerlink" title="4.1 优势"></a>4.1 优势</h4><ol><li><strong>快速迭代</strong>：开发者可以立即看到代码变化的效果，极大提高了开发效率。</li><li><strong>保持状态</strong>：在大多数情况下，Hot Reload不会丢失应用状态，使得调试更加方便。</li><li><strong>便捷调试</strong>：通过Hot Reload，开发者可以快速尝试不同的代码实现，找到最佳方案。</li></ol><h4 id="4-2-局限"><a href="#4-2-局限" class="headerlink" title="4.2 局限"></a>4.2 局限</h4><ol><li><strong>不适用于所有代码变化</strong>：某些代码变化（如新增库或全局状态变化）需要完全重启应用才能生效。</li><li><strong>可能引发不一致状态</strong>：在某些情况下，Hot Reload可能导致应用状态不一致，需要手动处理。</li></ol><h3 id="五、使用Hot-Reload"><a href="#五、使用Hot-Reload" class="headerlink" title="五、使用Hot Reload"></a>五、使用Hot Reload</h3><p>在使用Flutter开发时，Hot Reload已经内置在主流IDE中。通过快捷键即可触发：</p><ul><li><strong>VS Code</strong>：<code>Ctrl + S</code>（Windows&#x2F;Linux）或 <code>Cmd + S</code>（Mac）</li><li><strong>Android Studio</strong>：点击工具栏上的闪电图标或使用快捷键 <code>Ctrl + S</code>（Windows&#x2F;Linux）或 <code>Cmd + S</code>（Mac）</li></ul><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>好了，今天的分享就到这里啦！希望以上文章能帮助到各位Flutter爱好者。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Hot Reload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-关于Sliver组件的使用</title>
      <link href="/blog/2020/11/07/Flutter-%E5%85%B3%E4%BA%8ESliver%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/11/07/Flutter-%E5%85%B3%E4%BA%8ESliver%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>今天咱们来聊聊Flutter中的一个重要组件——<code>Sliver</code>。<code>Sliver</code>是Flutter中实现高性能滚动布局的关键，特别适用于需要动态加载内容的大量列表和复杂的滚动效果。接下来我们会详细介绍<code>Sliver</code>的使用案例，深入分析它是如何实现高性能滚动布局的，并探讨它的使用场景。</p><h3 id="一、Sliver的使用案例"><a href="#一、Sliver的使用案例" class="headerlink" title="一、Sliver的使用案例"></a>一、Sliver的使用案例</h3><h4 id="1-1-简单的SliverList使用"><a href="#1-1-简单的SliverList使用" class="headerlink" title="1.1 简单的SliverList使用"></a>1.1 简单的SliverList使用</h4><p>我们先从一个简单的例子开始，展示如何使用<code>SliverList</code>来创建一个垂直滚动的列表。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Sliver Example&#x27;</span>)),</span><br><span class="line">        body: CustomScrollView(</span><br><span class="line">          slivers: [</span><br><span class="line">            <span class="comment">// 添加一个SliverAppBar</span></span><br><span class="line">            SliverAppBar(</span><br><span class="line">              expandedHeight: <span class="number">150.0</span>,</span><br><span class="line">              flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">                title: Text(<span class="string">&#x27;SliverAppBar&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              pinned: <span class="keyword">true</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 添加一个SliverList</span></span><br><span class="line">            SliverList(</span><br><span class="line">              delegate: SliverChildBuilderDelegate(</span><br><span class="line">                (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">                  <span class="keyword">return</span> ListTile(</span><br><span class="line">                    title: Text(<span class="string">&#x27;Item #<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,</span><br><span class="line">                childCount: <span class="number">20</span>, <span class="comment">// 列表项数量</span></span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>CustomScrollView</code>作为容器，并在其中添加了一个<code>SliverAppBar</code>和一个<code>SliverList</code>。<code>SliverList</code>通过<code>SliverChildBuilderDelegate</code>动态生成列表项，展示了一个简单的垂直滚动列表。</p><h3 id="二、深入分析Sliver的高性能实现"><a href="#二、深入分析Sliver的高性能实现" class="headerlink" title="二、深入分析Sliver的高性能实现"></a>二、深入分析Sliver的高性能实现</h3><h4 id="2-1-Sliver的原理"><a href="#2-1-Sliver的原理" class="headerlink" title="2.1 Sliver的原理"></a>2.1 Sliver的原理</h4><p><code>Sliver</code>是Flutter中实现高性能滚动布局的关键。它通过懒加载（lazy loading）和视口（viewport）管理来实现高效的滚动性能。懒加载意味着只有当一个子组件即将出现在屏幕上时，才会创建它。视口管理确保只渲染当前视口内的组件，从而减少不必要的渲染和资源消耗。</p><h4 id="2-2-源码分析"><a href="#2-2-源码分析" class="headerlink" title="2.2 源码分析"></a>2.2 源码分析</h4><p>我们来看一下<code>SliverList</code>的核心实现逻辑。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderSliverList</span> <span class="keyword">extends</span> <span class="title">RenderSliverMultiBoxAdaptor</span> </span>&#123;</span><br><span class="line">  RenderSliverList(&#123;</span><br><span class="line">    <span class="keyword">required</span> RenderSliverBoxChildManager childManager,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(childManager: childManager);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> performLayout() &#123;</span><br><span class="line">    <span class="comment">// 获取视口约束</span></span><br><span class="line">    <span class="keyword">final</span> SliverConstraints constraints = <span class="keyword">this</span>.constraints;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化布局偏移量</span></span><br><span class="line">    <span class="built_in">double</span> childCrossAxisPosition = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">double</span> childMainAxisPosition = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始布局子组件</span></span><br><span class="line">    childManager.createChild(<span class="number">0</span>, after: <span class="keyword">null</span>);</span><br><span class="line">    RenderBox? child = firstChild;</span><br><span class="line">    <span class="keyword">while</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取子组件大小</span></span><br><span class="line">      <span class="keyword">final</span> SliverPhysicalParentData childParentData = child.parentData <span class="keyword">as</span> SliverPhysicalParentData;</span><br><span class="line">      child.layout(constraints.asBoxConstraints(), parentUsesSize: <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置子组件偏移量</span></span><br><span class="line">      childParentData.crossAxisPosition = childCrossAxisPosition;</span><br><span class="line">      childParentData.mainAxisPosition = childMainAxisPosition;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 更新偏移量</span></span><br><span class="line">      childMainAxisPosition += child.size.height;</span><br><span class="line">      childCrossAxisPosition += child.size.width;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理下一个子组件</span></span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">int</span> index = indexOf(child) + <span class="number">1</span>;</span><br><span class="line">      child = childAfter(child);</span><br><span class="line">      <span class="keyword">if</span> (child == <span class="keyword">null</span> &amp;&amp; index &lt; childManager.childCount) &#123;</span><br><span class="line">        childManager.createChild(index, after: childBefore(child));</span><br><span class="line">        child = childAfter(child);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置视口和内容的偏移量</span></span><br><span class="line">    geometry = SliverGeometry(</span><br><span class="line">      scrollExtent: childMainAxisPosition,</span><br><span class="line">      paintExtent: constraints.remainingPaintExtent,</span><br><span class="line">      maxPaintExtent: childMainAxisPosition,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>RenderSliverList</code>中，<code>performLayout</code>方法是实现布局的核心。它通过懒加载创建子组件，并根据视口约束计算和设置子组件的位置。这种方式确保了只有当前视口内的子组件会被渲染，从而实现高效的滚动性能。</p><h3 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h3><h4 id="3-1-大量数据列表"><a href="#3-1-大量数据列表" class="headerlink" title="3.1 大量数据列表"></a>3.1 大量数据列表</h4><p>当需要显示大量数据时，使用<code>SliverList</code>或<code>SliverGrid</code>是非常合适的选择。它们可以通过懒加载机制，避免一次性加载所有数据，减少内存消耗，提高性能。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeDataList</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomScrollView(</span><br><span class="line">      slivers: [</span><br><span class="line">        SliverList(</span><br><span class="line">          delegate: SliverChildBuilderDelegate(</span><br><span class="line">            (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> ListTile(</span><br><span class="line">                title: Text(<span class="string">&#x27;Item #<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            childCount: <span class="number">1000</span>, <span class="comment">// 模拟大量数据</span></span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-复杂的滚动效果"><a href="#3-2-复杂的滚动效果" class="headerlink" title="3.2 复杂的滚动效果"></a>3.2 复杂的滚动效果</h4><p>当需要实现复杂的滚动效果，如滚动过程中标题栏的折叠和展开，可以使用<code>SliverAppBar</code>结合其他<code>Sliver</code>组件来实现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollapsibleAppBarExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CustomScrollView(</span><br><span class="line">      slivers: [</span><br><span class="line">        SliverAppBar(</span><br><span class="line">          expandedHeight: <span class="number">200.0</span>,</span><br><span class="line">          flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">            title: Text(<span class="string">&#x27;Collapsible AppBar&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          pinned: <span class="keyword">true</span>,</span><br><span class="line">        ),</span><br><span class="line">        SliverList(</span><br><span class="line">          delegate: SliverChildBuilderDelegate(</span><br><span class="line">            (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> ListTile(</span><br><span class="line">                title: Text(<span class="string">&#x27;Item #<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            childCount: <span class="number">50</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>好了，以上是本篇内容的所有内容，希望通过这篇文章，大家对Flutter中的<code>Sliver</code>组件有了更深入的了解。无论是处理大量数据还是实现复杂的滚动效果，<code>Sliver</code>都是你的好帮手。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Sliver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-布局（Layout）</title>
      <link href="/blog/2020/11/04/Flutter-%E5%B8%83%E5%B1%80%EF%BC%88Layout%EF%BC%89/"/>
      <url>/blog/2020/11/04/Flutter-%E5%B8%83%E5%B1%80%EF%BC%88Layout%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>hi，Flutter爱好者们！今天我们来点有趣的，聊聊Flutter中最神奇的部分之一——布局（Layout）过程和布局约束。准备好了吗？让我们一起深入探究这片神奇的世界，看看Widget是如何在屏幕上找到它们的最佳位置的。</p><h3 id="一、布局过程简介"><a href="#一、布局过程简介" class="headerlink" title="一、布局过程简介"></a>一、布局过程简介</h3><p>在Flutter中，布局是一个双向过程。父Widget会将约束（constraints）传递给子Widget，子Widget会根据这些约束来确定自己的大小和位置，然后返回给父Widget。这个过程听起来有点像是在玩一场捉迷藏，对吧？</p><h3 id="二、布局约束（Constraints）"><a href="#二、布局约束（Constraints）" class="headerlink" title="二、布局约束（Constraints）"></a>二、布局约束（Constraints）</h3><p>布局约束是Widget在布局过程中收到的一组规则，决定了它可以有多大或多小。约束有四种边界：</p><ol><li>最小宽度（minWidth）</li><li>最大宽度（maxWidth）</li><li>最小高度（minHeight）</li><li>最大高度（maxHeight）</li></ol><h4 id="案例：使用Constraints"><a href="#案例：使用Constraints" class="headerlink" title="案例：使用Constraints"></a>案例：使用Constraints</h4><p>让我们来看一个简单的例子，了解约束是如何工作的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConstrainedBox</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ConstrainedBox(</span><br><span class="line">      constraints: BoxConstraints(</span><br><span class="line">        minWidth: <span class="number">100</span>,</span><br><span class="line">        maxWidth: <span class="number">200</span>,</span><br><span class="line">        minHeight: <span class="number">50</span>,</span><br><span class="line">        maxHeight: <span class="number">100</span>,</span><br><span class="line">      ),</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>ConstrainedBox</code>来限制<code>Container</code>的大小。这个小蓝盒子会根据我们设置的约束，找到一个合适的尺寸。</p><h3 id="三、布局过程（Layout-Process）"><a href="#三、布局过程（Layout-Process）" class="headerlink" title="三、布局过程（Layout Process）"></a>三、布局过程（Layout Process）</h3><p>Flutter的布局过程分为两个阶段：测量（measure）和布局（layout）。</p><h4 id="3-1-测量（Measure）"><a href="#3-1-测量（Measure）" class="headerlink" title="3.1 测量（Measure）"></a>3.1 测量（Measure）</h4><p>在测量阶段，父Widget将约束传递给子Widget，子Widget根据这些约束来测量自己的大小。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> performLayout() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> BoxConstraints constraints = <span class="keyword">this</span>.constraints;</span><br><span class="line">  child.layout(constraints);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-布局（Layout）"><a href="#3-2-布局（Layout）" class="headerlink" title="3.2 布局（Layout）"></a>3.2 布局（Layout）</h4><p>在布局阶段，父Widget根据子Widget的测量结果，确定子Widget的位置，并将其放置在合适的地方。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> performLayout() &#123;</span><br><span class="line">  <span class="comment">// 布置子窗口小部件</span></span><br><span class="line">  <span class="keyword">final</span> BoxConstraints constraints = <span class="keyword">this</span>.constraints;</span><br><span class="line">  child.layout(constraints, parentUsesSize: <span class="keyword">true</span>);</span><br><span class="line">  size = child.size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、源码解析"><a href="#四、源码解析" class="headerlink" title="四、源码解析"></a>四、源码解析</h3><p>让我们深入一下<code>RenderBox</code>，这是Flutter布局系统的核心类之一。</p><h4 id="4-1-RenderBox"><a href="#4-1-RenderBox" class="headerlink" title="4.1 RenderBox"></a>4.1 RenderBox</h4><p><code>RenderBox</code>是所有可布局的对象的基类。它负责实现布局协议，并定义了如何进行测量和布局。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderBox</span> <span class="keyword">extends</span> <span class="title">RenderObject</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Perform layout</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> layout(Constraints constraints, &#123; <span class="built_in">bool</span> parentUsesSize = <span class="keyword">false</span> &#125;) &#123;</span><br><span class="line">    <span class="comment">// 如果约束没有更改，并且父对象仍然可以使用</span></span><br><span class="line">    <span class="comment">//此框的当前大小，则我们不需要重新布局此框。</span></span><br><span class="line">    <span class="keyword">if</span> (!_needsLayout &amp;&amp; constraints == _constraints &amp;&amp; parentUsesSize == _parentUsesSize)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    _constraints = constraints;</span><br><span class="line">    _parentUsesSize = parentUsesSize;</span><br><span class="line">    performLayout();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Measure the size of the child</span></span><br><span class="line">  <span class="keyword">void</span> performLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-BoxConstraints"><a href="#4-2-BoxConstraints" class="headerlink" title="4.2 BoxConstraints"></a>4.2 BoxConstraints</h4><p><code>BoxConstraints</code>是布局约束的具体实现，用于描述Widget在布局过程中的限制条件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxConstraints</span> <span class="keyword">extends</span> <span class="title">Constraints</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> BoxConstraints(&#123;</span><br><span class="line">    <span class="keyword">this</span>.minWidth = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxWidth = <span class="built_in">double</span>.infinity,</span><br><span class="line">    <span class="keyword">this</span>.minHeight = <span class="number">0.0</span>,</span><br><span class="line">    <span class="keyword">this</span>.maxHeight = <span class="built_in">double</span>.infinity,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> minWidth;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> maxWidth;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> minHeight;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> maxHeight;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> isSatisfiedBy(Size size) &#123;</span><br><span class="line">    <span class="keyword">return</span> (size.width &gt;= minWidth &amp;&amp; size.width &lt;= maxWidth) &amp;&amp;</span><br><span class="line">           (size.height &gt;= minHeight &amp;&amp; size.height &lt;= maxHeight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、布局示例"><a href="#五、布局示例" class="headerlink" title="五、布局示例"></a>五、布局示例</h3><h4 id="5-1-自定义布局Widget"><a href="#5-1-自定义布局Widget" class="headerlink" title="5.1 自定义布局Widget"></a>5.1 自定义布局Widget</h4><p>我们可以创建一个自定义的布局Widget，通过实现<code>RenderBox</code>的<code>performLayout</code>方法来定义自己的布局逻辑。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomLayout</span> <span class="keyword">extends</span> <span class="title">SingleChildRenderObjectWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CustomLayout(&#123;Key? key, Widget? child&#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RenderObject createRenderObject(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> _CustomLayoutRenderBox();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CustomLayoutRenderBox</span> <span class="keyword">extends</span> <span class="title">RenderBox</span> <span class="title">with</span> <span class="title">RenderObjectWithChildMixin</span>&lt;<span class="title">RenderBox</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> performLayout() &#123;</span><br><span class="line">    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 为子项设置约束</span></span><br><span class="line">      child!.layout(constraints, parentUsesSize: <span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">// 根据子对象的大小设置父对象的大小</span></span><br><span class="line">      size = constraints.constrain(Size(child!.size.width, child!.size.height));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      size = constraints.smallest;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>好了，今天的内容就分享到这里了！希望这篇文章能让你对Flutter中的布局过程和布局约束有更深入的了解。如果你想了解更多，别忘了查看<a href="https://docs.flutter.dev/">Flutter官方文档</a>哦！</p><p>记住，布局就像是一场魔法秀，了解其中的奥秘会让你的Flutter开发更加得心应手。有什么问题或者想法，欢迎在评论区分享！Happy Coding! 🎉</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Key的作用于案例</title>
      <link href="/blog/2020/11/01/Flutter-Key%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BA%8E%E6%A1%88%E4%BE%8B/"/>
      <url>/blog/2020/11/01/Flutter-Key%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BA%8E%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>大家好，今天给大家分享的是Flutter中的Key，包括LocalKey、GlobalKey等的使用案例及其原理。Key在Flutter中用于标识和管理Widget，特别是在涉及到Widget的重建和更新时，Key起到了重要作用。</p><h3 id="一、Key的概念"><a href="#一、Key的概念" class="headerlink" title="一、Key的概念"></a>一、Key的概念</h3><p>在Flutter中，<code>Key</code>是一个抽象类，用于标识和管理Widget的唯一标识。Key主要有以下几种类型：</p><ol><li><strong>LocalKey</strong>：用于标识在同一父Widget下的唯一子Widget。</li><li><strong>GlobalKey</strong>：用于标识在整个Widget树中唯一的Widget，允许跨父Widget访问。</li></ol><h3 id="二、Key的类型及使用"><a href="#二、Key的类型及使用" class="headerlink" title="二、Key的类型及使用"></a>二、Key的类型及使用</h3><h4 id="2-1-LocalKey"><a href="#2-1-LocalKey" class="headerlink" title="2.1 LocalKey"></a>2.1 LocalKey</h4><p><code>LocalKey</code>是<code>Key</code>的一个子类，主要用于在同一父Widget下标识唯一的子Widget。<code>LocalKey</code>有两种实现方式：<code>ValueKey</code>和<code>ObjectKey</code>。</p><h5 id="2-1-1-ValueKey"><a href="#2-1-1-ValueKey" class="headerlink" title="2.1.1 ValueKey"></a>2.1.1 ValueKey</h5><p><code>ValueKey</code>使用具体的值来标识Widget，常用于标识唯一的子Widget。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueKeyExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          key: ValueKey(<span class="string">&#x27;container1&#x27;</span>),</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          key: ValueKey(<span class="string">&#x27;container2&#x27;</span>),</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-ObjectKey"><a href="#2-1-2-ObjectKey" class="headerlink" title="2.1.2 ObjectKey"></a>2.1.2 ObjectKey</h5><p><code>ObjectKey</code>使用对象实例来标识Widget，通常用于在同一父Widget下的复杂对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectKeyExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Item item1 = Item(id: <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">final</span> Item item2 = Item(id: <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          key: ObjectKey(item1),</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          key: ObjectKey(item2),</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line"></span><br><span class="line">  Item(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.id&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-GlobalKey"><a href="#2-2-GlobalKey" class="headerlink" title="2.2 GlobalKey"></a>2.2 GlobalKey</h4><p><code>GlobalKey</code>在整个Widget树中唯一标识一个Widget，允许跨父Widget访问该Widget。<code>GlobalKey</code>主要用于需要跨组件访问状态或需要全局唯一标识的场景。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalKeyExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;_MyWidgetState&gt; _key = GlobalKey&lt;_MyWidgetState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            _key.currentState?.incrementCounter();</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Text(<span class="string">&#x27;Increment Counter&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        MyWidget(key: _key),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyWidgetState createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">&#x27;Counter: <span class="subst">$_counter</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、Key的原理解析"><a href="#三、Key的原理解析" class="headerlink" title="三、Key的原理解析"></a>三、Key的原理解析</h3><h4 id="3-1-Element-Tree中的Key"><a href="#3-1-Element-Tree中的Key" class="headerlink" title="3.1 Element Tree中的Key"></a>3.1 Element Tree中的Key</h4><p>在Flutter中，<code>Widget</code>是不可变的，而<code>Element</code>是Widget在屏幕上的实例。每个Widget对应一个Element。当Flutter构建Widget树时，会根据Key来决定是否复用现有的Element。</p><ol><li><strong>没有Key</strong>：如果没有指定Key，Flutter会根据Widget的类型和位置来复用Element。</li><li><strong>有Key</strong>：如果指定了Key，Flutter会根据Key来匹配Element，如果找到匹配的Element，则复用该Element。</li></ol><h4 id="3-2-Key的比较"><a href="#3-2-Key的比较" class="headerlink" title="3.2 Key的比较"></a>3.2 Key的比较</h4><p>当Flutter需要更新Widget树时，会比较新的Widget和旧的Widget。如果Widget的Key相同，Flutter会认为这是同一个Widget，从而复用旧的Element。如果Key不同，Flutter会销毁旧的Element，并创建新的Element。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> updateChild(<span class="built_in">Element?</span> child, Widget newWidget, <span class="built_in">dynamic</span> newSlot) &#123;</span><br><span class="line">  <span class="keyword">final</span> Key? key = newWidget.key;</span><br><span class="line">  <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.widget == newWidget) &#123;</span><br><span class="line">      <span class="comment">// 如果Widget相同，直接复用</span></span><br><span class="line">      <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; child.widget.key == key) &#123;</span><br><span class="line">      <span class="comment">// 如果Key相同，复用Element</span></span><br><span class="line">      child.update(newWidget);</span><br><span class="line">      <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Key不同，销毁旧的Element</span></span><br><span class="line">    deactivateChild(child);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建新的Element</span></span><br><span class="line">  <span class="keyword">return</span> inflateWidget(newWidget, newSlot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、Key的使用场景"><a href="#四、Key的使用场景" class="headerlink" title="四、Key的使用场景"></a>四、Key的使用场景</h3><ol><li><strong>列表项重排</strong>：在列表项重排时使用Key，确保每个列表项在重排后仍然是唯一的。</li><li><strong>动画</strong>：在动画过程中使用Key，确保Widget的状态在动画期间保持不变。</li><li><strong>跨组件状态共享</strong>：使用GlobalKey在不同组件之间共享状态或访问特定的Widget。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，今天分享的内容是Flutter中Key，包括LocalKey、GlobalKey等的使用案例及其原理。通过合理使用Key，我们可以更好地管理Flutter应用中的Widget，提高应用的性能和稳定性。如果大家有任何问题或需要进一步讨论的内容，欢迎随时提问！我的邮箱:<a href="mailto:&#x67;&#x32;&#x33;&#50;&#x32;&#50;&#x32;&#x32;&#50;&#50;&#51;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x67;&#x32;&#x33;&#50;&#x32;&#50;&#x32;&#x32;&#50;&#50;&#51;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Future机制</title>
      <link href="/blog/2020/10/26/Flutter-Future%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2020/10/26/Flutter-Future%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter中的Future机制详解"><a href="#Flutter中的Future机制详解" class="headerlink" title="Flutter中的Future机制详解"></a>Flutter中的Future机制详解</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Future</code>是Dart语言中处理异步操作的主要工具之一。<code>Future</code>允许我们编写非阻塞代码，使得应用能够处理I&#x2F;O操作、网络请求等任务时保持响应。理解<code>Future</code>的工作原理和事件循环机制，对于优化应用性能和用户体验具有重要意义。下面来看一下关于Future机制的解析吧~</p><h4 id="1-Dart中的Future概述"><a href="#1-Dart中的Future概述" class="headerlink" title="1. Dart中的Future概述"></a>1. Dart中的Future概述</h4><p><code>Future</code>表示一个异步计算的结果，该结果将在未来某个时间点完成。<code>Future</code>可以处于以下三种状态之一：</p><ul><li><strong>未完成（Uncompleted）</strong>：异步操作尚未完成。</li><li><strong>完成（Completed）</strong>：异步操作已完成，结果或错误已产生。</li><li><strong>已取消（Cancelled）</strong>：异步操作被取消。</li></ul><h5 id="1-1-Future的基本使用"><a href="#1-1-Future的基本使用" class="headerlink" title="1.1 Future的基本使用"></a>1.1 Future的基本使用</h5><p>以下是一个简单的<code>Future</code>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; fetchUserOrder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>), () =&gt; <span class="string">&#x27;Cappuccino&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  fetchUserOrder().then((order) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your order is: <span class="subst">$order</span>&#x27;</span>);</span><br><span class="line">  &#125;).catchError((error) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Something went wrong: <span class="subst">$error</span>&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Fetching user order...&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vbnet</span><br><span class="line"> </span><br><span class="line">Fetching user order...</span><br><span class="line">Your order is: Cappuccino</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>fetchUserOrder</code>函数在延迟2秒后返回一个<code>Future</code>，并在<code>then</code>回调中处理结果。</p><h4 id="2-Future的实现原理"><a href="#2-Future的实现原理" class="headerlink" title="2. Future的实现原理"></a>2. Future的实现原理</h4><h5 id="2-1-Future的核心类"><a href="#2-1-Future的核心类" class="headerlink" title="2.1 Future的核心类"></a>2.1 Future的核心类</h5><p><code>Future</code>的核心实现类为<code>_Future</code>，它包含了处理异步操作的主要逻辑。以下是<code>_Future</code>类的部分源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Future</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Future</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  _Future();</span><br><span class="line"></span><br><span class="line">  _Completer&lt;T&gt; _completer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;T&gt; asStream() &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream&lt;T&gt;.fromFuture(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;T&gt; catchError(<span class="built_in">Function</span> onError, &#123;<span class="built_in">bool</span> <span class="built_in">Function</span>(<span class="built_in">Object</span> error)? test&#125;) &#123;</span><br><span class="line">    <span class="comment">// Implementation</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;R&gt; then&lt;R&gt;(FutureOr&lt;R&gt; onValue(T value), &#123;<span class="built_in">Function?</span> onError&#125;) &#123;</span><br><span class="line">    <span class="comment">// Implementation</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;T&gt; timeout(<span class="built_in">Duration</span> timeLimit, &#123;FutureOr&lt;T&gt; <span class="built_in">Function</span>()? onTimeout&#125;) &#123;</span><br><span class="line">    <span class="comment">// Implementation</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;T&gt; whenComplete(FutureOr&lt;<span class="keyword">void</span>&gt; <span class="built_in">Function</span>() action) &#123;</span><br><span class="line">    <span class="comment">// Implementation</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Other methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_Future</code>类实现了<code>Future</code>接口，并包含多个方法用于处理异步操作的结果、错误和超时等。</p><h5 id="2-2-Completer类"><a href="#2-2-Completer类" class="headerlink" title="2.2 Completer类"></a>2.2 Completer类</h5><p><code>Completer</code>是<code>Future</code>的辅助类，用于控制<code>Future</code>的完成状态。通过<code>Completer</code>，我们可以手动完成一个<code>Future</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Completer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _Future&lt;T&gt; _future;</span><br><span class="line"></span><br><span class="line">  Completer() : _future = _Future&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">  Future&lt;T&gt; <span class="keyword">get</span> future =&gt; _future;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> complete([FutureOr&lt;T&gt; value]) &#123;</span><br><span class="line">    _future._complete(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> completeError(<span class="built_in">Object</span> error, [StackTrace? stackTrace]) &#123;</span><br><span class="line">    _future._completeError(error, stackTrace);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isCompleted =&gt; _future._isComplete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-Future的事件循环"><a href="#2-3-Future的事件循环" class="headerlink" title="2.3 Future的事件循环"></a>2.3 Future的事件循环</h5><p>Dart的事件循环用于调度和执行异步任务。<code>Future</code>的回调函数在事件循环中执行，以确保异步操作不阻塞主线程。以下是Dart事件循环的简化实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Future 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line"> </span><br><span class="line">Main</span><br><span class="line">Microtask 1</span><br><span class="line">Microtask 2</span><br><span class="line">Future 1</span><br><span class="line">Future 2</span><br></pre></td></tr></table></figure><p>在上面的示例中，微任务优先于普通任务执行。</p><h4 id="3-Future的详细实现解析"><a href="#3-Future的详细实现解析" class="headerlink" title="3. Future的详细实现解析"></a>3. Future的详细实现解析</h4><h5 id="3-1-then方法"><a href="#3-1-then方法" class="headerlink" title="3.1 then方法"></a>3.1 then方法</h5><p><code>then</code>方法用于注册在<code>Future</code>完成时调用的回调函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Future&lt;R&gt; then&lt;R&gt;(FutureOr&lt;R&gt; onValue(T value), &#123;<span class="built_in">Function?</span> onError&#125;) &#123;</span><br><span class="line">  <span class="keyword">final</span> _Future&lt;R&gt; result = _Future&lt;R&gt;();</span><br><span class="line">  _addListener(_ThenListener&lt;T, R&gt;(result, onValue, onError));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-catchError方法"><a href="#3-2-catchError方法" class="headerlink" title="3.2 catchError方法"></a>3.2 catchError方法</h5><p><code>catchError</code>方法用于注册在<code>Future</code>发生错误时调用的回调函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Future&lt;T&gt; catchError(<span class="built_in">Function</span> onError, &#123;<span class="built_in">bool</span> <span class="built_in">Function</span>(<span class="built_in">Object</span> error)? test&#125;) &#123;</span><br><span class="line">  <span class="keyword">final</span> _Future&lt;T&gt; result = _Future&lt;T&gt;();</span><br><span class="line">  _addListener(_CatchErrorListener&lt;T&gt;(result, onError, test));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-whenComplete方法"><a href="#3-3-whenComplete方法" class="headerlink" title="3.3 whenComplete方法"></a>3.3 whenComplete方法</h5><p><code>whenComplete</code>方法用于注册在<code>Future</code>完成或发生错误时调用的回调函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Future&lt;T&gt; whenComplete(FutureOr&lt;<span class="keyword">void</span>&gt; <span class="built_in">Function</span>() action) &#123;</span><br><span class="line">  <span class="keyword">final</span> _Future&lt;T&gt; result = _Future&lt;T&gt;();</span><br><span class="line">  _addListener(_WhenCompleteListener&lt;T&gt;(result, action));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Future在Flutter中的应用"><a href="#4-Future在Flutter中的应用" class="headerlink" title="4. Future在Flutter中的应用"></a>4. Future在Flutter中的应用</h4><p>在Flutter中，<code>Future</code>广泛应用于异步编程，例如网络请求、文件操作等。以下是一个使用<code>FutureBuilder</code>的小示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; fetchUserOrder() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Cappuccino&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Future Example&#x27;</span>)),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: FutureBuilder&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">            future: fetchUserOrder(),</span><br><span class="line">            builder: (context, snapshot) &#123;</span><br><span class="line">              <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.waiting) &#123;</span><br><span class="line">                <span class="keyword">return</span> CircularProgressIndicator();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&#x27;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Text(<span class="string">&#x27;Order: <span class="subst">$&#123;snapshot.data&#125;</span>&#x27;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是关于Future的所有内容,Future通过事件循环实现了异步编程，使得Flutter应用能够在处理耗时操作时保持响应性。理解了Future才能更好使用异步编程的能力。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-事件循环Event Loop</title>
      <link href="/blog/2020/10/24/Flutter-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEvent-Loop/"/>
      <url>/blog/2020/10/24/Flutter-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEvent-Loop/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter中的事件循环机制详解"><a href="#Flutter中的事件循环机制详解" class="headerlink" title="Flutter中的事件循环机制详解"></a>Flutter中的事件循环机制详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>事件循环（Event Loop）用于管理异步事件和任务。理解事件循环的工作原理，对于编写高性能、响应迅速的Flutter应用至关重要。本文将简单分析Flutter中的事件循环机制，包括其实现原理和运行过程。</p><h4 id="2-事件循环的基本概念"><a href="#2-事件循环的基本概念" class="headerlink" title="2. 事件循环的基本概念"></a>2. 事件循环的基本概念</h4><p>在Flutter中，事件循环用于管理异步事件和任务的执行顺序。它负责调度和处理来自不同源的事件，如用户输入、I&#x2F;O操作和定时器。事件循环的核心组件是<code>Dart</code>中的<code>Isolate</code>，每个Flutter应用都有一个主<code>Isolate</code>，负责执行事件循环。</p><h4 id="3-Dart中的事件循环"><a href="#3-Dart中的事件循环" class="headerlink" title="3. Dart中的事件循环"></a>3. Dart中的事件循环</h4><p>Dart的事件循环由两种队列组成：任务队列（Task Queue）和微任务队列（Microtask Queue）。微任务队列的优先级高于任务队列，意味着在处理任何任务之前，事件循环会首先处理所有的微任务。</p><h5 id="3-1-事件循环的实现"><a href="#3-1-事件循环的实现" class="headerlink" title="3.1 事件循环的实现"></a>3.1 事件循环的实现</h5><p>以下是Dart事件循环的简化实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 添加一个微任务</span></span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加一个任务</span></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task 1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加另一个微任务</span></span><br><span class="line">  scheduleMicrotask(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Microtask 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加另一个任务</span></span><br><span class="line">  Future(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task 2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Main&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的执行顺序为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arduino</span><br><span class="line"> </span><br><span class="line">Main</span><br><span class="line">Microtask 1</span><br><span class="line">Microtask 2</span><br><span class="line">Task 1</span><br><span class="line">Task 2</span><br></pre></td></tr></table></figure><p>这是因为微任务队列中的任务优先级高于任务队列中的任务。</p><h4 id="4-Flutter中的事件循环"><a href="#4-Flutter中的事件循环" class="headerlink" title="4. Flutter中的事件循环"></a>4. Flutter中的事件循环</h4><p>Flutter中的事件循环是基于Dart事件循环实现的。Flutter使用<code>SchedulerBinding</code>来管理帧的调度和事件的处理。</p><h5 id="4-1-SchedulerBinding"><a href="#4-1-SchedulerBinding" class="headerlink" title="4.1 SchedulerBinding"></a>4.1 SchedulerBinding</h5><p><code>SchedulerBinding</code>是Flutter框架中负责管理调度的类。它负责协调框架的刷新、动画和任务的执行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerBinding</span> <span class="keyword">extends</span> <span class="title">BindingBase</span> <span class="keyword">implements</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 单例模式，确保全局唯一实例</span></span><br><span class="line">  <span class="keyword">static</span> SchedulerBinding? <span class="keyword">get</span> instance =&gt; _instance;</span><br><span class="line">  <span class="keyword">static</span> SchedulerBinding? _instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  SchedulerBinding() &#123;</span><br><span class="line">    _instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调度帧</span></span><br><span class="line">  <span class="keyword">void</span> scheduleFrame() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_hasScheduledFrame) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _hasScheduledFrame = <span class="keyword">true</span>;</span><br><span class="line">    <span class="built_in">window</span>.scheduleFrame();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理帧</span></span><br><span class="line">  <span class="keyword">void</span> handleDrawFrame() &#123;</span><br><span class="line">    _hasScheduledFrame = <span class="keyword">false</span>;</span><br><span class="line">    _frameCallback?.call();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-Flutter中的任务调度"><a href="#4-2-Flutter中的任务调度" class="headerlink" title="4.2 Flutter中的任务调度"></a>4.2 Flutter中的任务调度</h5><p>Flutter中的任务调度由<code>SchedulerBinding</code>管理。开发者可以通过<code>SchedulerBinding</code>注册帧回调、计划任务和管理事件循环。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 注册一个帧回调</span></span><br><span class="line">    SchedulerBinding.instance?.addPostFrameCallback((_) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Post Frame Callback&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个任务</span></span><br><span class="line">    SchedulerBinding.instance?.scheduleTask(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Scheduled Task&#x27;</span>);</span><br><span class="line">    &#125;, Priority.animation);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter Event Loop Example&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">&#x27;Hello, Flutter!&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-事件循环的执行过程"><a href="#5-事件循环的执行过程" class="headerlink" title="5. 事件循环的执行过程"></a>5. 事件循环的执行过程</h4><h5 id="5-1-框架启动"><a href="#5-1-框架启动" class="headerlink" title="5.1 框架启动"></a>5.1 框架启动</h5><p>当Flutter应用启动时，事件循环初始化并开始执行。<code>runApp</code>函数是Flutter应用的入口，负责启动应用并运行事件循环。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> runApp(Widget app) &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class="line">    ..attachRootWidget(app)</span><br><span class="line">    ..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-帧的调度"><a href="#5-2-帧的调度" class="headerlink" title="5.2 帧的调度"></a>5.2 帧的调度</h5><p><code>SchedulerBinding</code>管理帧的调度，通过<code>window.scheduleFrame</code>来请求新的帧。当系统准备好绘制新的一帧时，会调用<code>handleDrawFrame</code>来处理帧。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> scheduleFrame() &#123;</span><br><span class="line">  <span class="keyword">if</span> (_hasScheduledFrame) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _hasScheduledFrame = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">window</span>.scheduleFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> handleDrawFrame() &#123;</span><br><span class="line">  _hasScheduledFrame = <span class="keyword">false</span>;</span><br><span class="line">  _frameCallback?.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-3-微任务和任务的处理"><a href="#5-3-微任务和任务的处理" class="headerlink" title="5.3 微任务和任务的处理"></a>5.3 微任务和任务的处理</h5><p>在每一帧中，事件循环会首先处理所有的微任务，然后处理任务队列中的任务。开发者可以通过<code>scheduleMicrotask</code>和<code>Future</code>等方法向队列中添加任务。</p><h4 id="6-源码解析与注释"><a href="#6-源码解析与注释" class="headerlink" title="6. 源码解析与注释"></a>6. 源码解析与注释</h4><p>以下是<code>SchedulerBinding</code>的部分源码解析与中文注释。</p><h5 id="SchedulerBinding的scheduleFrame方法"><a href="#SchedulerBinding的scheduleFrame方法" class="headerlink" title="SchedulerBinding的scheduleFrame方法"></a>SchedulerBinding的scheduleFrame方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> scheduleFrame() &#123;</span><br><span class="line">  <span class="keyword">if</span> (_hasScheduledFrame) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _hasScheduledFrame = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// 请求系统在下一帧绘制</span></span><br><span class="line">  <span class="built_in">window</span>.scheduleFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SchedulerBinding的handleDrawFrame方法"><a href="#SchedulerBinding的handleDrawFrame方法" class="headerlink" title="SchedulerBinding的handleDrawFrame方法"></a>SchedulerBinding的handleDrawFrame方法</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> handleDrawFrame() &#123;</span><br><span class="line">  _hasScheduledFrame = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 调用帧回调函数</span></span><br><span class="line">  _frameCallback?.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h4><p>以上是本篇文章的所有内容,事件循环是Flutter框架的核心机制之一，负责管理异步事件和任务的执行顺序是一个非常重要的机制。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Event Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-InheritedNotifier详解</title>
      <link href="/blog/2020/10/16/Flutter-InheritedNotifier%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/10/16/Flutter-InheritedNotifier%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter中的InheritedNotifier详解"><a href="#Flutter中的InheritedNotifier详解" class="headerlink" title="Flutter中的InheritedNotifier详解"></a>Flutter中的InheritedNotifier详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Flutter中，状态管理是开发者面临的重要问题之一。<code>InheritedNotifier</code>是Flutter提供的一种用于共享和监听状态变化的便捷方式。它结合了<code>InheritedWidget</code>和<code>ChangeNotifier</code>的功能，能够高效地管理和传播状态变化。本文将详细介绍<code>InheritedNotifier</code>的源码、使用方法以及其优点。</p><h4 id="2-InheritedNotifier的概念"><a href="#2-InheritedNotifier的概念" class="headerlink" title="2. InheritedNotifier的概念"></a>2. InheritedNotifier的概念</h4><p><code>InheritedNotifier</code>是Flutter中用于状态管理的一个类，它继承自<code>InheritedWidget</code>，并结合了<code>ChangeNotifier</code>的功能。<code>InheritedNotifier</code>允许子树中的小部件在状态发生变化时进行更新，而不需要手动传递状态。</p><h4 id="3-InheritedNotifier的源码解析"><a href="#3-InheritedNotifier的源码解析" class="headerlink" title="3. InheritedNotifier的源码解析"></a>3. InheritedNotifier的源码解析</h4><p>以下是<code>InheritedNotifier</code>的源码摘录及其注释：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/widgets.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritedNotifier</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Listenable</span>&gt; <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> InheritedNotifier(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">    T? notifier,</span><br><span class="line">  &#125;) : _notifier = notifier, <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> T? _notifier;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(InheritedNotifier&lt;T&gt; oldWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget._notifier != _notifier;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  InheritedElement createElement() =&gt; _InheritedNotifierElement&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  T? <span class="keyword">get</span> notifier =&gt; _notifier;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InheritedNotifierElement</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Listenable</span>&gt; <span class="keyword">extends</span> <span class="title">InheritedElement</span> </span>&#123;</span><br><span class="line">  _InheritedNotifierElement(InheritedNotifier&lt;T&gt; widget) : <span class="keyword">super</span>(widget);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  InheritedNotifier&lt;T&gt; <span class="keyword">get</span> widget =&gt; <span class="keyword">super</span>.widget <span class="keyword">as</span> InheritedNotifier&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> updateDependencies(<span class="built_in">Element</span> dependent, <span class="built_in">Object?</span> aspect) &#123;</span><br><span class="line">    <span class="keyword">super</span>.updateDependencies(dependent, aspect);</span><br><span class="line">    <span class="keyword">final</span> T? oldNotifier = widget._notifier;</span><br><span class="line">    <span class="keyword">if</span> (oldNotifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">      oldNotifier.addListener(_handleUpdate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleUpdate() &#123;</span><br><span class="line">    markNeedsBuild();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-InheritedNotifier的使用方法"><a href="#4-InheritedNotifier的使用方法" class="headerlink" title="4. InheritedNotifier的使用方法"></a>4. InheritedNotifier的使用方法</h4><p><code>InheritedNotifier</code>通常与<code>ChangeNotifier</code>结合使用，以便在状态变化时通知依赖的Widget进行重建。下面是一个完整的示例，展示如何使用<code>InheritedNotifier</code>来管理状态。</p><h5 id="4-1-创建一个ChangeNotifier"><a href="#4-1-创建一个ChangeNotifier" class="headerlink" title="4.1 创建一个ChangeNotifier"></a>4.1 创建一个<code>ChangeNotifier</code></h5><p>首先，我们创建一个<code>ChangeNotifier</code>子类，用于管理状态并通知监听器。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterNotifier</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> count =&gt; _count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> increment() &#123;</span><br><span class="line">    _count++;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-创建一个InheritedNotifier"><a href="#4-2-创建一个InheritedNotifier" class="headerlink" title="4.2 创建一个InheritedNotifier"></a>4.2 创建一个<code>InheritedNotifier</code></h5><p>接下来，我们创建一个继承自<code>InheritedNotifier</code>的类，用于提供状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterProvider</span> <span class="keyword">extends</span> <span class="title">InheritedNotifier</span>&lt;<span class="title">CounterNotifier</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CounterProvider(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> CounterNotifier notifier,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, notifier: notifier, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> CounterNotifier? of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType&lt;CounterProvider&gt;()?.notifier;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-使用InheritedNotifier提供状态"><a href="#4-3-使用InheritedNotifier提供状态" class="headerlink" title="4.3 使用InheritedNotifier提供状态"></a>4.3 使用<code>InheritedNotifier</code>提供状态</h5><p>在应用中，我们使用<code>CounterProvider</code>来提供状态，并在子Widget中访问和更新状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> CounterNotifier counterNotifier = CounterNotifier();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CounterProvider(</span><br><span class="line">      notifier: counterNotifier,</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        home: Scaffold(</span><br><span class="line">          appBar: AppBar(</span><br><span class="line">            title: Text(<span class="string">&#x27;InheritedNotifier Example&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body: Center(</span><br><span class="line">            child: CounterWidget(),</span><br><span class="line">          ),</span><br><span class="line">          floatingActionButton: FloatingActionButton(</span><br><span class="line">            onPressed: () =&gt; counterNotifier.increment(),</span><br><span class="line">            child: Icon(Icons.add),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> counterNotifier = CounterProvider.of(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&#x27;Count: <span class="subst">$&#123;counterNotifier?.count&#125;</span>&#x27;</span>,</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">24</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-InheritedNotifier的优点"><a href="#5-InheritedNotifier的优点" class="headerlink" title="5. InheritedNotifier的优点"></a>5. InheritedNotifier的优点</h4><ol><li><strong>简洁的状态管理</strong>：<code>InheritedNotifier</code>结合了<code>InheritedWidget</code>和<code>ChangeNotifier</code>的功能，使状态管理更为简洁和高效。</li><li><strong>高效的更新机制</strong>：通过监听<code>ChangeNotifier</code>的变化，<code>InheritedNotifier</code>能够高效地更新依赖的Widget。</li><li><strong>减少手动传递状态</strong>：使用<code>InheritedNotifier</code>可以避免手动传递状态，提高代码的可读性和维护性。</li><li><strong>与Flutter组件无缝集成</strong>：<code>InheritedNotifier</code>是Flutter框架的一部分，能够与其他Flutter组件无缝集成。</li></ol><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p><code>InheritedNotifier</code>提供了一种简洁高效的状态管理方式，使得在Flutter中共享和监听状态变得更加容易。通过结合<code>ChangeNotifier</code>和<code>InheritedWidget</code>的功能，<code>InheritedNotifier</code>为开发者提供了强大的工具，用于构建响应式的Flutter应用。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> InheritedNotifier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-InheritedWidge详解</title>
      <link href="/blog/2020/10/08/Flutter-InheritedWidge%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/10/08/Flutter-InheritedWidge%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter中的InheritedWidget详解"><a href="#Flutter中的InheritedWidget详解" class="headerlink" title="Flutter中的InheritedWidget详解"></a>Flutter中的InheritedWidget详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Flutter中，<code>InheritedWidget</code>是实现数据共享的一种机制，主要用于在Widget树中传递数据。它允许子树中的Widget在数据变化时自动更新，从而避免手动传递数据的繁琐。本文将详细介绍<code>InheritedWidget</code>的源码、使用方法以及其优点。</p><h4 id="2-InheritedWidget的概念"><a href="#2-InheritedWidget的概念" class="headerlink" title="2. InheritedWidget的概念"></a>2. InheritedWidget的概念</h4><p><code>InheritedWidget</code>是Flutter框架中的一个特殊Widget，用于将数据在Widget树中传递。它通常与<code>State</code>或<code>ChangeNotifier</code>结合使用，以便在数据发生变化时通知子树中的所有依赖Widget进行重建。</p><h4 id="3-InheritedWidget的源码解析"><a href="#3-InheritedWidget的源码解析" class="headerlink" title="3. InheritedWidget的源码解析"></a>3. InheritedWidget的源码解析</h4><p>以下是<code>InheritedWidget</code>的源码摘录及其注释：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritedWidget</span> <span class="keyword">extends</span> <span class="title">ProxyWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> InheritedWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  InheritedElement createElement() =&gt; InheritedElement(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(<span class="keyword">covariant</span> InheritedWidget oldWidget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InheritedWidget</code>继承自<code>ProxyWidget</code>，并要求实现<code>updateShouldNotify</code>方法，用于确定当数据发生变化时，是否需要通知依赖的Widget进行重建。</p><h4 id="4-InheritedWidget的使用方法"><a href="#4-InheritedWidget的使用方法" class="headerlink" title="4. InheritedWidget的使用方法"></a>4. InheritedWidget的使用方法</h4><p><code>InheritedWidget</code>通常与<code>State</code>或<code>ChangeNotifier</code>结合使用，以便在数据发生变化时通知子树中的所有依赖Widget进行重建。以下是一个完整的示例，展示如何使用<code>InheritedWidget</code>来管理和共享状态。</p><h5 id="4-1-创建一个InheritedWidget"><a href="#4-1-创建一个InheritedWidget" class="headerlink" title="4.1 创建一个InheritedWidget"></a>4.1 创建一个<code>InheritedWidget</code></h5><p>首先，我们创建一个继承自<code>InheritedWidget</code>的类，用于提供状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterInheritedWidget</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> counter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> CounterInheritedWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.counter,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> CounterInheritedWidget? of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.dependOnInheritedWidgetOfExactType&lt;CounterInheritedWidget&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(CounterInheritedWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.counter != counter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-创建一个状态管理类"><a href="#4-2-创建一个状态管理类" class="headerlink" title="4.2 创建一个状态管理类"></a>4.2 创建一个状态管理类</h5><p>接下来，我们创建一个状态管理类，用于管理和更新状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CounterProvider</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> increment() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CounterInheritedWidget(</span><br><span class="line">      counter: counter,</span><br><span class="line">      child: widget.child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-创建一个提供状态的Widget"><a href="#4-3-创建一个提供状态的Widget" class="headerlink" title="4.3 创建一个提供状态的Widget"></a>4.3 创建一个提供状态的Widget</h5><p>然后，我们创建一个提供状态的Widget，用于包裹应用的根Widget。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterProvider</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> CounterProvider(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.child&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  CounterState createState() =&gt; CounterState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-使用InheritedWidget提供状态"><a href="#4-4-使用InheritedWidget提供状态" class="headerlink" title="4.4 使用InheritedWidget提供状态"></a>4.4 使用<code>InheritedWidget</code>提供状态</h5><p>在应用中，我们使用<code>CounterProvider</code>来提供状态，并在子Widget中访问和更新状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CounterProvider(</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        home: Scaffold(</span><br><span class="line">          appBar: AppBar(</span><br><span class="line">            title: Text(<span class="string">&#x27;InheritedWidget Example&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body: Center(</span><br><span class="line">            child: CounterWidget(),</span><br><span class="line">          ),</span><br><span class="line">          floatingActionButton: CounterButton(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> counter = CounterInheritedWidget.of(context)?.counter ?? <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&#x27;Count: <span class="subst">$counter</span>&#x27;</span>,</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">24</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> counterState = context.findAncestorStateOfType&lt;CounterState&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FloatingActionButton(</span><br><span class="line">      onPressed: () =&gt; counterState?.increment(),</span><br><span class="line">      child: Icon(Icons.add),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-InheritedWidget的优点"><a href="#5-InheritedWidget的优点" class="headerlink" title="5. InheritedWidget的优点"></a>5. InheritedWidget的优点</h4><ol><li><strong>简洁的状态共享</strong>：<code>InheritedWidget</code>提供了一种简洁的方式在Widget树中共享状态，而不需要手动传递数据。</li><li><strong>高效的更新机制</strong>：通过<code>updateShouldNotify</code>方法，<code>InheritedWidget</code>能够高效地通知依赖的Widget在数据变化时进行重建。</li><li><strong>灵活的状态管理</strong>：<code>InheritedWidget</code>可以与<code>State</code>或<code>ChangeNotifier</code>结合使用，实现灵活的状态管理。</li><li><strong>提高代码可读性</strong>：使用<code>InheritedWidget</code>可以提高代码的可读性和维护性，因为状态的提供和消费是分离的。</li></ol><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p><code>InheritedWidget</code>提供了一种简洁高效的状态共享和管理方式，使得在Flutter中传递和监听数据变得更加容易。下一期介绍关于InheritedNotifier。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> InheritedWidge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Stream和StreamBuilder</title>
      <link href="/blog/2020/10/03/Flutter-Stream%E5%92%8CStreamBuilder/"/>
      <url>/blog/2020/10/03/Flutter-Stream%E5%92%8CStreamBuilder/</url>
      
        <content type="html"><![CDATA[<p>大家好，今天给大家分享的是Flutter中<code>Stream</code>和<code>StreamBuilder</code>组件的使用及其源码解析。<code>Stream</code>在Flutter中用于处理异步数据流，而<code>StreamBuilder</code>则是一个用于监听<code>Stream</code>并根据最新的数据构建Widget的组件。这两个工具在处理动态数据更新时非常有用。</p><h3 id="一、Stream和StreamBuilder的使用"><a href="#一、Stream和StreamBuilder的使用" class="headerlink" title="一、Stream和StreamBuilder的使用"></a>一、Stream和StreamBuilder的使用</h3><h4 id="1-1-Stream的基本使用"><a href="#1-1-Stream的基本使用" class="headerlink" title="1.1 Stream的基本使用"></a>1.1 Stream的基本使用</h4><p><code>Stream</code>是Dart中的一种异步数据处理方式，它可以接收多个异步事件或数据。以下是一个简单的<code>Stream</code>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  Stream&lt;<span class="built_in">int</span>&gt; stream = countStream(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">for</span> (<span class="built_in">int</span> value <span class="keyword">in</span> stream) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value); <span class="comment">// 输出 0 到 9</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; countStream(<span class="built_in">int</span> max) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-StreamBuilder的基本使用"><a href="#1-2-StreamBuilder的基本使用" class="headerlink" title="1.2 StreamBuilder的基本使用"></a>1.2 StreamBuilder的基本使用</h4><p><code>StreamBuilder</code>是一个Flutter组件，用于监听<code>Stream</code>并根据最新的数据构建Widget。以下是一个<code>StreamBuilder</code>的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;StreamBuilder Example&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: CounterStreamWidget(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterStreamWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Stream&lt;<span class="built_in">int</span>&gt; _counterStream = countStream(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> StreamBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">      stream: _counterStream,</span><br><span class="line">      builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">int</span>&gt; snapshot) &#123;</span><br><span class="line">        <span class="keyword">if</span> (snapshot.connectionState == ConnectionState.waiting) &#123;</span><br><span class="line">          <span class="keyword">return</span> Center(child: CircularProgressIndicator());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">          <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;Error: <span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">          <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;Count: <span class="subst">$&#123;snapshot.data&#125;</span>&#x27;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> Center(child: Text(<span class="string">&#x27;No data&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream&lt;<span class="built_in">int</span>&gt; countStream(<span class="built_in">int</span> max) <span class="keyword">async</span>* &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、源码解析"><a href="#二、源码解析" class="headerlink" title="二、源码解析"></a>二、源码解析</h3><h4 id="2-1-Stream的源码解析"><a href="#2-1-Stream的源码解析" class="headerlink" title="2.1 Stream的源码解析"></a>2.1 Stream的源码解析</h4><p><code>Stream</code>类是Dart的核心库中定义的，用于处理异步数据流。以下是<code>Stream</code>类的部分源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Stream();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听数据流</span></span><br><span class="line">  StreamSubscription&lt;T&gt; listen(<span class="keyword">void</span> <span class="built_in">Function</span>(T event)? onData,</span><br><span class="line">      &#123;<span class="built_in">Function?</span> onError, <span class="keyword">void</span> <span class="built_in">Function</span>()? onDone, <span class="built_in">bool?</span> cancelOnError&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换数据流</span></span><br><span class="line">  Stream&lt;S&gt; map&lt;S&gt;(S <span class="built_in">Function</span>(T event) convert);</span><br><span class="line">  Stream&lt;T&gt; where(<span class="built_in">bool</span> <span class="built_in">Function</span>(T event) test);</span><br><span class="line">  Stream&lt;S&gt; asyncMap&lt;S&gt;(FutureOr&lt;S&gt; <span class="built_in">Function</span>(T event) convert);</span><br><span class="line">  Stream&lt;R&gt; asyncExpand&lt;R&gt;(Stream&lt;R&gt;? <span class="built_in">Function</span>(T event) convert);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并数据流</span></span><br><span class="line">  <span class="keyword">static</span> Stream&lt;T&gt; fromIterable&lt;T&gt;(<span class="built_in">Iterable</span>&lt;T&gt; elements);</span><br><span class="line">  <span class="keyword">static</span> Stream&lt;T&gt; periodic&lt;T&gt;(<span class="built_in">Duration</span> period, [T <span class="built_in">Function</span>(<span class="built_in">int</span> computationCount)? computation]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-Stream的监听和转换"><a href="#2-2-Stream的监听和转换" class="headerlink" title="2.2 Stream的监听和转换"></a>2.2 Stream的监听和转换</h5><ul><li><code>listen</code>方法用于监听数据流。</li><li><code>map</code>、<code>where</code>、<code>asyncMap</code>和<code>asyncExpand</code>方法用于转换数据流。</li><li><code>fromIterable</code>和<code>periodic</code>方法用于创建新的数据流。</li></ul><h4 id="2-3-StreamBuilder的源码解析"><a href="#2-3-StreamBuilder的源码解析" class="headerlink" title="2.3 StreamBuilder的源码解析"></a>2.3 StreamBuilder的源码解析</h4><p><code>StreamBuilder</code>是Flutter中的一个Widget，用于构建依赖于<code>Stream</code>的数据驱动的界面。以下是<code>StreamBuilder</code>的部分源码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamBuilder</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Stream&lt;T&gt;? stream;</span><br><span class="line">  <span class="keyword">final</span> AsyncWidgetBuilder&lt;T&gt; builder;</span><br><span class="line">  <span class="keyword">final</span> T? initialData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> StreamBuilder(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">this</span>.stream,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">    <span class="keyword">this</span>.initialData,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StreamBuilderState&lt;T&gt; createState() =&gt; _StreamBuilderState&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StreamBuilderState</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StreamBuilder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  StreamSubscription&lt;T&gt;? _subscription;</span><br><span class="line">  AsyncSnapshot&lt;T&gt; _snapshot;</span><br><span class="line"></span><br><span class="line">  _StreamBuilderState() : _snapshot = AsyncSnapshot&lt;T&gt;.nothing();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _subscribe();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(StreamBuilder&lt;T&gt; oldWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">    <span class="keyword">if</span> (oldWidget.stream != widget.stream) &#123;</span><br><span class="line">      _unsubscribe();</span><br><span class="line">      _subscribe();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _unsubscribe();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _subscribe() &#123;</span><br><span class="line">    <span class="keyword">if</span> (widget.stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">      _subscription = widget.stream!.listen(</span><br><span class="line">        (T data) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _snapshot = AsyncSnapshot&lt;T&gt;.withData(ConnectionState.active, data);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onError: (<span class="built_in">Object</span> error) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _snapshot = AsyncSnapshot&lt;T&gt;.withError(ConnectionState.active, error);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onDone: () &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _snapshot = _snapshot.inState(ConnectionState.done);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _unsubscribe() &#123;</span><br><span class="line">    _subscription?.cancel();</span><br><span class="line">    _subscription = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> widget.builder(context, _snapshot);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-StreamBuilder的状态管理"><a href="#2-4-StreamBuilder的状态管理" class="headerlink" title="2.4 StreamBuilder的状态管理"></a>2.4 StreamBuilder的状态管理</h5><ul><li><code>initState</code>方法用于初始化状态并订阅<code>Stream</code>。</li><li><code>didUpdateWidget</code>方法用于处理Widget更新时的逻辑。</li><li><code>dispose</code>方法用于清理资源，取消订阅。</li><li><code>_subscribe</code>方法用于订阅<code>Stream</code>并更新状态。</li><li><code>_unsubscribe</code>方法用于取消订阅。</li></ul><h3 id="三、Stream和StreamBuilder的优点"><a href="#三、Stream和StreamBuilder的优点" class="headerlink" title="三、Stream和StreamBuilder的优点"></a>三、Stream和StreamBuilder的优点</h3><ol><li><strong>简洁易用</strong>：<code>Stream</code>和<code>StreamBuilder</code>提供了简单而强大的API，用于处理异步数据流和构建响应式界面。</li><li><strong>高效的状态管理</strong>：通过<code>StreamBuilder</code>，可以轻松实现数据驱动的界面更新，避免手动管理状态。</li><li><strong>灵活的组合方式</strong>：<code>Stream</code>提供了丰富的转换和合并方法，使得数据流的处理变得灵活多样。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，今天分享的内容是Flutter中<code>Stream</code>和<code>StreamBuilder</code>组件的使用及其源码解析。通过理解<code>Stream</code>的工作原理和事件循环机制，以及<code>StreamBuilder</code>的实现细节，我们可以更好地利用这些工具编写高性能、响应迅速的Flutter应用。<a href="mailto:&#103;&#x32;&#51;&#x32;&#50;&#50;&#50;&#x32;&#50;&#x32;&#51;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#103;&#x32;&#51;&#x32;&#50;&#50;&#50;&#x32;&#50;&#x32;&#51;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a>,如果需要进一步修改或补充，请随时告诉我！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter构建APK-IPA配置</title>
      <link href="/blog/2020/09/16/Flutter%E6%9E%84%E5%BB%BAAPK-IPA%E9%85%8D%E7%BD%AE/"/>
      <url>/blog/2020/09/16/Flutter%E6%9E%84%E5%BB%BAAPK-IPA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter编译安卓-iOS命令"><a href="#Flutter编译安卓-iOS命令" class="headerlink" title="Flutter编译安卓&#x2F;iOS命令"></a>Flutter编译安卓&#x2F;iOS命令</h1><h2 id="一、Flutter打包编译命令"><a href="#一、Flutter打包编译命令" class="headerlink" title="一、Flutter打包编译命令"></a>一、Flutter打包编译命令</h2><p>Flutter 提供了简单而灵活的编译命令，能够编译安卓 APK、安卓 AppBundle 和 iOS IPA。以下是详细的编译命令和示例。</p><h3 id="1、编译安卓-APK"><a href="#1、编译安卓-APK" class="headerlink" title="1、编译安卓 APK"></a>1、编译安卓 APK</h3><p>使用 <code>flutter build apk</code> 命令可以编译安卓 APK 文件。以下是一个编译 debug 版本的示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flutter build apk --debug --flavor beta --build-number=1 --build-name=0.1.0</span><br></pre></td></tr></table></figure><h3 id="2、编译安卓-AppBundle"><a href="#2、编译安卓-AppBundle" class="headerlink" title="2、编译安卓 AppBundle"></a>2、编译安卓 AppBundle</h3><p>安卓 AppBundle 是一种新的应用发布格式，它能够更好地优化应用的大小和性能。使用 <code>flutter build appbundle</code> 命令可以编译安卓 AppBundle：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flutter build appbundle --release --flavor production --build-number=1 --build-name=1.0.0</span><br></pre></td></tr></table></figure><h3 id="3、编译iOS-IPA"><a href="#3、编译iOS-IPA" class="headerlink" title="3、编译iOS IPA"></a>3、编译iOS IPA</h3><p>编译 iOS 应用需要在 macOS 上进行，并且需要配置 Xcode。使用 <code>flutter build ios</code> 命令可以编译 iOS 应用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flutter build ios --release --no-codesign</span><br></pre></td></tr></table></figure><h2 id="二、Flutter打包编译命令配合Jenkins使用"><a href="#二、Flutter打包编译命令配合Jenkins使用" class="headerlink" title="二、Flutter打包编译命令配合Jenkins使用"></a>二、Flutter打包编译命令配合Jenkins使用</h2><p>在实际开发中，常常需要将 Flutter 编译命令集成到 CI&#x2F;CD 流程中，例如 Jenkins。以下是一个简单的 Jenkins Pipeline 配置示例，用于自动化编译 Flutter 应用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">groovypipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Checkout&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git &#x27;https://github.com/your-repository.git&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Build APK&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;flutter clean&#x27;</span><br><span class="line">                sh &#x27;flutter pub get&#x27;</span><br><span class="line">                sh &#x27;flutter build apk --release&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Build AppBundle&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;flutter clean&#x27;</span><br><span class="line">                sh &#x27;flutter pub get&#x27;</span><br><span class="line">                sh &#x27;flutter build appbundle --release&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Build iOS&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;flutter clean&#x27;</span><br><span class="line">                sh &#x27;flutter pub get&#x27;</span><br><span class="line">                sh &#x27;flutter build ios --release --no-codesign&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、编译问题处理"><a href="#三、编译问题处理" class="headerlink" title="三、编译问题处理"></a>三、编译问题处理</h2><h3 id="1、处理build-apk时安卓应用版本versionCode自动加1000问题"><a href="#1、处理build-apk时安卓应用版本versionCode自动加1000问题" class="headerlink" title="1、处理build apk时安卓应用版本versionCode自动加1000问题"></a>1、处理build apk时安卓应用版本versionCode自动加1000问题</h3><p>在编译过程中，可能会遇到版本号自动增加的问题。以下是一个具体的案例及其解决方案。</p><h4 id="1、编译的结果"><a href="#1、编译的结果" class="headerlink" title="1、编译的结果"></a>1、编译的结果</h4><p>编译命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flutter build apk --debug --flavor beta --build-number=1 --build-name=0.1.0</span><br></pre></td></tr></table></figure><p>编译出来的结果发现 versionCode 加了 1000。</p><h4 id="2、原因分析"><a href="#2、原因分析" class="headerlink" title="2、原因分析"></a>2、原因分析</h4><p>经过分析 Flutter 编译脚本 <code>android/app/build.gradle</code>，发现引入了下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gradleif (project.android.defaultConfig.versionCode == null) &#123;</span><br><span class="line">    project.android.defaultConfig.versionCode = project.flutter.versionCode + 1000</span><br><span class="line">&#125; else if (project.android.defaultConfig.versionCode == 1) &#123;</span><br><span class="line">    // Do not increment the version code if the default version code is 1</span><br><span class="line">    // This is the default value and it will be incremented by flutter as needed.</span><br><span class="line">&#125; else if (project.android.defaultConfig.versionCode &gt; project.flutter.versionCode) &#123;</span><br><span class="line">    project.logger.error(&quot;Warning! The &#x27;android.defaultConfig.versionCode&#x27; property is higher than &quot;</span><br><span class="line">        + &quot;&#x27;flutter.versionCode&#x27;. This is not recommended and might cause problems. See &quot;</span><br><span class="line">        + &quot;https://github.com/flutter/flutter/issues/53919 for more details.&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、处理方案"><a href="#3、处理方案" class="headerlink" title="3、处理方案"></a>3、处理方案</h4><p>在 <code>android/app/build.gradle</code> 文件中，<code>android</code> 层级下，添加如下内容以覆盖自动增加的 <code>versionCode</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gradleandroid &#123;</span><br><span class="line">    ...</span><br><span class="line">    applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        variant.outputs.each &#123; output -&gt;</span><br><span class="line">            output.versionCodeOverride = variant.versionCode</span><br><span class="line">            println &quot;&gt; versionCode: $&#123;variant.versionCode&#125;, flutterVersionCode: $&#123;project.flutter.versionCode&#125;, versionCodeOverride: $&#123;output.versionCodeOverride&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置版本控制"><a href="#配置版本控制" class="headerlink" title="配置版本控制"></a>配置版本控制</h3><p>默认情况下，当 Gradle 生成多个 APK 时，每个 APK 都有相同的版本信息，该信息在模块级 <code>build.gradle</code> 文件中指定。由于 Google Play 商店不允许同一个应用的多个 APK 全都具有相同的版本信息，因此在上传到 Play 商店之前，需要确保每个 APK 都有自己唯一的 <code>versionCode</code>。</p><p>可以配置模块级 <code>build.gradle</code> 文件以替换每个 APK 的 <code>versionCode</code>。通过创建一种映射关系来配置了多 APK 构建的每种 ABI 和密度分配一个唯一的数值，可以将输出版本代码替换为一个将在 <code>defaultConfig</code> 或 <code>productFlavors</code> 代码块中定义的版本代码与分配给相应密度或 ABI 的数值组合在一起的值。</p><p>在以下示例中，<code>x86</code> ABI 的 APK 的 <code>versionCode</code> 将为 2004，<code>x86_64</code> ABI 的 APK 的版本代码将为 3004。如果以较大的增量（如 1000）分配版本代码，那么以后需要更新应用时，就可以分配唯一的版本代码。例如，如果 <code>defaultConfig.versionCode</code> 在后续更新中迭代到 5，那么 Gradle 为 <code>x86</code> APK 分配的 <code>versionCode</code> 将为 2005，为 <code>x86_64</code> APK 分配的版本代码将为 3005。</p><p><strong>提示</strong>：如果 build 包含一个通用 APK，为其分配的 <code>versionCode</code> 应低于为其他任何 APK 分配的版本代码。由于 Google Play 商店会安装既与目标设备兼容又具有最高 <code>versionCode</code> 的应用版本，因此为通用 APK 分配一个较低的 <code>versionCode</code> 可以确保 Google Play 商店在回退到通用 APK 之前先尝试安装某个 APK。以下示例代码的处理方式是不替换通用 APK 的默认 <code>versionCode</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gradleandroid &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        versionCode 4</span><br><span class="line">    &#125;</span><br><span class="line">    splits &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Map for the version code that gives each ABI a value.</span><br><span class="line">ext.abiCodes = [&#x27;armeabi-v7a&#x27;: 1, x86: 2, x86_64: 3]</span><br></pre></td></tr></table></figure><p>如需查看备用版本代码方案的更多示例，请参阅<a href="https://developer.android.com/google/play/publishing/multiple-apks?hl=zh-cn#VersionCodes">分配版本代码</a>。</p><p>总结：Flutter 在打包的时候会通过以下代码来处理版本号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gradleif (project.android.defaultConfig.versionCode == null) &#123;</span><br><span class="line">    project.android.defaultConfig.versionCode = project.flutter.versionCode + 1000</span><br><span class="line">&#125; else if (project.android.defaultConfig.versionCode == 1) &#123;</span><br><span class="line">    // Do not increment the version code if the default version code is 1</span><br><span class="line">    // This is the default value and it will be incremented by flutter as needed.</span><br><span class="line">&#125; else if (project.android.defaultConfig.versionCode &gt; project.flutter.versionCode) &#123;</span><br><span class="line">    project.logger.error(&quot;Warning! The &#x27;android.defaultConfig.versionCode&#x27; property is higher than &quot;</span><br><span class="line">        + &quot;&#x27;flutter.versionCode&#x27;. This is not recommended and might cause problems. See &quot;</span><br><span class="line">        + &quot;https://github.com/flutter/flutter/issues/53919 for more details.&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>android.defaultConfig.versionCode</code> 未设置，那么 Flutter 会使用 <code>flutter.versionCode + 1000</code> 作为版本代码。 如果 <code>android.defaultConfig.versionCode</code> 设置为 1（默认值），则 Flutter 会按需自动增加它。 如果 <code>android.defaultConfig.versionCode</code> 大于 <code>flutter.versionCode</code>，则会输出一个警告。</p><p>因此，如果当前是 arm32 位的包，会自动添加 1000 + version:1.0.0+1，即 1001 的版本号；如果是 arm64 位的包，会自动添加 2000 + version:1.0.0+1，即 2001 的版本号。如果打通用的包，最好要少于 arm32 最低版本号 1001。</p><hr><p>以上就是关于Flutter打包构建Android和IOS的包内容。希望本文对你有所帮助，如果有任何疑问或建议，欢迎在评论区交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> APK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 常用命令</title>
      <link href="/blog/2020/08/18/Flutter-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/08/18/Flutter-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>查看具体命令帮助信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter help &lt;command&gt;&lt;/command&gt;</span><br></pre></td></tr></table></figure><p>查看flutter SDK所有分支</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter channel</span><br></pre></td></tr></table></figure><p>切换分支（例如切换到stable分支）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter channel stable</span><br></pre></td></tr></table></figure><p>flutter环境诊断</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>查看详细信息</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor -v</span><br></pre></td></tr></table></figure><p>flutter版本升级</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter upgrade</span><br></pre></td></tr></table></figure><p>获取项目所有的依赖包</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure><p>获取项目所有依赖包的最新版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages upgrade</span><br></pre></td></tr></table></figure><p>添加第三方（例如添加xmpp_plugin）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add xmpp_plugin</span><br></pre></td></tr></table></figure><p>获取第三方包依赖</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub get</span><br></pre></td></tr></table></figure><p>清缓存</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter clean</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>列出所有连接的设备</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter devices</span><br></pre></td></tr></table></figure><p>运行项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>显示系统日志运行</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run --verbose-system-logs</span><br></pre></td></tr></table></figure><p>指定设备运行项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d &#x27;iPhone Xʀ&#x27;</span><br></pre></td></tr></table></figure><p>运行在所有可用设备上</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d all</span><br></pre></td></tr></table></figure><p>查看可用模拟器</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter emulators</span><br></pre></td></tr></table></figure><p>启动iOS模拟器</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter emulators --launch apple_ios_simulator</span><br></pre></td></tr></table></figure><p>启动Android 模拟器-只有启动模拟器才可以运行</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter emulators --launch Nexus_5X_API_27</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d emulator-5554</span><br></pre></td></tr></table></figure><p>运行IOS真机</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d 00008020-001838491169002E</span><br></pre></td></tr></table></figure><p>查看日志</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter logs</span><br></pre></td></tr></table></figure><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>创建项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_app</span><br></pre></td></tr></table></figure><p>指定语言：默认Android使用Java，iOS使用Objective-C</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create -i swift -a kotlin flutter_app</span><br></pre></td></tr></table></figure><p>创建混编项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create -t module flutter_module</span><br></pre></td></tr></table></figure><p>旧项目新增平台支持</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create --platforms=windows,macos,linux .</span><br></pre></td></tr></table></figure><p>开启平台</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --enable-web true</span><br></pre></td></tr></table></figure><p>关闭平台（关闭后可以删除项目中对应的平台目录文件夹）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --no-enable-web</span><br></pre></td></tr></table></figure><p>开启和关闭平台后都需要使用命令重新构建下项目（最好都关闭项目然后在终端中cd到当前项目目录后执行命令）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create .</span><br></pre></td></tr></table></figure><p> 如果报错的话用下面这个(上面的旧项目新增平台的命令如果报错也可以试试这个命令)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create --org package_name .</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>分析代码</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter analyze</span><br></pre></td></tr></table></figure><p>构建iOS</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build ios</span><br></pre></td></tr></table></figure><p>安卓打包</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build apk</span><br></pre></td></tr></table></figure><p>iOS打包，运行命令后在xcode中打包</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build ios --release</span><br></pre></td></tr></table></figure><p>打包web，文件在build目录下</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build web</span><br></pre></td></tr></table></figure><p>截图</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter screenshot</span><br></pre></td></tr></table></figure><p>清除插件缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub cache repair</span><br></pre></td></tr></table></figure><p>创建插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create --org com.example --template=plugin --platforms=android,ios,linux,macos,windows -a kotlin project-name</span><br></pre></td></tr></table></figure><p>安卓打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#arm64</span><br><span class="line">flutter build apk --release --split-per-abi --build-number=1 --build-name=wuhope --tree-shake-icons --analyze-size --target-platform=android-arm64</span><br><span class="line"></span><br><span class="line">#x86</span><br><span class="line">flutter build apk --release --split-per-abi --build-number=1 --build-name=wuhope --tree-shake-icons --analyze-size --target-platform=android-x64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(六)Dialog为什么不能用Application的Context</title>
      <link href="/blog/2020/07/10/Android-Framework-%E5%85%AD-Dialog%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E7%94%A8Application%E7%9A%84Context/"/>
      <url>/blog/2020/07/10/Android-Framework-%E5%85%AD-Dialog%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E7%94%A8Application%E7%9A%84Context/</url>
      
        <content type="html"><![CDATA[<p>为什么Dialog不能用Application的Context？</p><ol><li><p>简介<br>在Android开发中，Context是一个非常重要的类，提供了应用环境的信息。它可以分为两种主要类型：Application Context和Activity Context。虽然这两种Context都可以用于许多操作，但在创建Dialog时，使用Application Context会导致错误。本文将详细分析原因，并结合源码进行解释。</p></li><li><p>Context概述<br>Context在Android中扮演着重要角色，它提供了访问资源、启动组件和应用级操作的接口。主要有两种类型：</p></li></ol><p>Application Context：与应用的生命周期相关，应用的整个生命周期内存在，适合用于全局资源访问和单例模式。<br>Activity Context：与Activity的生命周期相关，只有在Activity存在期间有效，适合用于UI相关的操作，如创建Dialog和Toast等。<br>3. Dialog的创建<br>在Android中，Dialog是一个弹出窗口，显示在当前Activity的顶层，用于向用户展示重要信息或获取用户输入。创建Dialog时，需要传入一个Context参数。</p><p>java</p><p>public Dialog(@NonNull Context context) {<br>    this(context, 0);<br>}<br>3.1 使用Application Context创建Dialog的问题<br>当使用Application Context创建Dialog时，会遇到WindowManager$BadTokenException异常。这是因为Application Context缺乏创建窗口所需的WindowToken，而WindowToken是与Activity的窗口相关联的。</p><ol start="4"><li>源码分析<br>以下是Dialog相关的源码分析及详细。</li></ol><p>4.1 Dialog.java<br>java</p><p>public class Dialog implements DialogInterface {<br>    final Context mContext;<br>    final WindowManager mWindowManager;<br>    final Window mWindow;</p><pre><code>public Dialog(@NonNull Context context) &#123;    this(context, 0);&#125;public Dialog(@NonNull Context context, @StyleRes int themeResId) &#123;    mContext = context;    mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);    // 创建Window实例    mWindow = new PhoneWindow(context);&#125;public void show() &#123;    // 获取Window的LayoutParams    WindowManager.LayoutParams l = mWindow.getAttributes();    // 设置Window的类型    l.type = WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;    // 添加Window    mWindowManager.addView(mDecor, l);&#125;</code></pre><p>}<br>4.2 PhoneWindow.java<br>PhoneWindow是Dialog创建的窗口类，负责管理窗口的布局和显示。</p><p>java</p><p>public class PhoneWindow extends Window {<br>    private DecorView mDecor;</p><pre><code>public PhoneWindow(Context context) &#123;    super(context);    // 初始化DecorView    mDecor = generateDecor();&#125;protected DecorView generateDecor() &#123;    return new DecorView(getContext(), -1);&#125;</code></pre><p>}<br>4.3 WindowManagerImpl.java<br>WindowManagerImpl是WindowManager的具体实现类，负责管理窗口的添加、更新和移除。</p><p>java</p><p>public final class WindowManagerImpl implements WindowManager {<br>    private final WindowManagerGlobal mGlobal &#x3D; WindowManagerGlobal.getInstance();</p><pre><code>@Overridepublic void addView(View view, ViewGroup.LayoutParams params) &#123;    applyDefaultToken(params);    mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow);&#125;private void applyDefaultToken(ViewGroup.LayoutParams params) &#123;    if (mDefaultToken != null &amp;&amp; params instanceof WindowManager.LayoutParams) &#123;        WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;        if (wparams.token == null) &#123;            wparams.token = mDefaultToken;        &#125;    &#125;&#125;</code></pre><p>}<br>4.4 WindowManagerGlobal.java<br>WindowManagerGlobal是一个单例类，负责与WindowManagerService进行通信。</p><p>java</p><p>public final class WindowManagerGlobal {<br>    private static final WindowManagerGlobal sDefaultWindowManager &#x3D; new WindowManagerGlobal();</p><pre><code>public static WindowManagerGlobal getInstance() &#123;    return sDefaultWindowManager;&#125;public void addView(View view, ViewGroup.LayoutParams params, Display display, Window parentWindow) &#123;    // 检查WindowToken是否有效    if (params instanceof WindowManager.LayoutParams) &#123;        WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;        if (wparams.token == null) &#123;            throw new WindowManager.BadTokenException(&quot;Unable to add window -- token null is not for an application&quot;);        &#125;    &#125;    // 添加View到Window    ViewRootImpl root = new ViewRootImpl(view.getContext(), display);    root.setView(view, params, parentWindow);&#125;</code></pre><p>}<br>5. 分析与结论<br>5.1 Application Context与Activity Context的区别<br>生命周期：Application Context的生命周期与应用相关，而Activity Context的生命周期与Activity相关。<br>WindowToken：Activity Context拥有与Activity窗口相关的WindowToken，而Application Context没有。<br>UI操作：Activity Context适合用于UI相关的操作，如创建Dialog、Toast等，而Application Context不适合。<br>5.2 为什么Dialog不能用Application Context<br>缺乏WindowToken：Dialog依赖于Activity的WindowToken，而Application Context没有WindowToken，导致在使用Application Context创建Dialog时会抛出WindowManager$BadTokenException异常。<br>窗口管理：Dialog需要添加到Activity的窗口中进行管理，使用Application Context无法满足这一需求。<br>6. 解决方案<br>在创建Dialog时，应始终使用Activity Context，而不是Application Context。确保传入的Context是Activity实例的上下文，以避免WindowToken相关的问题。</p><p>java</p><p>public class MainActivity extends AppCompatActivity {<br>    @Override<br>    protected void onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);</p><pre><code>    // 使用Activity Context创建Dialog    AlertDialog.Builder builder = new AlertDialog.Builder(this);    builder.setTitle(&quot;提示&quot;);    builder.setMessage(&quot;这是一个Dialog&quot;);    builder.setPositiveButton(&quot;确定&quot;, null);    builder.create().show();&#125;</code></pre><p>}<br>7. 总结<br>通过本文的详细分析，我们了解了为什么在创建Dialog时不能使用Application Context。主要原因在于Application Context缺乏创建窗口所需的WindowToken，而Dialog需要与Activity的窗口进行交互和管理。因此，创建Dialog时应始终使用Activity Context。理解这一点对于编写健壮的Android应用程序具有重要意义,如果有其他问题,欢迎在评论一起互动交流。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(五)AMS启动流程</title>
      <link href="/blog/2020/06/29/Android-Framework-%E4%BA%94-AMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/blog/2020/06/29/Android-Framework-%E4%BA%94-AMS%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Android AMS启动流程详解</p><ol><li><p>简介<br>Activity Manager Service（AMS）是Android系统中负责管理应用进程、Activity、任务和堆栈等的核心服务。AMS在系统启动时由SystemServer进程初始化，并作为系统的守护进程，管理和调度应用的启动、切换和资源分配。本文将详细介绍AMS的启动流程，并结合源码进行深入分析。</p></li><li><p>AMS启动流程概述<br>AMS的启动流程可以分为以下几个步骤：</p></li></ol><p>启动SystemServer进程：Zygote进程fork出SystemServer进程。<br>初始化SystemServer：SystemServer进程启动并初始化各个系统服务。<br>启动AMS：SystemServer进程初始化AMS并将其注册到ServiceManager。<br>2.1 启动SystemServer进程<br>SystemServer进程由Zygote进程通过fork创建。Zygote进程是Android系统中第一个进程，由init进程启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 启动SystemServer进程</span></span><br><span class="line">        startSystemServer();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;SystemServer startup failed&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">startSystemServer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/* 省略部分代码 */</span></span><br><span class="line">    <span class="comment">// 准备fork SystemServer进程的参数</span></span><br><span class="line">    String args[] = &#123;</span><br><span class="line">        <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--setgroups=3003,1028,1015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--capabilities=&quot;</span> + capabilities,</span><br><span class="line">        <span class="string">&quot;--runtime-init&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--nice-name=system_server&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.android.server.SystemServer&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fork出SystemServer进程</span></span><br><span class="line">    ZygoteConnection.<span class="type">Arguments</span> <span class="variable">parsedArgs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZygoteConnection</span>.Arguments(args);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> Zygote.forkSystemServer(</span><br><span class="line">        parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">        parsedArgs.runtimeFlags, <span class="literal">null</span>, parsedArgs.permittedCapabilities,</span><br><span class="line">        parsedArgs.effectiveCapabilities);</span><br><span class="line">    <span class="comment">/* 省略部分代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 初始化SystemServer<br>SystemServer进程启动后，调用SystemServer类的main方法进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化本地服务</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;android_servers&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化系统上下文</span></span><br><span class="line">        createSystemContext();</span><br><span class="line">        <span class="comment">// 启动系统服务</span></span><br><span class="line">        startBootstrapServices();</span><br><span class="line">        startCoreServices();</span><br><span class="line">        startOtherServices();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">&quot;SystemServer run failed&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 启动AMS<br>在startBootstrapServices方法中，初始化AMS并将其注册到ServiceManager。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startBootstrapServices</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 启动Activity Manager Service</span></span><br><span class="line">    <span class="type">ActivityManagerService</span> <span class="variable">mActivityManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityManagerService</span>();</span><br><span class="line">    ServiceManager.addService(Context.ACTIVITY_SERVICE, mActivityManagerService);</span><br><span class="line">    mActivityManagerService.initPowerManagement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>AMS的启动流程<br>AMS的启动流程主要分为以下几个步骤：</li></ol><p>创建AMS实例：SystemServer进程创建AMS实例。<br>注册AMS服务：将AMS注册到ServiceManager。<br>初始化AMS：AMS进行内部初始化，包括创建ActivityStackSupervisor等。<br>3.1 创建AMS实例<br>在SystemServer类的startBootstrapServices方法中，创建AMS实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title class_">IActivityManager</span>.Stub &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActivityManagerService mSelf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActivityManagerService <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mSelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ActivityManagerService</span><span class="params">()</span> &#123;</span><br><span class="line">        mSelf = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 注册AMS服务<br>将AMS实例注册到ServiceManager，使得系统其他部分可以通过Binder机制访问AMS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ServiceManager.addService(Context.ACTIVITY_SERVICE, mActivityManagerService);</span><br></pre></td></tr></table></figure><p>ServiceManager的addService方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(String name, IBinder service)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getIServiceManager().addService(name, service, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;addService failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 初始化AMS<br>AMS在构造方法中进行内部初始化，包括创建ActivityStackSupervisor等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ActivityManagerService</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mHandlerThread = <span class="keyword">new</span> <span class="title class_">ServiceThread</span>(TAG,</span><br><span class="line">            THREAD_PRIORITY_DEFAULT, <span class="literal">false</span> <span class="comment">/*allowIo*/</span>);</span><br><span class="line">    mHandlerThread.start();</span><br><span class="line">    mHandler = <span class="keyword">new</span> <span class="title class_">ActivityManagerHandler</span>(mHandlerThread.getLooper());</span><br><span class="line">    mActivityTaskManager = <span class="keyword">new</span> <span class="title class_">ActivityTaskManagerService</span>(context, <span class="built_in">this</span>);</span><br><span class="line">    mStackSupervisor = mActivityTaskManager.getStackSupervisor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>源码分析<br>以下是AMS启动相关核心代码的详细分析及。</li></ol><p>4.1 ZygoteInit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZygoteInit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动SystemServer进程</span></span><br><span class="line">            startSystemServer();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;SystemServer startup failed&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">startSystemServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* 省略部分代码 */</span></span><br><span class="line">        <span class="comment">// 准备fork SystemServer进程的参数</span></span><br><span class="line">        String args[] = &#123;</span><br><span class="line">            <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--setgroups=3003,1028,1015&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--capabilities=&quot;</span> + capabilities,</span><br><span class="line">            <span class="string">&quot;--runtime-init&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--nice-name=system_server&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.android.server.SystemServer&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fork出SystemServer进程</span></span><br><span class="line">        ZygoteConnection.<span class="type">Arguments</span> <span class="variable">parsedArgs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZygoteConnection</span>.Arguments(args);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> Zygote.forkSystemServer(</span><br><span class="line">            parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">            parsedArgs.runtimeFlags, <span class="literal">null</span>, parsedArgs.permittedCapabilities,</span><br><span class="line">            parsedArgs.effectiveCapabilities);</span><br><span class="line">        <span class="comment">/* 省略部分代码 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 SystemServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化本地服务</span></span><br><span class="line">            System.loadLibrary(<span class="string">&quot;android_servers&quot;</span>);</span><br><span class="line">            <span class="comment">// 初始化系统上下文</span></span><br><span class="line">            createSystemContext();</span><br><span class="line">            <span class="comment">// 启动系统服务</span></span><br><span class="line">            startBootstrapServices();</span><br><span class="line">            startCoreServices();</span><br><span class="line">            startOtherServices();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;SystemServer run failed&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startBootstrapServices</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 启动Activity Manager Service</span></span><br><span class="line">        <span class="type">ActivityManagerService</span> <span class="variable">mActivityManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityManagerService</span>();</span><br><span class="line">        ServiceManager.addService(Context.ACTIVITY_SERVICE, mActivityManagerService);</span><br><span class="line">        mActivityManagerService.initPowerManagement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.3 ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerService</span> <span class="keyword">extends</span> <span class="title class_">IActivityManager</span>.Stub &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActivityManagerService mSelf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActivityManagerService <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mSelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ActivityManagerService</span><span class="params">()</span> &#123;</span><br><span class="line">        mSelf = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ActivityManagerService</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mHandlerThread = <span class="keyword">new</span> <span class="title class_">ServiceThread</span>(TAG,</span><br><span class="line">                THREAD_PRIORITY_DEFAULT, <span class="literal">false</span> <span class="comment">/*allowIo*/</span>);</span><br><span class="line">        mHandlerThread.start();</span><br><span class="line">        mHandler = <span class="keyword">new</span> <span class="title class_">ActivityManagerHandler</span>(mHandlerThread.getLooper());</span><br><span class="line">        mActivityTaskManager = <span class="keyword">new</span> <span class="title class_">ActivityTaskManagerService</span>(context, <span class="built_in">this</span>);</span><br><span class="line">        mStackSupervisor = mActivityTaskManager.getStackSupervisor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initPowerManagement</span><span class="params">()</span> &#123;</span><br><span class="line">        mPowerManagerInternal = LocalServices.getService(PowerManagerInternal.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.4 ServiceManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(String name, IBinder service)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getIServiceManager().addService(name, service, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;addService failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title function_">getIServiceManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sServiceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sServiceManager;</span><br><span class="line">        &#125;</span><br><span class="line">        sServiceManager = ServiceManagerNative.asInterface(</span><br><span class="line">                Binder.allowBlocking(</span><br><span class="line">                        BinderInternal.getContextObject()));</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>AMS启动流程总结<br>启动SystemServer进程：Zygote进程通过fork创建SystemServer进程。<br>初始化SystemServer：SystemServer进程启动并初始化各个系统服务，包括AMS。<br>创建AMS实例：SystemServer进程创建AMS实例。<br>注册AMS服务：将AMS实例注册到ServiceManager，使得系统其他部分可以通过Binder机制访问AMS。<br>初始化AMS：AMS进行内部初始化，包括创建ActivityStackSupervisor等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(二)Zygote</title>
      <link href="/blog/2020/06/06/Android-Framework-%E4%BA%8C-Zygote/"/>
      <url>/blog/2020/06/06/Android-Framework-%E4%BA%8C-Zygote/</url>
      
        <content type="html"><![CDATA[<h3 id="Android-Zygote进程启动流程详解"><a href="#Android-Zygote进程启动流程详解" class="headerlink" title="Android Zygote进程启动流程详解"></a>Android Zygote进程启动流程详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>Zygote进程是Android系统中的一个重要进程，负责孵化（fork）应用进程。Zygote进程通过预加载常用类和资源，减少应用启动时间，提高系统性能。本文将详细介绍Zygote进程的启动流程，结合源码进行深入分析。</p><h4 id="2-Zygote进程的启动流程"><a href="#2-Zygote进程的启动流程" class="headerlink" title="2. Zygote进程的启动流程"></a>2. Zygote进程的启动流程</h4><p>Zygote进程的启动流程可以分为以下几个步骤：</p><ol><li><strong>初始化虚拟机</strong>：加载并初始化虚拟机。</li><li><strong>启动Zygote进程</strong>：通过<code>init</code>进程启动Zygote进程。</li><li><strong>预加载类和资源</strong>：Zygote进程预加载常用类和资源。</li><li><strong>进入等待循环</strong>：Zygote进程进入等待循环，等待AMS（Activity Manager Service）的请求，fork新进程。</li></ol><h5 id="2-1-初始化虚拟机"><a href="#2-1-初始化虚拟机" class="headerlink" title="2.1 初始化虚拟机"></a>2.1 初始化虚拟机</h5><p>Zygote进程的启动首先需要初始化虚拟机。虚拟机初始化在<code>com.android.internal.os.ZygoteInit</code>类的<code>main</code>方法中进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化虚拟机</span></span><br><span class="line">        RuntimeInit.preForkInit();</span><br><span class="line">        <span class="comment">// 启动Zygote进程</span></span><br><span class="line">        zygoteInit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Zygote died with exception&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RuntimeInit.preForkInit</code>方法负责初始化虚拟机环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preForkInit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载JNI库</span></span><br><span class="line">    System.loadLibrary(<span class="string">&quot;android_runtime&quot;</span>);</span><br><span class="line">    <span class="comment">// 初始化一些系统属性</span></span><br><span class="line">    Zygote.nativePreFork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-启动Zygote进程"><a href="#2-2-启动Zygote进程" class="headerlink" title="2.2 启动Zygote进程"></a>2.2 启动Zygote进程</h5><p>Zygote进程由<code>init</code>进程启动，<code>init</code>进程读取<code>init.rc</code>脚本文件来启动Zygote进程。</p><p><code>init.rc</code>脚本中的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">perl</span><br><span class="line"></span><br><span class="line">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    class main</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    critical</span><br><span class="line">    socket zygote stream 660 root system</span><br><span class="line">    onrestart restart zygote_secondary</span><br></pre></td></tr></table></figure><h5 id="2-3-预加载类和资源"><a href="#2-3-预加载类和资源" class="headerlink" title="2.3 预加载类和资源"></a>2.3 预加载类和资源</h5><p>在Zygote进程启动后，进行类和资源的预加载。预加载的目的是减少应用启动时间，提高系统性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zygoteInit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 预加载类</span></span><br><span class="line">    preloadClasses();</span><br><span class="line">    <span class="comment">// 预加载资源</span></span><br><span class="line">    preloadResources();</span><br><span class="line">    <span class="comment">// 预加载OpenGL</span></span><br><span class="line">    preloadOpenGL();</span><br><span class="line">    <span class="comment">// 进入等待循环</span></span><br><span class="line">    runSelectLoop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preloadClasses</code>方法加载常用类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preloadClasses</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 读取预加载类的列表</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PRELOADED_CLASSES);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is), <span class="number">256</span>);</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 加载类</span></span><br><span class="line">        Class.forName(line);</span><br><span class="line">    &#125;</span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preloadResources</code>方法加载资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preloadResources</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 读取预加载资源的列表</span></span><br><span class="line">    <span class="type">AssetManager</span> <span class="variable">assets</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AssetManager</span>();</span><br><span class="line">    assets.addAssetPath(<span class="string">&quot;/system/framework/framework-res.apk&quot;</span>);</span><br><span class="line">    <span class="comment">// 加载资源</span></span><br><span class="line">    <span class="type">Resources</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resources</span>(assets, <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>(), <span class="literal">null</span>);</span><br><span class="line">    res.getValue(R.drawable.some_resource, <span class="keyword">new</span> <span class="title class_">TypedValue</span>(), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-进入等待循环"><a href="#2-4-进入等待循环" class="headerlink" title="2.4 进入等待循环"></a>2.4 进入等待循环</h5><p>Zygote进程在预加载完成后进入等待循环，等待AMS的请求，fork新进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runSelectLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待请求</span></span><br><span class="line">        <span class="type">ZygoteConnection</span> <span class="variable">connection</span> <span class="operator">=</span> acceptCommandPeer();</span><br><span class="line">        <span class="comment">// 处理请求</span></span><br><span class="line">        connection.runOnce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acceptCommandPeer</code>方法等待请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ZygoteConnection <span class="title function_">acceptCommandPeer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        FileDescriptor[] descriptors = <span class="keyword">new</span> <span class="title class_">FileDescriptor</span>[<span class="number">1</span>];</span><br><span class="line">        socket.accept(descriptors);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZygoteConnection</span>(descriptors[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;IOException during accept()&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runOnce</code>方法处理请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">runOnce</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 读取请求</span></span><br><span class="line">    <span class="type">Arguments</span> <span class="variable">arguments</span> <span class="operator">=</span> readArgumentList();</span><br><span class="line">    <span class="comment">// fork新进程</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> Zygote.forkAndSpecialize(arguments.uid, arguments.gid, arguments.gids, arguments.runtimeFlags, arguments.mountExternal, arguments.seInfo, arguments.niceName, arguments.instructionSet, <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>], arguments.startChildZygote, arguments.instructionSet, arguments.appDataDir);</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程逻辑</span></span><br><span class="line">        handleChildProc();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 父进程逻辑</span></span><br><span class="line">        handleParentProc(pid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Zygote-fork机制"><a href="#3-Zygote-fork机制" class="headerlink" title="3. Zygote fork机制"></a>3. Zygote fork机制</h4><p>Zygote通过<code>fork</code>系统调用创建新进程，<code>fork</code>系统调用会复制当前进程的所有内容，包括内存、文件描述符等。在Android中，Zygote通过<code>Zygote.forkAndSpecialize</code>方法进行fork。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">forkAndSpecialize</span><span class="params">(<span class="type">int</span> uid, <span class="type">int</span> gid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags, <span class="type">int</span> mountExternal, String seInfo, String niceName, String[] fdsToClose, String[] fdsToIgnore, <span class="type">int</span> instructionSet, String appDataDir)</span>;</span><br></pre></td></tr></table></figure><h4 id="4-Zygote的好处"><a href="#4-Zygote的好处" class="headerlink" title="4. Zygote的好处"></a>4. Zygote的好处</h4><ol><li><strong>减少启动时间</strong>：通过预加载常用类和资源，减少应用启动时间。</li><li><strong>共享内存</strong>：Zygote通过共享内存减少内存消耗，提高系统性能。</li><li><strong>高效管理</strong>：通过统一的管理方式，简化了进程创建和管理。</li></ol><h4 id="5-源码分析"><a href="#5-源码分析" class="headerlink" title="5. 源码分析"></a>5. 源码分析</h4><p>以下是Zygote相关核心代码的详细分析。</p><h5 id="5-1-ZygoteInit-java"><a href="#5-1-ZygoteInit-java" class="headerlink" title="5.1 ZygoteInit.java"></a>5.1 ZygoteInit.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZygoteInit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化虚拟机</span></span><br><span class="line">            RuntimeInit.preForkInit();</span><br><span class="line">            <span class="comment">// 启动Zygote进程</span></span><br><span class="line">            zygoteInit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Zygote died with exception&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zygoteInit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 预加载类</span></span><br><span class="line">        preloadClasses();</span><br><span class="line">        <span class="comment">// 预加载资源</span></span><br><span class="line">        preloadResources();</span><br><span class="line">        <span class="comment">// 预加载OpenGL</span></span><br><span class="line">        preloadOpenGL();</span><br><span class="line">        <span class="comment">// 进入等待循环</span></span><br><span class="line">        runSelectLoop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preloadClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取预加载类的列表</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PRELOADED_CLASSES);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is), <span class="number">256</span>);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 加载类</span></span><br><span class="line">                Class.forName(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException ex) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Error preloading classes&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preloadResources</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取预加载资源的列表</span></span><br><span class="line">            <span class="type">AssetManager</span> <span class="variable">assets</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AssetManager</span>();</span><br><span class="line">            assets.addAssetPath(<span class="string">&quot;/system/framework/framework-res.apk&quot;</span>);</span><br><span class="line">            <span class="comment">// 加载资源</span></span><br><span class="line">            <span class="type">Resources</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resources</span>(assets, <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>(), <span class="literal">null</span>);</span><br><span class="line">            res.getValue(R.drawable.some_resource, <span class="keyword">new</span> <span class="title class_">TypedValue</span>(), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Error preloading resources&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runSelectLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待请求</span></span><br><span class="line">            <span class="type">ZygoteConnection</span> <span class="variable">connection</span> <span class="operator">=</span> acceptCommandPeer();</span><br><span class="line">            <span class="comment">// 处理请求</span></span><br><span class="line">            connection.runOnce();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZygoteConnection <span class="title function_">acceptCommandPeer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 接受连接</span></span><br><span class="line">            FileDescriptor[] descriptors = <span class="keyword">new</span> <span class="title class_">FileDescriptor</span>[<span class="number">1</span>];</span><br><span class="line">            socket.accept(descriptors);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZygoteConnection</span>(descriptors[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;IOException during accept()&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-ZygoteConnection-java"><a href="#5-2-ZygoteConnection-java" class="headerlink" title="5.2 ZygoteConnection.java"></a>5.2 ZygoteConnection.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZygoteConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LocalSocket mSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataInputStream mSocketIn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataOutputStream mSocketOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZygoteConnection</span><span class="params">(LocalSocket socket)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        mSocket = socket;</span><br><span class="line">        mSocketIn = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(socket.getInputStream());</span><br><span class="line">        mSocketOut = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(socket.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">runOnce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 读取请求</span></span><br><span class="line">        <span class="type">Arguments</span> <span class="variable">arguments</span> <span class="operator">=</span> readArgumentList();</span><br><span class="line">        <span class="comment">// fork新进程</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span></span><br></pre></td></tr></table></figure><p>Zygote.forkAndSpecialize(arguments.uid, arguments.gid, arguments.gids, arguments.runtimeFlags, arguments.mountExternal, arguments.seInfo, arguments.niceName, new String[0], arguments.startChildZygote, arguments.instructionSet, arguments.appDataDir); if (pid &#x3D;&#x3D; 0) { &#x2F;&#x2F; 子进程逻辑 handleChildProc(); } else { &#x2F;&#x2F; 父进程逻辑 handleParentProc(pid); } }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">csharp</span><br><span class="line"></span><br><span class="line">private Arguments readArgumentList() &#123;</span><br><span class="line">    // 读取并解析请求参数</span><br><span class="line">    return new Arguments();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void handleChildProc() &#123;</span><br><span class="line">    // 子进程处理逻辑</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void handleParentProc(int pid) &#123;</span><br><span class="line">    // 父进程处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arduino</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 5.3 Zygote.java</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class Zygote &#123;</span><br><span class="line">    public static native int forkAndSpecialize(int uid, int gid, int[] gids, int runtimeFlags, int mountExternal, String seInfo, String niceName, String[] fdsToClose, String[] fdsToIgnore, int instructionSet, String appDataDir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-最后总结"><a href="#6-最后总结" class="headerlink" title="6. 最后总结"></a>6. 最后总结</h4><p>通过本文的详细分析，我们深入了解了Android Zygote进程的启动流程。Zygote进程通过预加载类和资源，减少应用启动时间，提高系统性能，并通过fork机制高效地创建新进程。理解Zygote进程的启动流程对于掌握Android系统的启动过程和应用性能优化具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Zygote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Framework(一)Binder</title>
      <link href="/blog/2020/05/12/Android-Framework-%E4%B8%80-Binder/"/>
      <url>/blog/2020/05/12/Android-Framework-%E4%B8%80-Binder/</url>
      
        <content type="html"><![CDATA[<h3 id="Android-Binder机制详解"><a href="#Android-Binder机制详解" class="headerlink" title="Android Binder机制详解"></a>Android Binder机制详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>Binder是Android系统中最重要的进程间通信（IPC）机制。它提供了高效、安全的通信方式，使得不同进程之间可以进行可靠的消息传递和方法调用。Binder机制在Android系统中扮演着核心角色，被广泛应用于各种系统服务和应用之间的交互。</p><h4 id="2-设计思想"><a href="#2-设计思想" class="headerlink" title="2. 设计思想"></a>2. 设计思想</h4><p>Binder机制的设计思想可以归纳为以下几点：</p><ol><li><strong>高效性</strong>：通过共享内存来传递数据，减少数据复制，提高通信效率。</li><li><strong>安全性</strong>：内核级别的身份验证，确保只有授权的进程才能进行通信。</li><li><strong>简化开发</strong>：提供统一的接口，使得开发者可以方便地进行进程间通信编程。</li></ol><h4 id="3-Binder的基本原理"><a href="#3-Binder的基本原理" class="headerlink" title="3. Binder的基本原理"></a>3. Binder的基本原理</h4><p>Binder机制包括用户空间和内核空间两部分：</p><ul><li><strong>用户空间</strong>：包括Binder、ServiceManager、BpBinder、BinderProxy等类，用于定义和调用应用层接口。</li><li><strong>内核空间</strong>：包括Binder驱动，负责跨进程通信的数据传递和身份验证。</li></ul><h5 id="3-1-Binder通信模型"><a href="#3-1-Binder通信模型" class="headerlink" title="3.1 Binder通信模型"></a>3.1 Binder通信模型</h5><p>Binder通信模型由以下几部分组成：</p><ul><li><strong>Client</strong>：发起请求的进程。</li><li><strong>Server</strong>：处理请求的进程。</li><li><strong>ServiceManager</strong>：服务管理进程，负责管理系统中的各种服务。</li><li><strong>Binder驱动</strong>：内核驱动模块，负责实际的数据传输和身份验证。</li></ul><h4 id="4-Binder的实现流程"><a href="#4-Binder的实现流程" class="headerlink" title="4. Binder的实现流程"></a>4. Binder的实现流程</h4><p>Binder的实现可以分为以下几个步骤：</p><ol><li><strong>Service注册</strong>：Server通过ServiceManager注册服务。</li><li><strong>获取Service</strong>：Client通过ServiceManager获取服务代理。</li><li><strong>发起请求</strong>：Client通过服务代理发起请求。</li><li><strong>处理请求</strong>：Server接收请求并进行处理。</li><li><strong>返回结果</strong>：Server将结果返回给Client。</li></ol><h5 id="4-1-Service注册"><a href="#4-1-Service注册" class="headerlink" title="4.1 Service注册"></a>4.1 Service注册</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerService</span><span class="params">(String name, IBinder service)</span> &#123;</span><br><span class="line">    ServiceManager.addService(name, service);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ServiceManager中，服务通过<code>addService</code>方法注册，服务名与<code>IBinder</code>对象关联。</p><h5 id="4-2-获取Service"><a href="#4-2-获取Service" class="headerlink" title="4.2 获取Service"></a>4.2 获取Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> IBinder <span class="title function_">getService</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ServiceManager.getService(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client通过<code>getService</code>方法获取服务代理，即通过服务名获取<code>IBinder</code>对象。</p><h5 id="4-3-发起请求"><a href="#4-3-发起请求" class="headerlink" title="4.3 发起请求"></a>4.3 发起请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    mRemote.transact(code, data, reply, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client通过<code>transact</code>方法将请求发送到服务端，<code>Parcel</code>对象用于封装请求数据和返回数据。</p><h5 id="4-4-处理请求"><a href="#4-4-处理请求" class="headerlink" title="4.4 处理请求"></a>4.4 处理请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Server通过<code>onTransact</code>方法接收并处理请求，根据<code>code</code>区分不同的请求类型。</p><h4 id="5-Binder源码分析"><a href="#5-Binder源码分析" class="headerlink" title="5. Binder源码分析"></a>5. Binder源码分析</h4><p>Binder的核心实现包含在Binder驱动和用户空间的Binder相关类中。以下将从源码角度详细分析Binder机制的实现。</p><h5 id="5-1-Binder驱动"><a href="#5-1-Binder驱动" class="headerlink" title="5.1 Binder驱动"></a>5.1 Binder驱动</h5><p>Binder驱动位于内核中，主要负责数据传输和身份验证。其核心代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">binder_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> BINDER_WRITE_READ:</span><br><span class="line">            <span class="keyword">return</span> binder_thread_write_read(filp, cmd, arg);</span><br><span class="line">        <span class="comment">// 其他case省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>binder_ioctl</code>方法处理Binder的所有I&#x2F;O控制命令，其中<code>BINDER_WRITE_READ</code>命令用于处理读写操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write_read</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span> =</span> binder_get_thread(proc);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;bwr, (<span class="type">void</span> __user *)arg, <span class="keyword">sizeof</span>(bwr)))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        binder_transaction(proc, thread, (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)bwr.write_buffer, bwr.write_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        binder_thread_read(proc, thread, (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)bwr.read_buffer, bwr.read_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>binder_thread_write_read</code>方法处理Binder线程的读写请求，通过<code>binder_transaction</code>方法进行事务处理，通过<code>binder_thread_read</code>方法读取响应。</p><h5 id="5-2-用户空间"><a href="#5-2-用户空间" class="headerlink" title="5.2 用户空间"></a>5.2 用户空间</h5><p>用户空间的Binder相关类包括<code>BpBinder</code>、<code>BinderProxy</code>等，负责具体的IPC调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BpBinder</span> <span class="keyword">extends</span> <span class="title class_">IBinder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> mHandle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BpBinder</span><span class="params">(<span class="type">int</span> handle)</span> &#123;</span><br><span class="line">        mHandle = handle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// 具体的transact实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BpBinder</code>类表示远程Binder对象，通过<code>transact</code>方法发起跨进程调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderProxy</span> <span class="keyword">implements</span> <span class="title class_">IBinder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> mObject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// 调用native方法进行跨进程通信</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BinderProxy</code>类是Binder引用的代理，通过本地方法进行实际的跨进程通信。</p><h4 id="6-Binder机制的好处"><a href="#6-Binder机制的好处" class="headerlink" title="6. Binder机制的好处"></a>6. Binder机制的好处</h4><ol><li><strong>高效</strong>：Binder通过共享内存传输数据，减少了数据复制，性能优越。</li><li><strong>安全</strong>：Binder机制内置了身份验证，确保通信的安全性。</li><li><strong>稳定</strong>：Binder作为Android系统的核心IPC机制，经过了大量的测试和优化，稳定性高。</li><li><strong>简化开发</strong>：提供统一的接口，开发者可以方便地进行进程间通信编程。</li></ol><h4 id="7-Binder机制的设计思想"><a href="#7-Binder机制的设计思想" class="headerlink" title="7. Binder机制的设计思想"></a>7. Binder机制的设计思想</h4><p>Binder机制的设计思想主要体现在以下几个方面：</p><ol><li><strong>统一接口</strong>：通过AIDL（Android Interface Definition Language）提供统一的接口定义，使得开发者可以方便地定义和调用跨进程服务。</li><li><strong>高效传输</strong>：使用共享内存进行数据传输，减少了数据复制，提高了通信效率。</li><li><strong>安全机制</strong>：通过内核级别的身份验证和访问控制，确保进程间通信的安全性。</li><li><strong>灵活扩展</strong>：Binder机制支持多种类型的数据传输，包括基本数据类型、对象和文件描述符等，具有很强的灵活性和扩展性。</li></ol><h4 id="8-详细的流程分析"><a href="#8-详细的流程分析" class="headerlink" title="8. 详细的流程分析"></a>8. 详细的流程分析</h4><h5 id="8-1-服务注册流程"><a href="#8-1-服务注册流程" class="headerlink" title="8.1 服务注册流程"></a>8.1 服务注册流程</h5><p>服务注册是指服务端将自身的服务注册到ServiceManager，使得其他进程可以通过ServiceManager访问该服务。以下是服务注册的详细流程：</p><ol><li><p><strong>服务端创建Binder对象</strong>：服务端创建一个Binder对象，该对象实现了IBinder接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> <span class="keyword">extends</span> <span class="title class_">Binder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// 处理客户端请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>将Binder对象注册到ServiceManager</strong>：服务端通过ServiceManager将Binder对象注册到系统中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ServiceManager.addService(<span class="string">&quot;MyService&quot;</span>, <span class="keyword">new</span> <span class="title class_">MyService</span>());</span><br></pre></td></tr></table></figure></li><li><p><strong>ServiceManager保存服务信息</strong>：ServiceManager接收到服务注册请求后，将服务名和Binder对象保存到服务列表中。</p></li></ol><h5 id="8-2-服务获取流程"><a href="#8-2-服务获取流程" class="headerlink" title="8.2 服务获取流程"></a>8.2 服务获取流程</h5><p>服务获取是指客户端通过ServiceManager获取服务端的Binder对象，从而进行跨进程调用。以下是服务获取的详细流程：</p><ol><li><p><strong>客户端向ServiceManager请求服务</strong>：客户端通过ServiceManager获取服务端的Binder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">IBinder</span> <span class="variable">binder</span> <span class="operator">=</span> ServiceManager.getService(<span class="string">&quot;MyService&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>ServiceManager返回Binder对象</strong>：ServiceManager根据服务名查找对应的Binder对象，并返回给客户端。</p></li><li><p><strong>客户端通过Binder对象进行通信</strong>：客户端获取到Binder对象后，通过transact方法进行跨进程调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line"><span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">binder.transact(<span class="number">0</span>, data, reply, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ol><h5 id="8-3-跨进程通信流程"><a href="#8-3-跨进程通信流程" class="headerlink" title="8.3 跨进程通信流程"></a>8.3 跨进程通信流程</h5><p>跨进程通信是指客户端通过Binder对象向服务端发送请求，服务端处理请求后将结果返回给客户端。以下是跨进程通信的详细流程：</p><ol><li><p><strong>客户端发起请求</strong>：客户端通过Binder对象的transact方法发起请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line"><span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">binder.transact(<span class="number">0</span>, data, reply, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Binder驱动接收请求</strong>：Binder驱动接收到客户端的请求后，将请求数据传递给服务端。</p></li><li><p><strong>服务端处理请求</strong>：服务端通过onTransact方法处理客户端请求，并将处理结果返回给Binder驱动。</p></li><li><p><strong>Binder驱动返回结果</strong>：Binder驱动将服务端的处理结果传递给客户端。</p></li><li><p><strong>客户端接收结果</strong>：客户端通过Parcel对象接收服务端的处理结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> reply.readInt();</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-源码分析"><a href="#9-源码分析" class="headerlink" title="9. 源码分析"></a>9. 源码分析</h4><h5 id="9-1-ServiceManager源码分析"><a href="#9-1-ServiceManager源码分析" class="headerlink" title="9.1 ServiceManager源码分析"></a>9.1 ServiceManager源码分析</h5><p>ServiceManager是Binder机制中的核心组件，负责管理系统中的各种服务。以下是ServiceManager的部分源码及其注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IServiceManager sServiceManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取ServiceManager对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IServiceManager <span class="title function_">getServiceManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sServiceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sServiceManager;</span><br><span class="line">        &#125;</span><br><span class="line">        sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addService</span><span class="params">(String name, IBinder service)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getServiceManager().addService(name, service, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;addService failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title function_">getService</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getServiceManager().getService(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;getService failed&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-2-BpBinder源码分析"><a href="#9-2-BpBinder源码分析" class="headerlink" title="9.2 BpBinder源码分析"></a>9.2 BpBinder源码分析</h5><p>BpBinder是Binder机制中的代理类，表示远程的Binder对象。以下是BpBinder的部分源码及其注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BpBinder</span> <span class="keyword">extends</span> <span class="title class_">IBinder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> mHandle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BpBinder</span><span class="params">(<span class="type">int</span> handle)</span> &#123;</span><br><span class="line">        mHandle = handle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// 调用本地方法进行跨进程通信</span></span><br><span class="line">        <span class="keyword">return</span> transactNative(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地方法声明</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">transactNative</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-3-BinderProxy源码分析"><a href="#9-3-BinderProxy源码分析" class="headerlink" title="9.3 BinderProxy源码分析"></a>9.3 BinderProxy源码分析</h5><p>BinderProxy是Binder机制中的代理类，通过本地方法进行实际的跨进程通信。以下是BinderProxy的部分源码及其注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinderProxy</span> <span class="keyword">implements</span> <span class="title class_">IBinder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> mObject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">// 调用本地方法进行跨进程通信</span></span><br><span class="line">        <span class="keyword">return</span> transactNative(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地方法声明</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">transactNative</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply, <span class="type">int</span> flags)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-4-Binder驱动源码分析"><a href="#9-4-Binder驱动源码分析" class="headerlink" title="9.4 Binder驱动源码分析"></a>9.4 Binder驱动源码分析</h5><p>Binder驱动位于内核中，主要负责数据传输和身份验证。以下是Binder驱动的部分源码及其注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// binder.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">binder_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> BINDER_WRITE_READ:</span><br><span class="line">            <span class="keyword">return</span> binder_thread_write_read(filp, cmd, arg);</span><br><span class="line">        <span class="comment">// 其他case省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_thread_write_read</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span> =</span> binder_get_thread(proc);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;bwr, (<span class="type">void</span> __user *)arg, <span class="keyword">sizeof</span>(bwr)))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        binder_transaction(proc, thread, (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)bwr.write_buffer, bwr.write_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        binder_thread_read(proc, thread, (<span class="type">void</span> __user *)(<span class="type">uintptr_t</span>)bwr.read_buffer, bwr.read_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-结论"><a href="#10-结论" class="headerlink" title="10. 结论"></a>10. 结论</h4><p>通过本文的详细分析，我们深入了解了Android Binder机制的设计思想、实现流程、源码细节以及其在Android系统中的重要作用。Binder机制通过高效、安全的进程间通信，为Android系统提供了稳定可靠的基础设施，使得应用程序之间可以方便地进行互操作。理解Binder机制对于编写高效、稳定的Android应用具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本的SQL操作-Postgre</title>
      <link href="/blog/2020/04/22/%E5%9F%BA%E6%9C%AC%E7%9A%84SQL%E6%93%8D%E4%BD%9C-Postgre/"/>
      <url>/blog/2020/04/22/%E5%9F%BA%E6%9C%AC%E7%9A%84SQL%E6%93%8D%E4%BD%9C-Postgre/</url>
      
        <content type="html"><![CDATA[<p>关于PostgreSQL的基本使用。</p><h3 id="PostgreSQL教程"><a href="#PostgreSQL教程" class="headerlink" title="PostgreSQL教程"></a>PostgreSQL教程</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ol><li>数据库的基本概念</li><li>创建数据库和表</li><li>插入数据</li><li>更新数据</li><li>修改字段类型</li><li>修改字段名称</li><li>删除数据</li><li>查询数据</li><li>视图的使用</li><li>索引的使用</li><li>事务处理</li><li>常用函数和操作</li></ol><hr><h3 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1. 数据库的基本概念"></a>1. 数据库的基本概念</h3><p>数据库（Database）是用于存储和管理数据的系统。PostgreSQL 是一个功能强大、开源的对象关系数据库系统。SQL（Structured Query Language）是用于操作数据库的标准语言。</p><h3 id="2-创建数据库和表"><a href="#2-创建数据库和表" class="headerlink" title="2. 创建数据库和表"></a>2. 创建数据库和表</h3><p><strong>创建数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE DATABASE my_database;</span><br></pre></td></tr></table></figure><p><strong>选择数据库</strong></p><p>在 PostgreSQL 中，选择数据库通常是在命令行中通过 <code>\c my_database</code> 来实现，或者在连接数据库时指定数据库名称。</p><p><strong>创建表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE TABLE employees (</span><br><span class="line">    id SERIAL PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    position VARCHAR(50),</span><br><span class="line">    salary NUMERIC(10, 2),</span><br><span class="line">    hire_date DATE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h3><p><strong>单条插入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">INSERT INTO employees (name, position, salary, hire_date)</span><br><span class="line">VALUES (&#x27;John Doe&#x27;, &#x27;Software Engineer&#x27;, 70000, &#x27;2023-06-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>多条插入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">INSERT INTO employees (name, position, salary, hire_date)</span><br><span class="line">VALUES </span><br><span class="line">(&#x27;Jane Smith&#x27;, &#x27;Data Scientist&#x27;, 80000, &#x27;2023-07-15&#x27;),</span><br><span class="line">(&#x27;Emily Davis&#x27;, &#x27;Product Manager&#x27;, 90000, &#x27;2023-08-10&#x27;);</span><br></pre></td></tr></table></figure><h3 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4. 更新数据"></a>4. 更新数据</h3><p><strong>更新单条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = 75000</span><br><span class="line">WHERE name = &#x27;John Doe&#x27;;</span><br></pre></td></tr></table></figure><p><strong>更新多条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = salary * 1.1</span><br><span class="line">WHERE hire_date &lt; &#x27;2023-07-01&#x27;;</span><br></pre></td></tr></table></figure><h3 id="5-修改字段类型"><a href="#5-修改字段类型" class="headerlink" title="5. 修改字段类型"></a>5. 修改字段类型</h3><p><strong>修改字段类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees</span><br><span class="line">ALTER COLUMN salary TYPE FLOAT;</span><br></pre></td></tr></table></figure><h3 id="6-修改字段名称"><a href="#6-修改字段名称" class="headerlink" title="6. 修改字段名称"></a>6. 修改字段名称</h3><p><strong>修改字段名称</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees</span><br><span class="line">RENAME COLUMN position TO job_title;</span><br></pre></td></tr></table></figure><h3 id="7-删除数据"><a href="#7-删除数据" class="headerlink" title="7. 删除数据"></a>7. 删除数据</h3><p><strong>删除单条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DELETE FROM employees</span><br><span class="line">WHERE name = &#x27;Emily Davis&#x27;;</span><br></pre></td></tr></table></figure><p><strong>删除所有记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DELETE FROM employees;</span><br></pre></td></tr></table></figure><p><strong>删除表中的所有记录并重置自增ID</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE employees RESTART IDENTITY;</span><br></pre></td></tr></table></figure><h3 id="8-查询数据"><a href="#8-查询数据" class="headerlink" title="8. 查询数据"></a>8. 查询数据</h3><p><strong>查询所有记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary &gt; 75000;</span><br></pre></td></tr></table></figure><p><strong>排序查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p><strong>聚合查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary) AS average_salary FROM employees;</span><br></pre></td></tr></table></figure><p><strong>分组查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT job_title, COUNT(*) AS count FROM employees</span><br><span class="line">GROUP BY job_title;</span><br></pre></td></tr></table></figure><h3 id="9-视图的使用"><a href="#9-视图的使用" class="headerlink" title="9. 视图的使用"></a>9. 视图的使用</h3><p><strong>创建视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE VIEW high_salary_employees AS</span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary &gt; 75000;</span><br></pre></td></tr></table></figure><p><strong>查询视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM high_salary_employees;</span><br></pre></td></tr></table></figure><h3 id="10-索引的使用"><a href="#10-索引的使用" class="headerlink" title="10. 索引的使用"></a>10. 索引的使用</h3><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_job_title ON employees(job_title);</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DROP INDEX idx_job_title;</span><br></pre></td></tr></table></figure><h3 id="11-事务处理"><a href="#11-事务处理" class="headerlink" title="11. 事务处理"></a>11. 事务处理</h3><p><strong>开启事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br></pre></td></tr></table></figure><p><strong>提交事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p><strong>回滚事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p><strong>事务示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = 72000</span><br><span class="line">WHERE name = &#x27;Jane Smith&#x27;;</span><br><span class="line"></span><br><span class="line">DELETE FROM employees</span><br><span class="line">WHERE name = &#x27;John Doe&#x27;;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><h3 id="12-常用函数和操作"><a href="#12-常用函数和操作" class="headerlink" title="12. 常用函数和操作"></a>12. 常用函数和操作</h3><p><strong>字符串操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(first_name, &#x27; &#x27;, last_name) AS full_name FROM employees;</span><br></pre></td></tr></table></figure><p><strong>日期操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT CURRENT_DATE;</span><br><span class="line">SELECT CURRENT_TIMESTAMP;</span><br><span class="line">SELECT AGE(hire_date) FROM employees;</span><br></pre></td></tr></table></figure><p><strong>条件表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT name, salary,</span><br><span class="line">    CASE </span><br><span class="line">        WHEN salary &lt; 50000 THEN &#x27;Low&#x27;</span><br><span class="line">        WHEN salary BETWEEN 50000 AND 100000 THEN &#x27;Medium&#x27;</span><br><span class="line">        ELSE &#x27;High&#x27;</span><br><span class="line">    END AS salary_range</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>子查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; (SELECT AVG(salary) FROM employees);</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上是本篇文章的所有内容.</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Postgre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android虚拟机Dalvik &amp;&amp; ART</title>
      <link href="/blog/2020/04/03/Android%E8%99%9A%E6%8B%9F%E6%9C%BADalvik-ART/"/>
      <url>/blog/2020/04/03/Android%E8%99%9A%E6%8B%9F%E6%9C%BADalvik-ART/</url>
      
        <content type="html"><![CDATA[<h4 id="安卓虚拟机"><a href="#安卓虚拟机" class="headerlink" title="安卓虚拟机"></a>安卓虚拟机</h4><h5 id="安卓虚拟机可以大致分为两大类"><a href="#安卓虚拟机可以大致分为两大类" class="headerlink" title="安卓虚拟机可以大致分为两大类:"></a>安卓虚拟机可以大致分为两大类:</h5><ol><li>5.0之前的Dalvik</li><li>5.0之后ART逐渐取代Dalvik</li></ol><hr><h3 id="一-Dalvik"><a href="#一-Dalvik" class="headerlink" title="(一) Dalvik"></a>(一) Dalvik</h3><h4 id="dalvik和JVM的区别"><a href="#dalvik和JVM的区别" class="headerlink" title="dalvik和JVM的区别"></a>dalvik和JVM的区别</h4><blockquote><p>dalvik运行的是dalvik字节码,是由java字节码转换过来,打包到dex中,JVM运行的是calss或者jar.</p></blockquote><blockquote><p>dex比jar运行速度更快,dex会把所有的信息整合到一起,去掉冗余信息,优化I&#x2F;O操作,提高查找速度.</p></blockquote><blockquote><p>dalvik是基于寄存器,JVM是基于操作数栈,基于寄存器执行效率高,但是可移植性差.</p></blockquote><blockquote><p>dalvik可以在有限的内存中运行多个进程,每一个应用都运行在自己的Dalvik虚拟机当中,拥有独立的进程.</p></blockquote><hr><h4 id="JIT-Just-In-Time-Compile"><a href="#JIT-Just-In-Time-Compile" class="headerlink" title="JIT(Just-In-Time Compile)"></a>JIT(Just-In-Time Compile)</h4><blockquote><p>在没有JIT之前,虚拟机运行时会通过解释器将字节码翻译为机器码,逐条读入然后翻译,这样会导致效率很慢,后来引入JIT 是一种优化的手段,及时编译,JIT会将热点代码翻译后缓存起来,下次执行的时候直接读取缓存,JIT的缺点:<code>每次重新启动都需要重新翻译</code>,<code>运行的时候比较耗电</code></p></blockquote><hr><h4 id="dex和Odex"><a href="#dex和Odex" class="headerlink" title="dex和Odex"></a>dex和Odex</h4><blockquote><p>dex是将所有的class文件优化合并后的文件,与jar文件不同的是,jar文件就像文件夹,里面的class文件是单独的.</p></blockquote><blockquote><p>在Dalvik虚拟机中，会通过dexopt来对dex进行优化，生成odex文件，并将其保存到手机的VM缓存文件夹data&#x2F;dalvik-cache下（注意，这边生成的odex文件后缀依然是dex ）。它是一个dey文件，里面仍然还是字节码。</p></blockquote><hr><h3 id="二-ART"><a href="#二-ART" class="headerlink" title="(二)ART"></a>(二)ART</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>ART是在android5.0逐渐引进代替dalvik虚拟机,它不再使用JIT而是使用AOT的提前编译优化,以及垃圾回收机制也做了升级和优化等</p></blockquote><hr><h4 id="AOT-Ahead-Of-Time"><a href="#AOT-Ahead-Of-Time" class="headerlink" title="AOT(Ahead-Of-Time)"></a>AOT(Ahead-Of-Time)</h4><blockquote><p>AOT会提前将字节码编译为机器码,保存在磁盘当中,运行的时候直接执行,</p></blockquote><blockquote><p>在7.0之前应用在安装的时候会进行一次预编译,生成.oat文件保存在本地,但是这样也使得安装的时间大大增大,于是又引进了JIT技术,形成一种JIT和AOT混合编译模式,它的特点是:<br>1 安装的时候不进行预编译<br>2 应用运行的时候直接使用JIT进行编译,然后记录代码信息到profile文件中<br>3 手机在空闲状态下手机会扫描profile文件,并通过AOT对热点代码进行编译,下次再运行的时候会根据profile来执行已编译的机器码</p></blockquote><h4 id="垃圾回收方面的优化"><a href="#垃圾回收方面的优化" class="headerlink" title="垃圾回收方面的优化"></a>垃圾回收方面的优化</h4><blockquote><p>垃圾回收判定:<br>ART采用的是<code>可达性分析算法</code></p></blockquote><blockquote><p>垃圾回收算法:<br>JVM上:<code>标记-整理</code>,<code>标记-清除</code>,<code>标记-复制</code>,<code>分带算法</code><br>ART上会根据前后台状态进行分类:<br>前台状态下ART采用:<code>标记-整理</code>,<code>标记-复制</code> (ART在标记复制算法上做了优化)<br>后台状态下ART采用:<code>CMS(并发标记清理)</code>。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-WebView中与JavaScript通信</title>
      <link href="/blog/2020/03/12/Android-WebView%E4%B8%AD%E4%B8%8EJavaScript%E9%80%9A%E4%BF%A1/"/>
      <url>/blog/2020/03/12/Android-WebView%E4%B8%AD%E4%B8%8EJavaScript%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="WebView中与JavaScript通信的手段"><a href="#WebView中与JavaScript通信的手段" class="headerlink" title="WebView中与JavaScript通信的手段"></a>WebView中与JavaScript通信的手段</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android开发中，<code>WebView</code>组件用于在应用内显示网页内容。为了增强交互性，<code>WebView</code>提供了多种与JavaScript通信的手段。这些手段允许Android和网页之间进行双向通信，实现更丰富的功能。本文将详细介绍WebView中与JavaScript通信的主要手段，并结合示例代码进行说明。</p><h4 id="2-WebView与JavaScript通信的手段"><a href="#2-WebView与JavaScript通信的手段" class="headerlink" title="2. WebView与JavaScript通信的手段"></a>2. WebView与JavaScript通信的手段</h4><p>主要有以下几种方式：</p><ol><li><strong>JavaScriptInterface</strong>：通过添加JavaScript接口，允许JavaScript调用Android代码。</li><li><strong>evaluateJavascript</strong>：直接执行JavaScript代码并获取结果。</li><li><strong>WebViewClient</strong>和<strong>WebChromeClient</strong>：通过这两个类的回调方法实现更多的控制和通信。</li></ol><h5 id="2-1-JavaScriptInterface"><a href="#2-1-JavaScriptInterface" class="headerlink" title="2.1 JavaScriptInterface"></a>2.1 JavaScriptInterface</h5><p><code>JavaScriptInterface</code>是一种双向通信的方式，通过注入一个接口类，允许JavaScript代码调用该接口类中的方法。</p><h6 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h6><ol><li><strong>创建JavaScript接口类</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInterface</span> &#123;</span><br><span class="line">    Context mContext;</span><br><span class="line"></span><br><span class="line">    WebAppInterface(Context c) &#123;</span><br><span class="line">        mContext = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>在WebView中添加接口</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">WebView</span> <span class="variable">myWebView</span> <span class="operator">=</span> (WebView) findViewById(R.id.webview);</span><br><span class="line">myWebView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">myWebView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">WebAppInterface</span>(<span class="built_in">this</span>), <span class="string">&quot;AndroidInterface&quot;</span>);</span><br><span class="line">myWebView.loadUrl(<span class="string">&quot;file:///android_asset/sample.html&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>在HTML中调用接口方法</strong>：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showAndroidToast(&#x27;Hello from JavaScript&#x27;)&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showAndroidToast</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">AndroidInterface</span>.<span class="title function_">showToast</span>(message);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-evaluateJavascript"><a href="#2-2-evaluateJavascript" class="headerlink" title="2.2 evaluateJavascript"></a>2.2 evaluateJavascript</h5><p><code>evaluateJavascript</code>方法允许Android直接执行JavaScript代码，并在执行完成后获取结果。</p><h6 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h6><ol><li><strong>在WebView中执行JavaScript代码</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">WebView</span> <span class="variable">myWebView</span> <span class="operator">=</span> (WebView) findViewById(R.id.webview);</span><br><span class="line">myWebView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">myWebView.loadUrl(<span class="string">&quot;file:///android_asset/sample.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">myWebView.evaluateJavascript(<span class="string">&quot;javascript:myFunction()&quot;</span>, <span class="keyword">new</span> <span class="title class_">ValueCallback</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceiveValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理JavaScript代码的返回值</span></span><br><span class="line">        Log.d(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;JavaScript返回值：&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><strong>在HTML中定义JavaScript函数</strong>：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&quot;Hello from JavaScript&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-WebViewClient和WebChromeClient"><a href="#2-3-WebViewClient和WebChromeClient" class="headerlink" title="2.3 WebViewClient和WebChromeClient"></a>2.3 WebViewClient和WebChromeClient</h5><p>通过<code>WebViewClient</code>和<code>WebChromeClient</code>的回调方法，可以实现更复杂的交互和控制。</p><h6 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h6><p><code>WebViewClient</code>主要用于处理页面加载过程中的事件，例如页面加载开始、加载完成、页面错误等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">myWebView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageFinished</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 页面加载完成时的处理</span></span><br><span class="line">        Log.d(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;页面加载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> &#123;</span><br><span class="line">        <span class="comment">// 页面加载错误时的处理</span></span><br><span class="line">        Log.e(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;页面加载错误：&quot;</span> + error.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h6><p><code>WebChromeClient</code>主要用于处理与页面交互相关的事件，例如JavaScript弹窗、网页标题变化、进度条更新等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">myWebView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理JavaScript中的alert</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(view.getContext())</span><br><span class="line">            .setMessage(message)</span><br><span class="line">            .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                    result.confirm();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setCancelable(<span class="literal">false</span>)</span><br><span class="line">            .create()</span><br><span class="line">            .show();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onProgressChanged</span><span class="params">(WebView view, <span class="type">int</span> newProgress)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新进度条</span></span><br><span class="line">        Log.d(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;加载进度：&quot;</span> + newProgress + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h4><p>以下是一个综合示例，展示了如何使用上述几种手段在WebView中与JavaScript进行通信。</p><h5 id="Android端代码"><a href="#Android端代码" class="headerlink" title="Android端代码"></a>Android端代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.webviewcommunication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.webkit.JavascriptInterface;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebChromeClient;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebResourceError;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebResourceRequest;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebView myWebView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        myWebView = findViewById(R.id.webview);</span><br><span class="line">        myWebView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        myWebView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">WebAppInterface</span>(<span class="built_in">this</span>), <span class="string">&quot;AndroidInterface&quot;</span>);</span><br><span class="line"></span><br><span class="line">        myWebView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageFinished</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;页面加载完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;页面加载错误：&quot;</span> + error.getDescription());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        myWebView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">WebChromeClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(view.getContext())</span><br><span class="line">                    .setMessage(message)</span><br><span class="line">                    .setPositiveButton(android.R.string.ok, (dialog, which) -&gt; result.confirm())</span><br><span class="line">                    .setCancelable(<span class="literal">false</span>)</span><br><span class="line">                    .create()</span><br><span class="line">                    .show();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onProgressChanged</span><span class="params">(WebView view, <span class="type">int</span> newProgress)</span> &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;WebView&quot;</span>, <span class="string">&quot;加载进度：&quot;</span> + newProgress + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        myWebView.loadUrl(<span class="string">&quot;file:///android_asset/sample.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInterface</span> &#123;</span><br><span class="line">        Context mContext;</span><br><span class="line"></span><br><span class="line">        WebAppInterface(Context c) &#123;</span><br><span class="line">            mContext = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebView Communication<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showAndroidToast</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">AndroidInterface</span>.<span class="title function_">showToast</span>(message);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">evaluateJsFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&quot;Hello from JavaScript&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showAndroidToast(&#x27;Hello from JavaScript&#x27;)&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>WebView中与JavaScript通信的几种主要手段，包括<code>JavaScriptInterface</code>、<code>evaluateJavascript</code>、<code>WebViewClient</code>和<code>WebChromeClient</code>。这些手段提供了丰富的交互功能，使得Android应用和网页内容能够高效地进行双向通信。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-启动Activity的Hook方式</title>
      <link href="/blog/2020/01/22/Android-%E5%90%AF%E5%8A%A8Activity%E7%9A%84Hook%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2020/01/22/Android-%E5%90%AF%E5%8A%A8Activity%E7%9A%84Hook%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="插件化、启动Activity的Hook方式及taskAffinity详解"><a href="#插件化、启动Activity的Hook方式及taskAffinity详解" class="headerlink" title="插件化、启动Activity的Hook方式及taskAffinity详解"></a>插件化、启动Activity的Hook方式及taskAffinity详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>本文主要简单介绍插件化、启动Activity的Hook方式及taskAffinity的相关知识，并结合源码和注释进行深入解析。</p><h4 id="2-插件化"><a href="#2-插件化" class="headerlink" title="2. 插件化"></a>2. 插件化</h4><p>插件化是指将应用的部分功能模块化，通过动态加载插件实现功能扩展。插件化的主要目标是提高应用的灵活性和可维护性。</p><h5 id="2-1-插件化的基本原理"><a href="#2-1-插件化的基本原理" class="headerlink" title="2.1 插件化的基本原理"></a>2.1 插件化的基本原理</h5><p>插件化的基本原理是通过ClassLoader加载插件中的类，并在运行时将这些类与宿主应用的类进行关联。通常，插件化框架会提供一个插件管理器，用于管理插件的加载和卸载。</p><h5 id="2-2-插件化实现示例"><a href="#2-2-插件化实现示例" class="headerlink" title="2.2 插件化实现示例"></a>2.2 插件化实现示例</h5><p>以下是一个简单的插件化实现示例，展示如何动态加载插件中的类并调用其方法。</p><h6 id="插件项目代码"><a href="#插件项目代码" class="headerlink" title="插件项目代码"></a>插件项目代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPluginMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Plugin!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="宿主项目代码"><a href="#宿主项目代码" class="headerlink" title="宿主项目代码"></a>宿主项目代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.host;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件APK路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">apkPath</span> <span class="operator">=</span> <span class="string">&quot;/sdcard/plugin.apk&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建DexClassLoader</span></span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(apkPath, getCacheDir().getAbsolutePath(), <span class="literal">null</span>, getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载插件类</span></span><br><span class="line">            Class&lt;?&gt; pluginClass = classLoader.loadClass(<span class="string">&quot;com.example.plugin.PluginClass&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建插件类实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">pluginInstance</span> <span class="operator">=</span> pluginClass.newInstance();</span><br><span class="line">            <span class="comment">// 调用插件方法</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) pluginClass.getMethod(<span class="string">&quot;getPluginMessage&quot;</span>).invoke(pluginInstance);</span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-启动Activity的Hook方式"><a href="#3-启动Activity的Hook方式" class="headerlink" title="3. 启动Activity的Hook方式"></a>3. 启动Activity的Hook方式</h4><p>在Android中，启动Activity的过程涉及到AMS（ActivityManagerService）和PMS（PackageManagerService）等系统服务。通过Hook技术，我们可以在启动Activity的过程中插入自定义逻辑，实现一些特殊需求。</p><h5 id="3-1-Hook启动Activity的基本原理"><a href="#3-1-Hook启动Activity的基本原理" class="headerlink" title="3.1 Hook启动Activity的基本原理"></a>3.1 Hook启动Activity的基本原理</h5><p>Hook启动Activity的基本原理是通过反射技术，修改系统服务（如AMS）的内部逻辑，拦截并处理启动Activity的请求。</p><h5 id="3-2-Hook启动Activity实现示例"><a href="#3-2-Hook启动Activity实现示例" class="headerlink" title="3.2 Hook启动Activity实现示例"></a>3.2 Hook启动Activity实现示例</h5><p>以下是一个Hook启动Activity的示例，展示如何通过反射技术拦截启动Activity的请求，并插入自定义逻辑。</p><h6 id="Hook代码"><a href="#Hook代码" class="headerlink" title="Hook代码"></a>Hook代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.hook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hookActivityManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取ActivityManager的gDefault字段</span></span><br><span class="line">            Class&lt;?&gt; activityManagerClass = Class.forName(<span class="string">&quot;android.app.ActivityManager&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">gDefaultField</span> <span class="operator">=</span> activityManagerClass.getDeclaredField(<span class="string">&quot;IActivityManagerSingleton&quot;</span>);</span><br><span class="line">            gDefaultField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">gDefault</span> <span class="operator">=</span> gDefaultField.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取Singleton的mInstance字段</span></span><br><span class="line">            Class&lt;?&gt; singletonClass = Class.forName(<span class="string">&quot;android.util.Singleton&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">mInstanceField</span> <span class="operator">=</span> singletonClass.getDeclaredField(<span class="string">&quot;mInstance&quot;</span>);</span><br><span class="line">            mInstanceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">iActivityManager</span> <span class="operator">=</span> mInstanceField.get(gDefault);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建代理对象</span></span><br><span class="line">            Class&lt;?&gt; iActivityManagerClass = Class.forName(<span class="string">&quot;android.app.IActivityManager&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> java.lang.reflect.Proxy.newProxyInstance(</span><br><span class="line">                    Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;iActivityManagerClass&#125;,</span><br><span class="line">                    (proxy, method, args) -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 拦截startActivity方法</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;startActivity&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> (Intent) args[<span class="number">2</span>];</span><br><span class="line">                            <span class="comment">// 插入自定义逻辑</span></span><br><span class="line">                            System.out.println(<span class="string">&quot;Hooked startActivity: &quot;</span> + intent);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> method.invoke(iActivityManager, args);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将代理对象设置到Singleton的mInstance字段</span></span><br><span class="line">            mInstanceField.set(gDefault, proxyInstance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在Application中初始化Hook"><a href="#在Application中初始化Hook" class="headerlink" title="在Application中初始化Hook"></a>在Application中初始化Hook</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.hook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        HookUtil.hookActivityManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-taskAffinity"><a href="#4-taskAffinity" class="headerlink" title="4. taskAffinity"></a>4. taskAffinity</h4><p>taskAffinity是Android中Activity的任务亲和性属性，决定了Activity与任务（Task）的关联关系。通过设置taskAffinity，可以控制Activity在任务栈中的行为和表现。</p><h5 id="4-1-taskAffinity的基本原理"><a href="#4-1-taskAffinity的基本原理" class="headerlink" title="4.1 taskAffinity的基本原理"></a>4.1 taskAffinity的基本原理</h5><p>taskAffinity定义了Activity的任务亲和性，它是一个字符串标识，用于决定Activity启动时是否与现有任务关联，或者创建一个新的任务。默认情况下，所有Activity的taskAffinity与应用包名相同。</p><h5 id="4-2-taskAffinity的使用示例"><a href="#4-2-taskAffinity的使用示例" class="headerlink" title="4.2 taskAffinity的使用示例"></a>4.2 taskAffinity的使用示例</h5><p>以下是一个taskAffinity的使用示例，展示如何通过设置taskAffinity控制Activity在任务栈中的行为。</p><h6 id="AndroidManifest-xml配置"><a href="#AndroidManifest-xml配置" class="headerlink" title="AndroidManifest.xml配置"></a>AndroidManifest.xml配置</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">&quot;com.example.host.MainTask&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.SecondActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">&quot;com.example.host.SecondTask&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="启动Activity的代码"><a href="#启动Activity的代码" class="headerlink" title="启动Activity的代码"></a>启动Activity的代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.host;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button_start_second).setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>以上是本篇的全部内容。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的协程</title>
      <link href="/blog/2019/11/03/Kotlin%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
      <url>/blog/2019/11/03/Kotlin%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>协程是Kotlin中用于简化异步编程的强大工具。它们提供了一种更加直观和简洁的方式来处理并发任务。</p><h3 id="一、协程的基本使用"><a href="#一、协程的基本使用" class="headerlink" title="一、协程的基本使用"></a>一、协程的基本使用</h3><h4 id="1-1-启动协程"><a href="#1-1-启动协程" class="headerlink" title="1.1 启动协程"></a>1.1 启动协程</h4><p>在Kotlin中，可以使用<code>launch</code>和<code>async</code>来启动协程。<code>launch</code>启动一个新的协程并且不返回结果，而<code>async</code>启动一个新的协程并返回一个<code>Deferred</code>对象，代表一个将来的结果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">// 启动一个新的协程</span></span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    <span class="comment">// 保持主线程存活</span></span><br><span class="line">    delay(<span class="number">2000L</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>runBlocking</code>阻塞了当前线程，直到协程内部的所有任务完成。<code>launch</code>启动了一个新的协程，<code>delay</code>函数挂起协程，而不是阻塞线程。</p><h4 id="1-2-async和await"><a href="#1-2-async和await" class="headerlink" title="1.2 async和await"></a>1.2 async和await</h4><p><code>async</code>与<code>launch</code>类似，但它会返回一个<code>Deferred</code>对象，可以使用<code>await</code>来获取结果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> deferred = async &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        <span class="string">&quot;World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    <span class="comment">// 获取异步结果</span></span><br><span class="line">    println(deferred.await())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>async</code>启动了一个新的协程并返回了一个<code>Deferred</code>对象。<code>await</code>函数挂起协程，直到<code>Deferred</code>对象完成并返回结果。</p><h3 id="二、协程的上下文与调度器"><a href="#二、协程的上下文与调度器" class="headerlink" title="二、协程的上下文与调度器"></a>二、协程的上下文与调度器</h3><h4 id="2-1-协程上下文"><a href="#2-1-协程上下文" class="headerlink" title="2.1 协程上下文"></a>2.1 协程上下文</h4><p>协程上下文是协程的执行环境，包括协程的调度器、Job等。可以通过<code>CoroutineScope</code>来管理协程的上下文。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">// 使用不同的上下文启动协程</span></span><br><span class="line">    launch(Dispatchers.Default) &#123;</span><br><span class="line">        println(<span class="string">&quot;Default Dispatcher: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch(Dispatchers.IO) &#123;</span><br><span class="line">        println(<span class="string">&quot;IO Dispatcher: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">        println(<span class="string">&quot;Unconfined Dispatcher: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Main: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，使用了不同的调度器来启动协程。<code>Dispatchers.Default</code>用于CPU密集型任务，<code>Dispatchers.IO</code>用于IO密集型任务，<code>Dispatchers.Unconfined</code>直接在调用者线程中执行协程。</p><h4 id="2-2-CoroutineScope"><a href="#2-2-CoroutineScope" class="headerlink" title="2.2 CoroutineScope"></a>2.2 CoroutineScope</h4><p><code>CoroutineScope</code>提供了一个范围，用于启动和管理协程。可以使用<code>GlobalScope</code>来启动全局协程，也可以使用自定义的<code>CoroutineScope</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">// 自定义CoroutineScope</span></span><br><span class="line">    <span class="keyword">val</span> scope = CoroutineScope(Dispatchers.Default)</span><br><span class="line">    scope.launch &#123;</span><br><span class="line">        println(<span class="string">&quot;Custom Scope: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用GlobalScope</span></span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;Global Scope: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Main: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    delay(<span class="number">2000L</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，创建了一个自定义的<code>CoroutineScope</code>并启动了一个协程。同时，使用<code>GlobalScope</code>启动了一个全局协程。</p><h3 id="三、协程的取消与超时"><a href="#三、协程的取消与超时" class="headerlink" title="三、协程的取消与超时"></a>三、协程的取消与超时</h3><h4 id="3-1-取消协程"><a href="#3-1-取消协程" class="headerlink" title="3.1 取消协程"></a>3.1 取消协程</h4><p>协程可以被取消，通过<code>Job</code>对象可以取消协程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Job: I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>)</span><br><span class="line">    println(<span class="string">&quot;Main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// 取消并等待完成</span></span><br><span class="line">    println(<span class="string">&quot;Main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，使用<code>job.cancelAndJoin()</code>来取消协程并等待其完成。</p><h4 id="3-2-协程超时"><a href="#3-2-协程超时" class="headerlink" title="3.2 协程超时"></a>3.2 协程超时</h4><p>可以使用<code>withTimeout</code>或<code>withTimeoutOrNull</code>来设置协程的超时时间。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        withTimeout(<span class="number">1300L</span>) &#123;</span><br><span class="line">            repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">                println(<span class="string">&quot;Job: I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">                delay(<span class="number">500L</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: TimeoutCancellationException) &#123;</span><br><span class="line">        println(<span class="string">&quot;Main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>withTimeout</code>设置了一个超时时间，如果协程在指定时间内没有完成，则抛出<code>TimeoutCancellationException</code>。</p><h3 id="四、协程的源码解析"><a href="#四、协程的源码解析" class="headerlink" title="四、协程的源码解析"></a>四、协程的源码解析</h3><h4 id="4-1-CoroutineScope和CoroutineContext"><a href="#4-1-CoroutineScope和CoroutineContext" class="headerlink" title="4.1 CoroutineScope和CoroutineContext"></a>4.1 CoroutineScope和CoroutineContext</h4><p><code>CoroutineScope</code>和<code>CoroutineContext</code>是协程的核心组件。<code>CoroutineScope</code>提供了一个范围，用于启动协程，<code>CoroutineContext</code>定义了协程的执行环境。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoroutineScope</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">&#125;</span><br><span class="line">kotlin</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoroutineContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E : Element&gt;</span> <span class="title">get</span><span class="params">(key: <span class="type">Key</span>&lt;<span class="type">E</span>&gt;)</span></span>: E?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-launch函数"><a href="#4-2-launch函数" class="headerlink" title="4.2 launch函数"></a>4.2 launch函数</h4><p><code>launch</code>函数用于启动一个新的协程，它是一个挂起函数，返回一个<code>Job</code>对象。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Job &#123;</span><br><span class="line">    <span class="keyword">val</span> newContext = newCoroutineContext(context)</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span> (start.isLazy) LazyStandaloneCoroutine(newContext, block) <span class="keyword">else</span> StandaloneCoroutine(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    coroutine.start(start, coroutine, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个实现中，<code>launch</code>函数创建了一个新的<code>CoroutineContext</code>，然后根据启动模式创建一个新的<code>Coroutine</code>对象，并启动协程。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>协程为我们提供了一种简洁、高效的方式来处理异步任务，使我们的代码更加简洁和易读。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Context继承关系和使用</title>
      <link href="/blog/2019/11/02/Android-Context%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2019/11/02/Android-Context%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Application和Activity在Context的继承树上的区别及使用上的不同"><a href="#Application和Activity在Context的继承树上的区别及使用上的不同" class="headerlink" title="Application和Activity在Context的继承树上的区别及使用上的不同"></a>Application和Activity在Context的继承树上的区别及使用上的不同</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android应用开发中，<code>Context</code>是一个非常重要的类，提供了应用环境的信息，并允许访问应用的资源、启动Activity、发送广播等操作。<code>Context</code>有多种不同的实现，最常用的有<code>Application</code>和<code>Activity</code>。本文将详细分析<code>Application</code>和<code>Activity</code>在Context的继承树上的区别，以及二者在使用上的不同，并结合源码进行详细说明。</p><h4 id="2-Context的继承树"><a href="#2-Context的继承树" class="headerlink" title="2. Context的继承树"></a>2. Context的继承树</h4><p><code>Context</code>是一个抽象类，其主要实现包括<code>ContextImpl</code>、<code>ContextWrapper</code>、<code>Application</code>和<code>Activity</code>等。</p><h5 id="2-1-Context的继承结构"><a href="#2-1-Context的继承结构" class="headerlink" title="2.1 Context的继承结构"></a>2.1 Context的继承结构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Context <span class="title function_">getApplicationContext</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span>;</span><br><span class="line">    <span class="comment">// 其他抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextImpl</span> <span class="keyword">extends</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Context <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageInfo.getApplication();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他实现代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextWrapper</span> <span class="keyword">extends</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Context mBase;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ContextWrapper</span><span class="params">(Context base)</span> &#123;</span><br><span class="line">        mBase = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Context <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivity</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        mBase.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他实现代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_">ContextWrapper</span> <span class="keyword">implements</span> <span class="title class_">ComponentCallbacks2</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activity</span> <span class="keyword">extends</span> <span class="title class_">ContextThemeWrapper</span> <span class="keyword">implements</span> <span class="title class_">ComponentCallbacks2</span>, Window.Callback, KeyEvent.Callback, OnCreateContextMenuListener &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Application和Activity的区别"><a href="#3-Application和Activity的区别" class="headerlink" title="3. Application和Activity的区别"></a>3. Application和Activity的区别</h4><h5 id="3-1-Application"><a href="#3-1-Application" class="headerlink" title="3.1 Application"></a>3.1 Application</h5><p><code>Application</code>是整个应用的上下文，生命周期与应用的生命周期一致，在应用的任何组件（如Activity、Service等）被创建之前就被创建，并在应用被销毁时销毁。</p><h6 id="Application的使用场景"><a href="#Application的使用场景" class="headerlink" title="Application的使用场景"></a>Application的使用场景</h6><ol><li><strong>全局状态管理</strong>：存储和管理全局的状态或数据。</li><li><strong>单例模式</strong>：实现应用级的单例模式。</li><li><strong>全局初始化</strong>：执行全局的初始化操作，如第三方SDK的初始化。</li></ol><h6 id="Application的使用示例"><a href="#Application的使用示例" class="headerlink" title="Application的使用示例"></a>Application的使用示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String globalData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 全局初始化操作</span></span><br><span class="line">        globalData = <span class="string">&quot;This is global data&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGlobalData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> globalData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGlobalData</span><span class="params">(String globalData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.globalData = globalData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-Activity"><a href="#3-2-Activity" class="headerlink" title="3.2 Activity"></a>3.2 Activity</h5><p><code>Activity</code>是用户界面的一个单独屏幕，每个Activity都有自己的生命周期，并在其生命周期内提供用户界面和用户交互。</p><h6 id="Activity的使用场景"><a href="#Activity的使用场景" class="headerlink" title="Activity的使用场景"></a>Activity的使用场景</h6><ol><li><strong>用户界面</strong>：管理用户界面和用户交互。</li><li><strong>上下文操作</strong>：启动其他Activity、获取资源、访问系统服务等。</li></ol><h6 id="Activity的使用示例"><a href="#Activity的使用示例" class="headerlink" title="Activity的使用示例"></a>Activity的使用示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取全局数据</span></span><br><span class="line">        <span class="type">MyApplication</span> <span class="variable">app</span> <span class="operator">=</span> (MyApplication) getApplicationContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">globalData</span> <span class="operator">=</span> app.getGlobalData();</span><br><span class="line">        System.out.println(<span class="string">&quot;Global Data: &quot;</span> + globalData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动其他Activity</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Application和Activity的使用区别"><a href="#4-Application和Activity的使用区别" class="headerlink" title="4. Application和Activity的使用区别"></a>4. Application和Activity的使用区别</h4><h5 id="4-1-生命周期"><a href="#4-1-生命周期" class="headerlink" title="4.1 生命周期"></a>4.1 生命周期</h5><ul><li><strong>Application</strong>：生命周期与应用一致，在应用启动时创建，在应用退出时销毁。</li><li><strong>Activity</strong>：生命周期与用户界面相关，在用户打开界面时创建，在用户离开界面时销毁。</li></ul><h5 id="4-2-上下文操作"><a href="#4-2-上下文操作" class="headerlink" title="4.2 上下文操作"></a>4.2 上下文操作</h5><ul><li><strong>Application</strong>：适合用于全局的上下文操作，如获取应用级资源、启动全局的服务等。</li><li><strong>Activity</strong>：适合用于界面相关的上下文操作，如获取视图资源、启动其他Activity等。</li></ul><h5 id="4-3-内存泄漏"><a href="#4-3-内存泄漏" class="headerlink" title="4.3 内存泄漏"></a>4.3 内存泄漏</h5><p>由于<code>Application</code>的生命周期长，如果在<code>Application</code>中持有对<code>Activity</code>或其他短生命周期对象的引用，容易导致内存泄漏。因此，在<code>Application</code>中应避免直接引用<code>Activity</code>。</p><h4 id="5-源码解析"><a href="#5-源码解析" class="headerlink" title="5. 源码解析"></a>5. 源码解析</h4><p>以下是<code>Application</code>和<code>Activity</code>的部分源码解析。</p><h5 id="5-1-Application源码解析"><a href="#5-1-Application源码解析" class="headerlink" title="5.1 Application源码解析"></a>5.1 Application源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_">ContextWrapper</span> <span class="keyword">implements</span> <span class="title class_">ComponentCallbacks2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 应用启动时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTerminate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 应用终止时调用，仅在模拟器中调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLowMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 系统内存不足时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> &#123;</span><br><span class="line">        <span class="comment">// 配置改变时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-Activity源码解析"><a href="#5-2-Activity源码解析" class="headerlink" title="5.2 Activity源码解析"></a>5.2 Activity源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Activity</span> <span class="keyword">extends</span> <span class="title class_">ContextThemeWrapper</span> <span class="keyword">implements</span> <span class="title class_">ComponentCallbacks2</span>, Window.Callback, KeyEvent.Callback, OnCreateContextMenuListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// Activity创建时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        <span class="comment">// Activity可见时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        <span class="comment">// Activity与用户交互时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        <span class="comment">// Activity暂停时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">        <span class="comment">// Activity不可见时调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">// Activity销毁时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p>通过本文的详细分析，我们深入了解了<code>Application</code>和<code>Activity</code>在<code>Context</code>继承树上的区别，以及二者在使用上的不同。<code>Application</code>适用于全局的上下文操作，而<code>Activity</code>适用于界面相关的上下文操作。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本的SQL操作</title>
      <link href="/blog/2019/09/12/%E5%9F%BA%E6%9C%AC%E7%9A%84SQL%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2019/09/12/%E5%9F%BA%E6%9C%AC%E7%9A%84SQL%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>下面是总结的一些SQL教程，涵盖插入数据、修改数据、修改字段类型、修改字段名称、删除数据和查询数据等内容。每个部分都包含示例和详细说明，以确保内容丰富且易于理解。</p><h3 id="SQL教程"><a href="#SQL教程" class="headerlink" title="SQL教程"></a>SQL教程</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ol><li>数据库的基本概念</li><li>创建数据库和表</li><li>插入数据</li><li>更新数据</li><li>修改字段类型</li><li>修改字段名称</li><li>删除数据</li><li>查询数据</li><li>视图的使用</li><li>索引的使用</li><li>事务处理</li></ol><hr><h3 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1. 数据库的基本概念"></a>1. 数据库的基本概念</h3><p>数据库（Database）是用于存储和管理数据的系统。SQL（Structured Query Language）是用于操作数据库的标准语言。</p><h3 id="2-创建数据库和表"><a href="#2-创建数据库和表" class="headerlink" title="2. 创建数据库和表"></a>2. 创建数据库和表</h3><p><strong>创建数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE DATABASE my_database;</span><br></pre></td></tr></table></figure><p><strong>选择数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">USE my_database;</span><br></pre></td></tr></table></figure><p><strong>创建表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE TABLE employees (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    position VARCHAR(50),</span><br><span class="line">    salary DECIMAL(10, 2),</span><br><span class="line">    hire_date DATE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h3><p><strong>单条插入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">INSERT INTO employees (name, position, salary, hire_date)</span><br><span class="line">VALUES (&#x27;John Doe&#x27;, &#x27;Software Engineer&#x27;, 70000, &#x27;2023-06-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>多条插入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">INSERT INTO employees (name, position, salary, hire_date)</span><br><span class="line">VALUES </span><br><span class="line">(&#x27;Jane Smith&#x27;, &#x27;Data Scientist&#x27;, 80000, &#x27;2023-07-15&#x27;),</span><br><span class="line">(&#x27;Emily Davis&#x27;, &#x27;Product Manager&#x27;, 90000, &#x27;2023-08-10&#x27;);</span><br></pre></td></tr></table></figure><h3 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4. 更新数据"></a>4. 更新数据</h3><p><strong>更新单条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = 75000</span><br><span class="line">WHERE name = &#x27;John Doe&#x27;;</span><br></pre></td></tr></table></figure><p><strong>更新多条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = salary * 1.1</span><br><span class="line">WHERE hire_date &lt; &#x27;2023-07-01&#x27;;</span><br></pre></td></tr></table></figure><h3 id="5-修改字段类型"><a href="#5-修改字段类型" class="headerlink" title="5. 修改字段类型"></a>5. 修改字段类型</h3><p><strong>修改字段类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees</span><br><span class="line">MODIFY COLUMN salary FLOAT;</span><br></pre></td></tr></table></figure><h3 id="6-修改字段名称"><a href="#6-修改字段名称" class="headerlink" title="6. 修改字段名称"></a>6. 修改字段名称</h3><p><strong>修改字段名称</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ALTER TABLE employees</span><br><span class="line">CHANGE COLUMN position job_title VARCHAR(50);</span><br></pre></td></tr></table></figure><h3 id="7-删除数据"><a href="#7-删除数据" class="headerlink" title="7. 删除数据"></a>7. 删除数据</h3><p><strong>删除单条记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DELETE FROM employees</span><br><span class="line">WHERE name = &#x27;Emily Davis&#x27;;</span><br></pre></td></tr></table></figure><p><strong>删除所有记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DELETE FROM employees;</span><br></pre></td></tr></table></figure><p><strong>删除表中的所有记录并重置自增ID</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE employees;</span><br></pre></td></tr></table></figure><h3 id="8-查询数据"><a href="#8-查询数据" class="headerlink" title="8. 查询数据"></a>8. 查询数据</h3><p><strong>查询所有记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary &gt; 75000;</span><br></pre></td></tr></table></figure><p><strong>排序查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees</span><br><span class="line">ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p><strong>聚合查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary) AS average_salary FROM employees;</span><br></pre></td></tr></table></figure><p><strong>分组查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT position, COUNT(*) AS count FROM employees</span><br><span class="line">GROUP BY position;</span><br></pre></td></tr></table></figure><h3 id="9-视图的使用"><a href="#9-视图的使用" class="headerlink" title="9. 视图的使用"></a>9. 视图的使用</h3><p><strong>创建视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE VIEW high_salary_employees AS</span><br><span class="line">SELECT * FROM employees</span><br><span class="line">WHERE salary &gt; 75000;</span><br></pre></td></tr></table></figure><p><strong>查询视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">SELECT * FROM high_salary_employees;</span><br></pre></td></tr></table></figure><h3 id="10-索引的使用"><a href="#10-索引的使用" class="headerlink" title="10. 索引的使用"></a>10. 索引的使用</h3><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_position ON employees(position);</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">DROP INDEX idx_position ON employees;</span><br></pre></td></tr></table></figure><h3 id="11-事务处理"><a href="#11-事务处理" class="headerlink" title="11. 事务处理"></a>11. 事务处理</h3><p><strong>开启事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">START TRANSACTION;</span><br></pre></td></tr></table></figure><p><strong>提交事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p><strong>回滚事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p><strong>事务示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line"></span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">UPDATE employees</span><br><span class="line">SET salary = 72000</span><br><span class="line">WHERE name = &#x27;Jane Smith&#x27;;</span><br><span class="line"></span><br><span class="line">DELETE FROM employees</span><br><span class="line">WHERE name = &#x27;John Doe&#x27;;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><hr><p>以上就是本篇文章的内容.</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin扩展函数（一）</title>
      <link href="/blog/2019/08/09/Kotlin%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%90%88%E9%9B%86/"/>
      <url>/blog/2019/08/09/Kotlin%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Kotlin中集合Collection"><a href="#Kotlin中集合Collection" class="headerlink" title="Kotlin中集合Collection"></a>Kotlin中集合Collection</h3><h4 id="使用"><a href="#使用" class="headerlink" title="[使用]"></a>[使用]</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;androidx.collection:collection-ktx:x.x.x&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="[用法]"></a>[用法]</h4><p>Kotlin 的集合框架提供了丰富的扩展函数，这些函数可以帮助我们方便地操作和处理集合数据。本文将详细介绍一些常用的集合扩展函数及其用法。</p><h4 id="Collection-扩展函数"><a href="#Collection-扩展函数" class="headerlink" title="Collection 扩展函数"></a>Collection 扩展函数</h4><ul><li><p><code>filterNot()</code>：返回一个新的集合，包含原集合中不满足给定条件的元素。</p> <figure class="highlight kotlin"><figcaption><span>val numbers </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> evenNumbers = numbers.filterNot &#123; it % <span class="number">2</span> != <span class="number">0</span> &#125;</span><br><span class="line">println(evenNumbers) <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>filterNotNull()</code>：返回一个新的集合，过滤掉所有 null 元素。</p> <figure class="highlight kotlin"><figcaption><span>val numbers </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nonNullNumbers = numbers.filterNotNull()</span><br><span class="line">println(nonNullNumbers) <span class="comment">// 输出: [1, 3, 5]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="List-扩展函数"><a href="#List-扩展函数" class="headerlink" title="List 扩展函数"></a>List 扩展函数</h4><ul><li><p><code>sorted()</code>：返回一个新的 List，按自然顺序排序。</p> <figure class="highlight kotlin"><figcaption><span>val numbers </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sortedNumbers = numbers.sorted()</span><br><span class="line">println(sortedNumbers) <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sortedBy()</code>：返回一个新的 List，按指定的方式排序。</p> <figure class="highlight kotlin"><figcaption><span>data class Person(val name: String, val age: Int)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> people = listOf(Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>), Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>), Person(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>))</span><br><span class="line"><span class="keyword">val</span> sortedPeople = people.sortedBy &#123; it.age &#125;</span><br><span class="line">println(sortedPeople) <span class="comment">// 输出: [Person(name=Bob, age=25), Person(name=Alice, age=30), Person(name=Charlie, age=35)]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sortedDescending()</code>：返回一个新的 List，按自然顺序降序排序。</p> <figure class="highlight kotlin"><figcaption><span>val numbers </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sortedNumbers = numbers.sortedDescending()</span><br><span class="line">println(sortedNumbers) <span class="comment">// 输出: [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sortedByDescending()</code>：返回一个新的 List，按指定的方式降序排序。</p> <figure class="highlight kotlin"><figcaption><span>data class Person(val name: String, val age: Int)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> people = listOf(Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>), Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>), Person(<span class="string">&quot;Charlie&quot;</span>, <span class="number">35</span>))</span><br><span class="line"><span class="keyword">val</span> sortedPeople = people.sortedByDescending &#123; it.age &#125;</span><br><span class="line">println(sortedPeople) <span class="comment">// 输出: [Person(name=Charlie, age=35), Person(name=Alice, age=30), Person(name=Bob, age=25)]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Set-扩展函数"><a href="#Set-扩展函数" class="headerlink" title="Set 扩展函数"></a>Set 扩展函数</h4><ul><li><p><code>union()</code>：返回一个包含两个集合中所有元素的 Set，不包含重复元素。</p> <figure class="highlight kotlin"><figcaption><span>val set1 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> set2 = setOf(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> unionSet = set1.union(set2)</span><br><span class="line">println(unionSet) <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>intersect()</code>：返回一个包含两个集合中公共元素的 Set。</p> <figure class="highlight plaintext"><figcaption><span>set1 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val set2 = setOf(3, 4, 5)</span><br><span class="line">val intersectSet = set1.intersect(set2)</span><br><span class="line">println(intersectSet) // 输出: [3]</span><br></pre></td></tr></table></figure></li><li><p><code>subtract()</code>：返回一个包含从第一个集合中减去第二个集合中的元素的 Set。</p> <figure class="highlight plaintext"><figcaption><span>set1 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val set2 = setOf(3, 4, 5)</span><br><span class="line">val subtractSet = set1.subtract(set2)</span><br><span class="line">println(subtractSet) // 输出: [1, 2]</span><br></pre></td></tr></table></figure></li></ul><h4 id="Map-扩展函数"><a href="#Map-扩展函数" class="headerlink" title="Map 扩展函数"></a>Map 扩展函数</h4><ul><li><p><code>mapKeys()</code>：返回一个包含将原 Map 的键变换后的新 Map。</p> <figure class="highlight kotlin"><figcaption><span>val map </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> newMap = map.mapKeys &#123; it.key.toUpperCase() &#125;</span><br><span class="line">println(newMap) <span class="comment">// 输出: &#123;A=1, B=2, C=3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>mapValues()</code>：返回一个包含将原 Map 的值变换后的新 Map。</p> <figure class="highlight kotlin"><figcaption><span>val map </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> newMap = map.mapValues &#123; it.value * <span class="number">2</span> &#125;</span><br><span class="line">println(newMap) <span class="comment">// 输出: &#123;a=2, b=4, c=6&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>filterKeys()</code>：返回一个包含原 Map 中符合指定条件的键的键值对的新 Map。</p> <figure class="highlight kotlin"><figcaption><span>val map </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> filteredMap = map.filterKeys &#123; it != <span class="string">&quot;b&quot;</span> &#125;</span><br><span class="line">println(filteredMap) <span class="comment">// 输出: &#123;a=1, c=3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>filterValues()</code>：返回一个包含原 Map 中符合指定条件的值的键值对的新 Map。</p> <figure class="highlight kotlin"><figcaption><span>val map </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> filteredMap = map.filterValues &#123; it &gt; <span class="number">1</span> &#125;</span><br><span class="line">println(filteredMap) <span class="comment">// 输出: &#123;b=2, c=3&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>通过使用这些集合扩展函数，可以更加高效地操作和处理集合数据，从而提高代码的可读性和可维护性。希望本文对你有所帮助，如果有任何疑问或建议，欢迎在评论区交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展 </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OkIO详解</title>
      <link href="/blog/2019/08/06/OkIO%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2019/08/06/OkIO%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="OKIO详解"><a href="#OKIO详解" class="headerlink" title="OKIO详解"></a>OKIO详解</h1><p>OKIO是一个由Square公司开发的高效、易用的I&#x2F;O库，广泛用于处理文件和网络I&#x2F;O。OKIO通过提供简单的API和丰富的功能，极大地简化了字节流和字符流的操作。本文将详细解析OKIO的基本用法、核心功能及其一些高级特性，并结合实例帮助读者更好地理解和应用OKIO。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#okio%E8%AF%A6%E8%A7%A3">OKIO详解</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">依赖配置</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a><ul><li><a href="#sink">Sink</a></li><li><a href="#source">Source</a></li><li><a href="#buffer">Buffer</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">基本用法</a><ul><li><a href="#%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE">写入数据</a></li><li><a href="#%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE">读取数据</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">文件操作</a><ul><li><a href="#%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6">复制文件</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C">网络操作</a><ul><li><a href="#%E4%BB%8E%E7%BD%91%E7%BB%9C%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE">从网络读取数据</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7">高级特性</a><ul><li><a href="#%E5%AD%97%E8%8A%82%E5%AD%97%E7%AC%A6%E4%B8%B2">字节字符串</a></li><li><a href="#%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6">超时控制</a></li></ul></li><li><a href="#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">示例代码</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OKIO是一个简洁而高效的I&#x2F;O库，提供了类似于Java I&#x2F;O的功能，但更简洁、更高效。它解决了Java I&#x2F;O的一些常见问题，如缓冲区管理、字符集转换和错误处理等。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>在项目的<code>build.gradle</code>文件中添加以下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groovydependencies &#123;</span><br><span class="line">    implementation &#x27;com.squareup.okio:okio:3.0.0&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>OKIO的核心概念包括Sink、Source和Buffer。这些类提供了读写字节和字符的基本操作。</p><h3 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h3><p>Sink表示一个字节流的目标，可以是文件、网络连接等。通过Sink，你可以将数据写入到目标中。</p><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Source表示一个字节流的来源，可以是文件、网络连接等。通过Source，你可以从来源中读取数据。</p><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer是一个中间缓冲区，用于存储读写操作中的数据。它提供了高效的读写操作，简化了字节和字符的转换。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>使用Sink可以将数据写入文件或其他目标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.Buffer;</span><br><span class="line">import okio.BufferedSink;</span><br><span class="line">import okio.Okio;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class OkioWriteExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file = new File(&quot;example.txt&quot;);</span><br><span class="line">        try (BufferedSink sink = Okio.buffer(Okio.sink(file))) &#123;</span><br><span class="line">            sink.writeUtf8(&quot;Hello, OKIO!&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>使用Source可以从文件或其他来源读取数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.Buffer;</span><br><span class="line">import okio.BufferedSource;</span><br><span class="line">import okio.Okio;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class OkioReadExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file = new File(&quot;example.txt&quot;);</span><br><span class="line">        try (BufferedSource source = Okio.buffer(Okio.source(file))) &#123;</span><br><span class="line">            String data = source.readUtf8();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>OKIO可以方便地进行文件操作，如读写文件、复制文件等。</p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.Okio;</span><br><span class="line">import okio.Source;</span><br><span class="line">import okio.Sink;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class OkioFileCopyExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File sourceFile = new File(&quot;source.txt&quot;);</span><br><span class="line">        File destinationFile = new File(&quot;destination.txt&quot;);</span><br><span class="line"></span><br><span class="line">        try (Source source = Okio.source(sourceFile);</span><br><span class="line">             Sink sink = Okio.sink(destinationFile)) &#123;</span><br><span class="line">            Okio.buffer(sink).writeAll(source);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h2><p>OKIO也可以用于网络操作，如从网络读取数据或向网络发送数据。</p><h3 id="从网络读取数据"><a href="#从网络读取数据" class="headerlink" title="从网络读取数据"></a>从网络读取数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.BufferedSource;</span><br><span class="line">import okio.Okio;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">public class OkioNetworkExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(&quot;https://www.example.com&quot;);</span><br><span class="line">            BufferedSource source = Okio.buffer(Okio.source(url.openStream()));</span><br><span class="line">            String data = source.readUtf8();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="字节字符串"><a href="#字节字符串" class="headerlink" title="字节字符串"></a>字节字符串</h3><p>OKIO提供了<code>ByteString</code>类，用于高效处理不可变的字节序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.ByteString;</span><br><span class="line"></span><br><span class="line">public class OkioByteStringExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ByteString byteString = ByteString.encodeUtf8(&quot;Hello, OKIO!&quot;);</span><br><span class="line">        System.out.println(byteString.utf8());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h3><p>OKIO允许设置读写操作的超时时间，以防止长时间等待。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.Buffer;</span><br><span class="line">import okio.BufferedSource;</span><br><span class="line">import okio.Timeout;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class OkioTimeoutExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Buffer buffer = new Buffer();</span><br><span class="line">        buffer.writeUtf8(&quot;Hello, OKIO!&quot;);</span><br><span class="line"></span><br><span class="line">        BufferedSource source = buffer;</span><br><span class="line">        source.timeout().timeout(5, java.util.concurrent.TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(source.readUtf8());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面是一个综合示例，演示了OKIO的读写文件操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">javaimport okio.BufferedSink;</span><br><span class="line">import okio.BufferedSource;</span><br><span class="line">import okio.Okio;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class OkioExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file = new File(&quot;example.txt&quot;);</span><br><span class="line"></span><br><span class="line">        // 写入数据</span><br><span class="line">        try (BufferedSink sink = Okio.buffer(Okio.sink(file))) &#123;</span><br><span class="line">            sink.writeUtf8(&quot;Hello, OKIO!&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 读取数据</span><br><span class="line">        try (BufferedSource source = Okio.buffer(Okio.source(file))) &#123;</span><br><span class="line">            String data = source.readUtf8();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OKIO是一个强大且灵活的I&#x2F;O库，通过简洁的API和高效的实现，极大地简化了文件和网络的读写操作。无论是基本的文件读写，还是复杂的网络操作，OKIO都提供了全面的支持。通过本文的介绍，希望读者能够掌握OKIO的基本用法，并在实际项目中灵活运用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> OkIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Handler的post实现原理及优先级解析</title>
      <link href="/blog/2019/06/22/Android-Handler%E7%9A%84post%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2019/06/22/Android-Handler%E7%9A%84post%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="Handler的post-Runnable-实现原理及优先级解析"><a href="#Handler的post-Runnable-实现原理及优先级解析" class="headerlink" title="Handler的post(Runnable)实现原理及优先级解析"></a>Handler的post(Runnable)实现原理及优先级解析</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android中，<code>Handler</code>类用于管理线程之间的通信，主要通过消息（<code>Message</code>）和可运行任务（<code>Runnable</code>）来实现。本文将详细介绍<code>Handler</code>的<code>post(Runnable)</code>方法的实现原理，以及<code>callback</code>、<code>runnable</code>和<code>msg</code>的执行优先级，并结合源码和注释进行深入解析。</p><h4 id="2-Handler的post-Runnable-实现原理"><a href="#2-Handler的post-Runnable-实现原理" class="headerlink" title="2. Handler的post(Runnable)实现原理"></a>2. Handler的post(Runnable)实现原理</h4><p><code>Handler</code>的<code>post(Runnable)</code>方法用于将一个<code>Runnable</code>任务添加到消息队列中，并在指定的时间执行。其实现原理是将<code>Runnable</code>封装成一个<code>Message</code>，然后将该<code>Message</code>添加到消息队列中。</p><h5 id="2-1-Handler-post-Runnable-的实现"><a href="#2-1-Handler-post-Runnable-的实现" class="headerlink" title="2.1 Handler.post(Runnable)的实现"></a>2.1 Handler.post(Runnable)的实现</h5><p>首先，我们来看<code>Handler</code>类中<code>post(Runnable)</code>方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">post</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postDelayed</span><span class="params">(Runnable r, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title function_">getPostMessage</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>post(Runnable)</code>方法中，通过调用<code>getPostMessage(Runnable)</code>方法将<code>Runnable</code>封装成一个<code>Message</code>对象，然后调用<code>sendMessageDelayed(Message, long)</code>方法将该<code>Message</code>添加到消息队列中。</p><h5 id="2-2-sendMessageDelayed的实现"><a href="#2-2-sendMessageDelayed的实现" class="headerlink" title="2.2 sendMessageDelayed的实现"></a>2.2 sendMessageDelayed的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sendMessageDelayed</code>方法最终调用<code>sendMessageAtTime(Message, long)</code>方法，将消息添加到指定时间点的消息队列中。</p><h5 id="2-3-sendMessageAtTime的实现"><a href="#2-3-sendMessageAtTime的实现" class="headerlink" title="2.3 sendMessageAtTime的实现"></a>2.3 sendMessageAtTime的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                <span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">        Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    msg.target = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>sendMessageAtTime</code>方法中，首先获取<code>Handler</code>所关联的消息队列<code>mQueue</code>，然后调用<code>enqueueMessage(MessageQueue, Message, long)</code>方法将消息添加到消息队列中。</p><h5 id="2-4-MessageQueue-enqueueMessage的实现"><a href="#2-4-MessageQueue-enqueueMessage的实现" class="headerlink" title="2.4 MessageQueue.enqueueMessage的实现"></a>2.4 MessageQueue.enqueueMessage的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        msg.when = when;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            mBlocked = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>enqueueMessage</code>方法将消息按时间顺序插入到消息队列中。</p><h4 id="3-callback、runnable和msg的执行优先级"><a href="#3-callback、runnable和msg的执行优先级" class="headerlink" title="3. callback、runnable和msg的执行优先级"></a>3. callback、runnable和msg的执行优先级</h4><p>在<code>Handler</code>的消息处理机制中，<code>callback</code>、<code>runnable</code>和普通的<code>msg</code>有不同的执行优先级。</p><h5 id="3-1-callback的执行优先级"><a href="#3-1-callback的执行优先级" class="headerlink" title="3.1 callback的执行优先级"></a>3.1 callback的执行优先级</h5><p>当<code>Message</code>的<code>callback</code>属性不为空时，<code>Handler</code>会优先执行<code>callback</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    message.callback.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dispatchMessage</code>方法中，如果<code>Message</code>的<code>callback</code>属性不为空，则调用<code>handleCallback(Message)</code>方法执行<code>callback</code>。<code>handleCallback</code>方法调用<code>Runnable</code>的<code>run</code>方法。</p><h5 id="3-2-runnable的执行优先级"><a href="#3-2-runnable的执行优先级" class="headerlink" title="3.2 runnable的执行优先级"></a>3.2 runnable的执行优先级</h5><p>通过<code>post(Runnable)</code>方法添加到消息队列的<code>Runnable</code>任务会被封装成<code>Message</code>，其<code>callback</code>属性指向该<code>Runnable</code>，因此其执行优先级与<code>callback</code>相同。</p><h5 id="3-3-msg的执行优先级"><a href="#3-3-msg的执行优先级" class="headerlink" title="3.3 msg的执行优先级"></a>3.3 msg的执行优先级</h5><p>普通的消息<code>msg</code>没有<code>callback</code>属性，<code>Handler</code>会调用其<code>handleMessage(Message)</code>方法处理消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="comment">// 子类需要重写此方法处理消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>callback</code>属性为空时，<code>Handler</code>会先检查自身的<code>mCallback</code>是否为空，如果不为空，则调用<code>mCallback</code>的<code>handleMessage(Message)</code>方法。如果<code>mCallback</code>也为空，则调用<code>Handler</code>的<code>handleMessage(Message)</code>方法处理消息。</p><h4 id="4-详细源码解析"><a href="#4-详细源码解析" class="headerlink" title="4. 详细源码解析"></a>4. 详细源码解析</h4><p>以下是详细的源码解析。</p><h5 id="4-1-Handler-post-Runnable-源码解析"><a href="#4-1-Handler-post-Runnable-源码解析" class="headerlink" title="4.1 Handler.post(Runnable)源码解析"></a>4.1 Handler.post(Runnable)源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">post</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="comment">// 将Runnable封装成Message并发送</span></span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postDelayed</span><span class="params">(Runnable r, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="comment">// 将Runnable封装成Message并延迟发送</span></span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title function_">getPostMessage</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取一个Message并设置其callback属性为Runnable</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-sendMessageDelayed和sendMessageAtTime源码解析"><a href="#4-2-sendMessageDelayed和sendMessageAtTime源码解析" class="headerlink" title="4.2 sendMessageDelayed和sendMessageAtTime源码解析"></a>4.2 sendMessageDelayed和sendMessageAtTime源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算消息的发送时间</span></span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取消息队列并将消息添加到队列中</span></span><br><span class="line">    <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                <span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">        Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-MessageQueue-enqueueMessage源码解析"><a href="#4-3-MessageQueue-enqueueMessage源码解析" class="headerlink" title="4.3 MessageQueue.enqueueMessage源码解析"></a>4.3 MessageQueue.enqueueMessage源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        msg.when = when;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// 插入到队列头部</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            mBlocked = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 插入到队列中间或尾部</span></span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-Handler-dispatchMessage和handleCallback源码解析"><a href="#4-4-Handler-dispatchMessage和handleCallback源码解析" class="headerlink" title="4.4 Handler.dispatchMessage和handleCallback源码解析"></a>4.4 Handler.dispatchMessage和handleCallback源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 优先执行callback</span></span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行mCallback的handleMessage方法</span></span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行Handler的handleMessage方法</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    <span class="comment">// 执行Runnable的run方法</span></span><br><span class="line">    message.callback.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>通过本文的详细分析，我们深入了解了<code>Handler</code>的<code>post(Runnable)</code>方法的实现原理，以及<code>callback</code>、<code>runnable</code>和<code>msg</code>的执行优先级。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-垃圾回收算法详解</title>
      <link href="/blog/2019/05/25/Android-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2019/05/25/Android-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="安卓中的内存模型与垃圾回收算法详解"><a href="#安卓中的内存模型与垃圾回收算法详解" class="headerlink" title="安卓中的内存模型与垃圾回收算法详解"></a>安卓中的内存模型与垃圾回收算法详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android开发中，内存管理和垃圾回收（Garbage Collection，GC）是非常重要的主题。内存管理的好坏直接影响应用的性能和稳定性。本文将详细介绍Android中的内存模型和垃圾回收算法，包括源码，并进行详细的对比分析。</p><h4 id="2-内存模型"><a href="#2-内存模型" class="headerlink" title="2. 内存模型"></a>2. 内存模型</h4><p>Android的内存模型主要由以下几个部分组成：</p><ol><li><strong>堆内存（Heap Memory）</strong>：用于动态分配对象的内存区域。</li><li><strong>栈内存（Stack Memory）</strong>：用于方法调用和局部变量的内存区域。</li><li><strong>本地内存（Native Memory）</strong>：用于JNI调用和其他本地资源的内存区域。</li></ol><h5 id="2-1-堆内存"><a href="#2-1-堆内存" class="headerlink" title="2.1 堆内存"></a>2.1 堆内存</h5><p>堆内存是Android应用中动态分配对象的主要区域。每个应用都有自己的堆内存，堆内存的大小可以通过配置文件进行调整。</p><h6 id="示例：调整堆内存大小"><a href="#示例：调整堆内存大小" class="headerlink" title="示例：调整堆内存大小"></a>示例：调整堆内存大小</h6><p>在<code>AndroidManifest.xml</code>中可以通过<code>android:largeHeap</code>属性来请求更大的堆内存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line"></span><br><span class="line">&lt;application</span><br><span class="line">    android:largeHeap=&quot;true&quot;</span><br><span class="line">    ... &gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><h5 id="2-2-栈内存"><a href="#2-2-栈内存" class="headerlink" title="2.2 栈内存"></a>2.2 栈内存</h5><p>栈内存用于存储方法调用和局部变量。每个线程都有自己的栈内存，栈内存的大小一般较小且固定。</p><h6 id="示例：栈内存的使用"><a href="#示例：栈内存的使用" class="headerlink" title="示例：栈内存的使用"></a>示例：栈内存的使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line">public void exampleMethod() &#123;</span><br><span class="line">    int localVariable = 42; // 局部变量存储在栈内存中</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-本地内存"><a href="#2-3-本地内存" class="headerlink" title="2.3 本地内存"></a>2.3 本地内存</h5><p>本地内存用于JNI调用和其他本地资源的分配。这部分内存不受Java虚拟机（JVM）的管理，需要开发者手动管理。</p><h6 id="示例：JNI调用"><a href="#示例：JNI调用" class="headerlink" title="示例：JNI调用"></a>示例：JNI调用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line">public class NativeExample &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;native-lib&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public native String stringFromJNI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-垃圾回收算法"><a href="#3-垃圾回收算法" class="headerlink" title="3. 垃圾回收算法"></a>3. 垃圾回收算法</h4><p>Android中的垃圾回收算法主要由ART（Android Runtime）虚拟机管理。常用的垃圾回收算法包括标记-清除（Mark-Sweep）、标记-整理（Mark-Compact）和分代回收（Generational Garbage Collection）。</p><h5 id="3-1-标记-清除算法"><a href="#3-1-标记-清除算法" class="headerlink" title="3.1 标记-清除算法"></a>3.1 标记-清除算法</h5><p>标记-清除算法包括两个主要步骤：</p><ol><li><strong>标记</strong>：从根对象开始，遍历所有可达对象，并标记这些对象。</li><li><strong>清除</strong>：遍历堆内存，回收所有未标记的对象。</li></ol><h6 id="示例：标记-清除算法的伪代码"><a href="#示例：标记-清除算法的伪代码" class="headerlink" title="示例：标记-清除算法的伪代码"></a>示例：标记-清除算法的伪代码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">function markSweepGC(heap):</span><br><span class="line">    for each object in heap:</span><br><span class="line">        object.marked = false</span><br><span class="line"></span><br><span class="line">    for each root in roots:</span><br><span class="line">        mark(root)</span><br><span class="line"></span><br><span class="line">    for each object in heap:</span><br><span class="line">        if object.marked == false:</span><br><span class="line">            free(object)</span><br><span class="line"></span><br><span class="line">function mark(object):</span><br><span class="line">    if object.marked == true:</span><br><span class="line">        return</span><br><span class="line">    object.marked = true</span><br><span class="line">    for each reference in object.references:</span><br><span class="line">        mark(reference)</span><br></pre></td></tr></table></figure><h5 id="3-2-标记-整理算法"><a href="#3-2-标记-整理算法" class="headerlink" title="3.2 标记-整理算法"></a>3.2 标记-整理算法</h5><p>标记-整理算法与标记-清除算法类似，但在清除阶段，将存活对象压缩到堆的一端，减少内存碎片。</p><h6 id="示例：标记-整理算法的伪代码"><a href="#示例：标记-整理算法的伪代码" class="headerlink" title="示例：标记-整理算法的伪代码"></a>示例：标记-整理算法的伪代码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">function markCompactGC(heap):</span><br><span class="line">    for each object in heap:</span><br><span class="line">        object.marked = false</span><br><span class="line"></span><br><span class="line">    for each root in roots:</span><br><span class="line">        mark(root)</span><br><span class="line"></span><br><span class="line">    freePointer = heap.start</span><br><span class="line">    for each object in heap:</span><br><span class="line">        if object.marked == true:</span><br><span class="line">            copy(object, freePointer)</span><br><span class="line">            freePointer += object.size</span><br><span class="line"></span><br><span class="line">    for each object in heap:</span><br><span class="line">        if object.marked == false:</span><br><span class="line">            free(object)</span><br><span class="line"></span><br><span class="line">function mark(object):</span><br><span class="line">    if object.marked == true:</span><br><span class="line">        return</span><br><span class="line">    object.marked = true</span><br><span class="line">    for each reference in object.references:</span><br><span class="line">        mark(reference)</span><br><span class="line"></span><br><span class="line">function copy(object, destination):</span><br><span class="line">    // 复制对象到新位置</span><br></pre></td></tr></table></figure><h5 id="3-3-分代回收算法"><a href="#3-3-分代回收算法" class="headerlink" title="3.3 分代回收算法"></a>3.3 分代回收算法</h5><p>分代回收算法将堆内存划分为年轻代（Young Generation）、老年代（Old Generation）和永久代（Permanent Generation）。大部分对象在年轻代分配，短生命周期的对象在年轻代被回收，长生命周期的对象会晋升到老年代。</p><h6 id="示例：分代回收算法的结构"><a href="#示例：分代回收算法的结构" class="headerlink" title="示例：分代回收算法的结构"></a>示例：分代回收算法的结构</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Young Generation:</span><br><span class="line">    Eden Space</span><br><span class="line">    Survivor Space 1</span><br><span class="line">    Survivor Space 2</span><br><span class="line"></span><br><span class="line">Old Generation</span><br><span class="line"></span><br><span class="line">Permanent Generation</span><br></pre></td></tr></table></figure><h4 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h4><p>以下是Android垃圾回收算法相关源码的详细分析。</p><h5 id="4-1-ART虚拟机中的垃圾回收"><a href="#4-1-ART虚拟机中的垃圾回收" class="headerlink" title="4.1 ART虚拟机中的垃圾回收"></a>4.1 ART虚拟机中的垃圾回收</h5><p>ART虚拟机中的垃圾回收由<code>gc/collector</code>目录下的多个类实现，如<code>mark_sweep.h</code>和<code>mark_sweep.cc</code>。</p><h6 id="mark-sweep-h"><a href="#mark-sweep-h" class="headerlink" title="mark_sweep.h"></a>mark_sweep.h</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkSweep</span> : <span class="keyword">public</span> GarbageCollector &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MarkSweep</span><span class="params">(Heap* heap)</span></span>;</span><br><span class="line">    ~<span class="built_in">MarkSweep</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RunPhases</span><span class="params">()</span> OVERRIDE <span class="title">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">MarkingPhase</span><span class="params">()</span> <span class="title">REQUIRES</span><span class="params">(Locks::mutator_lock_)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ReclaimPhase</span><span class="params">()</span> <span class="title">REQUIRES</span><span class="params">(Locks::mutator_lock_)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="mark-sweep-cc"><a href="#mark-sweep-cc" class="headerlink" title="mark_sweep.cc"></a>mark_sweep.cc</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MarkSweep::RunPhases</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MarkingPhase</span>();</span><br><span class="line">    <span class="built_in">ReclaimPhase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MarkSweep::MarkingPhase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标记所有可达对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MarkSweep::ReclaimPhase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 回收所有未标记的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-内存模型和垃圾回收算法的对比"><a href="#5-内存模型和垃圾回收算法的对比" class="headerlink" title="5. 内存模型和垃圾回收算法的对比"></a>5. 内存模型和垃圾回收算法的对比</h4><h5 id="5-1-内存模型对比"><a href="#5-1-内存模型对比" class="headerlink" title="5.1 内存模型对比"></a>5.1 内存模型对比</h5><table><thead><tr><th>内存模型</th><th>作用</th><th>优缺点</th></tr></thead><tbody><tr><td>堆内存</td><td>动态分配对象</td><td>大小可调，但容易产生内存碎片</td></tr><tr><td>栈内存</td><td>方法调用和局部变量</td><td>高效，但大小固定，不能动态调整</td></tr><tr><td>本地内存</td><td>JNI调用和本地资源</td><td>高效，但需要手动管理，易产生内存泄漏</td></tr></tbody></table><h5 id="5-2-垃圾回收算法对比"><a href="#5-2-垃圾回收算法对比" class="headerlink" title="5.2 垃圾回收算法对比"></a>5.2 垃圾回收算法对比</h5><table><thead><tr><th>垃圾回收算法</th><th>适用场景</th><th>优缺点</th></tr></thead><tbody><tr><td>标记-清除算法</td><td>一般场景</td><td>实现简单，但容易产生内存碎片</td></tr><tr><td>标记-整理算法</td><td>长生命周期对象较多的场景</td><td>减少内存碎片，但整理阶段开销较大</td></tr><tr><td>分代回收算法</td><td>各种场景</td><td>高效，适用于大多数场景，但实现复杂，需调优</td></tr></tbody></table><h4 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h4><h4 id="补充java中的一些垃圾回收算法"><a href="#补充java中的一些垃圾回收算法" class="headerlink" title="补充java中的一些垃圾回收算法:"></a>补充java中的一些垃圾回收算法:</h4><p>Java虚拟机（JVM）提供了多种垃圾回收算法来管理内存。每种算法都有其优缺点和适用场景。本文将详细介绍这些垃圾回收算法，分析其优缺点，并讨论目前在Android中使用的垃圾回收算法。</p><h4 id="2-垃圾回收算法概述"><a href="#2-垃圾回收算法概述" class="headerlink" title="2. 垃圾回收算法概述"></a>2. 垃圾回收算法概述</h4><p>Java中的垃圾回收算法主要包括：</p><ol><li><strong>串行垃圾回收器（Serial GC）</strong></li><li><strong>并行垃圾回收器（Parallel GC）</strong></li><li><strong>并发标记清除垃圾回收器（CMS GC）</strong></li><li><strong>G1垃圾回收器（Garbage-First GC）</strong></li></ol><h5 id="2-1-串行垃圾回收器（Serial-GC）"><a href="#2-1-串行垃圾回收器（Serial-GC）" class="headerlink" title="2.1 串行垃圾回收器（Serial GC）"></a>2.1 串行垃圾回收器（Serial GC）</h5><p>串行垃圾回收器是最简单的垃圾回收器，适用于单线程环境。</p><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li>实现简单，适用于小型应用或单线程环境。</li><li>由于没有线程间的切换开销，效率较高。</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>不能利用多核CPU的优势。</li><li>停顿时间较长，应用暂停时间较明显。</li></ul><h5 id="2-2-并行垃圾回收器（Parallel-GC）"><a href="#2-2-并行垃圾回收器（Parallel-GC）" class="headerlink" title="2.2 并行垃圾回收器（Parallel GC）"></a>2.2 并行垃圾回收器（Parallel GC）</h5><p>并行垃圾回收器利用多线程进行垃圾回收，适用于多核CPU环境。</p><h6 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h6><ul><li>能够充分利用多核CPU的优势，提高垃圾回收的效率。</li><li>相对于串行垃圾回收器，减少了停顿时间。</li></ul><h6 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>复杂度较高，需要管理多线程的协调。</li><li>在大量小对象分配和回收的情况下，效率可能下降。</li></ul><h5 id="2-3-并发标记清除垃圾回收器（CMS-GC）"><a href="#2-3-并发标记清除垃圾回收器（CMS-GC）" class="headerlink" title="2.3 并发标记清除垃圾回收器（CMS GC）"></a>2.3 并发标记清除垃圾回收器（CMS GC）</h5><p>CMS GC是一种低停顿垃圾回收器，适用于需要快速响应的应用。</p><h6 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h6><ul><li>低停顿时间，适用于需要快速响应的应用。</li><li>并发标记和清除，减少了应用暂停的时间。</li></ul><h6 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>实现复杂，垃圾回收的开销较高。</li><li>容易产生内存碎片，需要定期进行内存整理。</li></ul><h5 id="2-4-G1垃圾回收器（Garbage-First-GC）"><a href="#2-4-G1垃圾回收器（Garbage-First-GC）" class="headerlink" title="2.4 G1垃圾回收器（Garbage-First GC）"></a>2.4 G1垃圾回收器（Garbage-First GC）</h5><p>G1 GC是一种面向服务端应用的垃圾回收器，适用于大内存和多核CPU环境。</p><h6 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h6><ul><li>能够进行预期停顿时间控制，适用于大内存应用。</li><li>减少内存碎片，通过区域化内存管理提高效率。</li></ul><h6 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>实现复杂，开销较高。</li><li>在某些情况下，性能可能不如CMS GC。</li></ul><p>内存管理是Android应用开发中至关重要的一环，合理的内存管理和垃圾回收可以显著提高应用的性能和稳定性。理解这些基本原理，对于编写高效、可靠的Android应用程序具有重要意义。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler进阶(三)ThreadLocal</title>
      <link href="/blog/2019/05/20/Handler%E8%BF%9B%E9%98%B6-%E4%B8%89-ThreadLocal/"/>
      <url>/blog/2019/05/20/Handler%E8%BF%9B%E9%98%B6-%E4%B8%89-ThreadLocal/</url>
      
        <content type="html"><![CDATA[<h3 id="深入分析ThreadLocal在Android-Handler机制中的应用"><a href="#深入分析ThreadLocal在Android-Handler机制中的应用" class="headerlink" title="深入分析ThreadLocal在Android Handler机制中的应用"></a>深入分析ThreadLocal在Android Handler机制中的应用</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>本文将详细分析<code>ThreadLocal</code>的工作原理，并解释它在<code>Handler</code>机制中的具体应用。</p><h4 id="2-ThreadLocal概述"><a href="#2-ThreadLocal概述" class="headerlink" title="2. ThreadLocal概述"></a>2. ThreadLocal概述</h4><p><code>ThreadLocal</code>是一个用于线程内部存储数据的类，它提供了线程内部的局部变量，每个线程都拥有自己的局部变量副本，互不干扰。它主要有以下几个核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 用于获取当前线程的ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前线程的ThreadLocal变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除当前线程的ThreadLocal变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">m</span> <span class="operator">=</span> getMap(Thread.currentThread());</span><br><span class="line">        <span class="keyword">if</span> (m != <span class="literal">null</span>)</span><br><span class="line">            m.remove(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化当前线程的ThreadLocal变量</span></span><br><span class="line">    <span class="keyword">protected</span> T <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前线程的ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建当前线程的ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ThreadLocal的内部类，用于存储ThreadLocal变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">        <span class="comment">// 省略具体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Handler机制中的ThreadLocal"><a href="#3-Handler机制中的ThreadLocal" class="headerlink" title="3. Handler机制中的ThreadLocal"></a>3. Handler机制中的ThreadLocal</h4><h5 id="3-1-一个线程对应一个Looper"><a href="#3-1-一个线程对应一个Looper" class="headerlink" title="3.1 一个线程对应一个Looper"></a>3.1 一个线程对应一个Looper</h5><p>在Android中，每个线程只能有一个<code>Looper</code>，这是通过<code>ThreadLocal</code>来实现的。以下是<code>Looper</code>的实现源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">    <span class="comment">// 用于存储当前线程的Looper</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Looper&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存当前线程的MessageQueue</span></span><br><span class="line">    <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">    <span class="comment">// 保存当前线程的引用</span></span><br><span class="line">    <span class="keyword">final</span> Thread mThread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Looper</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        mQueue = <span class="keyword">new</span> <span class="title class_">MessageQueue</span>(quitAllowed);</span><br><span class="line">        mThread = Thread.currentThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化当前线程的Looper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        prepare(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保每个线程只能调用一次prepare</span></span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前线程的Looper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title function_">myLooper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启Looper的消息循环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> me.mQueue;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Looper</code>的<code>prepare</code>方法中，通过<code>ThreadLocal</code>存储当前线程的<code>Looper</code>，确保每个线程只能拥有一个<code>Looper</code>实例。如果当前线程已经有<code>Looper</code>实例，再次调用<code>prepare</code>方法会抛出异常。</p><h5 id="3-2-MessageQueue的唯一性"><a href="#3-2-MessageQueue的唯一性" class="headerlink" title="3.2 MessageQueue的唯一性"></a>3.2 MessageQueue的唯一性</h5><p><code>MessageQueue</code>在<code>Looper</code>的构造函数中初始化，每个<code>Looper</code>拥有一个<code>MessageQueue</code>实例。由于每个线程只能创建一个<code>Looper</code>，因此每个线程也只能拥有一个<code>MessageQueue</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Looper</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> <span class="title class_">MessageQueue</span>(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-Handler的实现"><a href="#3-3-Handler的实现" class="headerlink" title="3.3 Handler的实现"></a>3.3 Handler的实现</h5><p>当创建<code>Handler</code>时，它会自动绑定到创建它的线程的<code>Looper</code>。通过<code>Looper.myLooper()</code>方法获取当前线程的<code>Looper</code>，并绑定到<code>Handler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Looper mLooper;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(Looper.myLooper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Looper looper)</span> &#123;</span><br><span class="line">        mLooper = looper;</span><br><span class="line">        mQueue = looper.mQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要子类实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleCallback</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Handler</code>通过<code>sendMessage</code>或<code>post</code>方法将消息或<code>Runnable</code>对象发送到<code>MessageQueue</code>，<code>Looper</code>则不断从队列中取出消息并分发给对应的<code>Handler</code>处理。</p><h4 id="4-ThreadLocal详细分析"><a href="#4-ThreadLocal详细分析" class="headerlink" title="4. ThreadLocal详细分析"></a>4. ThreadLocal详细分析</h4><p><code>ThreadLocal</code>通过维护一个<code>ThreadLocalMap</code>来实现线程本地存储。每个线程都有一个<code>ThreadLocalMap</code>，存储着该线程的所有<code>ThreadLocal</code>变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="built_in">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程访问<code>ThreadLocal</code>变量时，会先获取当前线程的<code>ThreadLocalMap</code>，再从中查找对应的变量。由于每个线程都有自己的<code>ThreadLocalMap</code>，因此可以确保线程之间的数据隔离。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>通过本文的详细分析，我们了解了<code>ThreadLocal</code>在Android <code>Handler</code>机制中的关键作用。它确保了每个线程只能拥有一个<code>Looper</code>，从而保证了<code>MessageQueue</code>的唯一性。理解这些机制对于编写高效、稳定的多线程Android应用至关重要。</p><hr><p>希望这篇文章能帮助你更好地理解<code>ThreadLocal</code>及其在Android <code>Handler</code>机制中的应用。如果你有任何疑问或需要进一步的解释，请随时告诉我！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-事件分发</title>
      <link href="/blog/2019/04/22/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
      <url>/blog/2019/04/22/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="安卓中的事件分发机制详解"><a href="#安卓中的事件分发机制详解" class="headerlink" title="安卓中的事件分发机制详解"></a>安卓中的事件分发机制详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>在Android应用中，事件分发机制是处理用户交互的重要部分。事件分发机制决定了用户触摸事件（如点击、滑动）如何在View层次结构中传递和处理。理解这一机制对于编写响应迅速且用户体验良好的应用至关重要。下面让我们一起简单回顾一下安卓中的事件分发的流程。</p><h4 id="2-事件分发机制概述"><a href="#2-事件分发机制概述" class="headerlink" title="2. 事件分发机制概述"></a>2. 事件分发机制概述</h4><p>Android中的事件分发机制主要涉及三个方法：</p><ol><li><strong>dispatchTouchEvent</strong>：事件分发</li><li><strong>onInterceptTouchEvent</strong>：事件拦截</li><li><strong>onTouchEvent</strong>：事件处理</li></ol><p>事件从根节点（通常是Activity）开始传递，逐层向下传递到目标View。</p><h4 id="3-事件分发的基本流程"><a href="#3-事件分发的基本流程" class="headerlink" title="3. 事件分发的基本流程"></a>3. 事件分发的基本流程</h4><p>事件分发的基本流程如下：</p><ol><li><strong>Activity.dispatchTouchEvent</strong>：Activity的事件分发入口。</li><li><strong>ViewGroup.dispatchTouchEvent</strong>：ViewGroup处理事件分发，并决定是否拦截事件。</li><li><strong>View.dispatchTouchEvent</strong>：View处理事件，最终调用onTouchEvent进行事件处理。</li></ol><h5 id="3-1-Activity-dispatchTouchEvent"><a href="#3-1-Activity-dispatchTouchEvent" class="headerlink" title="3.1 Activity.dispatchTouchEvent"></a>3.1 Activity.dispatchTouchEvent</h5><p>Activity的<code>dispatchTouchEvent</code>是事件分发的起点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-ViewGroup-dispatchTouchEvent"><a href="#3-2-ViewGroup-dispatchTouchEvent" class="headerlink" title="3.2 ViewGroup.dispatchTouchEvent"></a>3.2 ViewGroup.dispatchTouchEvent</h5><p>ViewGroup的<code>dispatchTouchEvent</code>负责将事件分发给子View，并决定是否拦截事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">handled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">        handled = onTouchEvent(ev);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        handled = child.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-View-dispatchTouchEvent"><a href="#3-3-View-dispatchTouchEvent" class="headerlink" title="3.3 View.dispatchTouchEvent"></a>3.3 View.dispatchTouchEvent</h5><p>View的<code>dispatchTouchEvent</code>负责处理事件，并调用<code>onTouchEvent</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (onTouchListener != <span class="literal">null</span> &amp;&amp; onTouchListener.onTouch(<span class="built_in">this</span>, event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-事件拦截机制"><a href="#4-事件拦截机制" class="headerlink" title="4. 事件拦截机制"></a>4. 事件拦截机制</h4><p>事件拦截机制由<code>ViewGroup.onInterceptTouchEvent</code>方法实现，决定是否拦截事件并阻止其传递给子View。</p><h5 id="4-1-onInterceptTouchEvent"><a href="#4-1-onInterceptTouchEvent" class="headerlink" title="4.1 onInterceptTouchEvent"></a>4.1 onInterceptTouchEvent</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getAction();</span><br><span class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 拦截事件，阻止传递给子View</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不拦截事件，传递给子View</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-事件处理机制"><a href="#5-事件处理机制" class="headerlink" title="5. 事件处理机制"></a>5. 事件处理机制</h4><p>事件处理机制由<code>View.onTouchEvent</code>方法实现，处理View自身的触摸事件。</p><h5 id="5-1-onTouchEvent"><a href="#5-1-onTouchEvent" class="headerlink" title="5.1 onTouchEvent"></a>5.1 onTouchEvent</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> event.getAction();</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 处理按下事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 处理移动事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="comment">// 处理抬起事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="comment">// 处理取消事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-源码分析"><a href="#6-源码分析" class="headerlink" title="6. 源码分析"></a>6. 源码分析</h4><p>以下是Android事件分发机制的详细源码解析。</p><h5 id="6-1-Activity-dispatchTouchEvent源码解析"><a href="#6-1-Activity-dispatchTouchEvent源码解析" class="headerlink" title="6.1 Activity.dispatchTouchEvent源码解析"></a>6.1 Activity.dispatchTouchEvent源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction(); <span class="comment">// 用户交互处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果Window处理了事件，则返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev); <span class="comment">// 否则调用Activity的onTouchEvent方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-ViewGroup-dispatchTouchEvent源码解析"><a href="#6-2-ViewGroup-dispatchTouchEvent源码解析" class="headerlink" title="6.2 ViewGroup.dispatchTouchEvent源码解析"></a>6.2 ViewGroup.dispatchTouchEvent源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">handled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">        handled = onTouchEvent(ev); <span class="comment">// 如果拦截事件，则由自身处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        handled = child.dispatchTouchEvent(ev); <span class="comment">// 否则将事件传递给子View</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-View-dispatchTouchEvent源码解析"><a href="#6-3-View-dispatchTouchEvent源码解析" class="headerlink" title="6.3 View.dispatchTouchEvent源码解析"></a>6.3 View.dispatchTouchEvent源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (onTouchListener != <span class="literal">null</span> &amp;&amp; onTouchListener.onTouch(<span class="built_in">this</span>, event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果设置了onTouchListener且其处理了事件，则返回true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> onTouchEvent(event); <span class="comment">// 否则调用自身的onTouchEvent方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-4-View-onTouchEvent源码解析"><a href="#6-4-View-onTouchEvent源码解析" class="headerlink" title="6.4 View.onTouchEvent源码解析"></a>6.4 View.onTouchEvent源码解析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> event.getAction();</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">// 处理按下事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">// 处理移动事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="comment">// 处理抬起事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="comment">// 处理取消事件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-示例代码"><a href="#7-示例代码" class="headerlink" title="7. 示例代码"></a>7. 示例代码</h4><p>以下是一个简单的示例，展示如何实现自定义View的事件分发和拦截。</p><h5 id="7-1-自定义ViewGroup"><a href="#7-1-自定义ViewGroup" class="headerlink" title="7.1 自定义ViewGroup"></a>7.1 自定义ViewGroup</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomViewGroup</span> <span class="keyword">extends</span> <span class="title class_">ViewGroup</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomViewGroup</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 拦截移动事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理触摸事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="comment">// 布局子View</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2-自定义View"><a href="#7-2-自定义View" class="headerlink" title="7.2 自定义View"></a>7.2 自定义View</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="comment">// 处理按下事件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="comment">// 处理移动事件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">// 处理抬起事件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-3-使用自定义View和ViewGroup的布局文件"><a href="#7-3-使用自定义View和ViewGroup的布局文件" class="headerlink" title="7.3 使用自定义View和ViewGroup的布局文件"></a>7.3 使用自定义View和ViewGroup的布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">com.example.customview.CustomViewGroup</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.customview.CustomView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#FF0000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.example.customview.CustomViewGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h4><p>Android的事件分发机制，包括事件的分发、拦截和处理过程。理解这一机制对于开发响应迅速且用户体验良好的应用至关重要。通过示例代码，我们可以更好地理解如何自定义View和ViewGroup，以及如何处理和拦截事件。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-View从绘制到显示</title>
      <link href="/blog/2019/04/16/Android-View%E4%BB%8E%E7%BB%98%E5%88%B6%E5%88%B0%E6%98%BE%E7%A4%BA/"/>
      <url>/blog/2019/04/16/Android-View%E4%BB%8E%E7%BB%98%E5%88%B6%E5%88%B0%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="Android-View从绘制到显示的流程详解"><a href="#Android-View从绘制到显示的流程详解" class="headerlink" title="Android View从绘制到显示的流程详解"></a>Android View从绘制到显示的流程详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>上一篇文章主要介绍了下自定义View的简单的流程,下边我们来深入理解一下View的绘制及到展示在屏幕上的整个流程。</p><h4 id="2-Activity的启动流程"><a href="#2-Activity的启动流程" class="headerlink" title="2. Activity的启动流程"></a>2. Activity的启动流程</h4><p>在分析View的绘制流程之前，我们需要了解Activity的启动流程，因为View的绘制是从Activity启动后开始的。</p><h5 id="2-1-Activity的启动"><a href="#2-1-Activity的启动" class="headerlink" title="2.1 Activity的启动"></a>2.1 Activity的启动</h5><p>当启动一个Activity时，系统会调用<code>ActivityThread</code>中的<code>performLaunchActivity</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Activity <span class="title function_">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> r.packageInfo.getClassLoader();</span><br><span class="line">        activity = mInstrumentation.newActivity(cl, component.getClassName(), r.intent);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        activity.attach(appContext, <span class="built_in">this</span>, getInstrumentation(), r.token, r.ident,</span><br><span class="line">                app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                r.referrer, r.voiceInteractor, window, r.assistToken);</span><br><span class="line">        <span class="comment">// 调用Activity的onCreate方法</span></span><br><span class="line">        activity.performCreate(r.state);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unable to start activity &quot;</span> + component</span><br><span class="line">                + <span class="string">&quot;: &quot;</span> + e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-View的绘制流程"><a href="#3-View的绘制流程" class="headerlink" title="3. View的绘制流程"></a>3. View的绘制流程</h4><p>View的绘制流程主要包括以下几个步骤：</p><ol><li><strong>测量（Measure）</strong>：确定View的大小。</li><li><strong>布局（Layout）</strong>：确定View在父容器中的位置。</li><li><strong>绘制（Draw）</strong>：将View绘制到屏幕上。</li></ol><h5 id="3-1-测量（Measure）"><a href="#3-1-测量（Measure）" class="headerlink" title="3.1 测量（Measure）"></a>3.1 测量（Measure）</h5><p>测量过程由<code>measure</code>方法开始，最终会调用<code>onMeasure</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">measure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags &amp; FORCE_LAYOUT) == FORCE_LAYOUT ||</span><br><span class="line">            widthMeasureSpec != mOldWidthMeasureSpec ||</span><br><span class="line">            heightMeasureSpec != mOldHeightMeasureSpec) &#123;</span><br><span class="line">        mPrivateFlags &amp;= ~MEASURED_DIMENSION_SET;</span><br><span class="line">        resolveRtlPropertiesIfNeeded();</span><br><span class="line">        <span class="comment">// 调用onMeasure方法</span></span><br><span class="line">        onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        mPrivateFlags |= LAYOUT_REQUIRED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mOldWidthMeasureSpec = widthMeasureSpec;</span><br><span class="line">    mOldHeightMeasureSpec = heightMeasureSpec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-布局（Layout）"><a href="#3-2-布局（Layout）" class="headerlink" title="3.2 布局（Layout）"></a>3.2 布局（Layout）</h5><p>布局过程由<code>layout</code>方法开始，最终会调用<code>onLayout</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layout</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</span><br><span class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldL</span> <span class="operator">=</span> mLeft;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldT</span> <span class="operator">=</span> mTop;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldB</span> <span class="operator">=</span> mBottom;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldR</span> <span class="operator">=</span> mRight;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> isLayoutModeOptical(mParent) ? (opticalInsets.left != oldL || opticalInsets.top != oldT ||</span><br><span class="line">            opticalInsets.right != oldR || opticalInsets.bottom != oldB) :</span><br><span class="line">            (oldL != l || oldT != t || oldR != r || oldB != b);</span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        <span class="comment">// 调用onLayout方法</span></span><br><span class="line">        onLayout(changed, l, t, r, b);</span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class="line">        mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span> &#123;</span><br><span class="line">    <span class="comment">// 默认实现为空，需要子类重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-绘制（Draw）"><a href="#3-3-绘制（Draw）" class="headerlink" title="3.3 绘制（Draw）"></a>3.3 绘制（Draw）</h5><p>绘制过程由<code>draw</code>方法开始，最终会调用<code>onDraw</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="comment">// 调用onDraw方法</span></span><br><span class="line">    onDraw(canvas);</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="comment">// 默认实现为空，需要子类重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-ViewRootImpl的作用"><a href="#4-ViewRootImpl的作用" class="headerlink" title="4. ViewRootImpl的作用"></a>4. ViewRootImpl的作用</h4><p><code>ViewRootImpl</code>是连接WindowManager和View层的桥梁，负责处理窗口的创建、更新和销毁，并协调View的绘制流程。</p><h5 id="4-1-View的添加"><a href="#4-1-View的添加" class="headerlink" title="4.1 View的添加"></a>4.1 View的添加</h5><p>当Activity的布局被设置时，会通过<code>WindowManager</code>将DecorView添加到窗口中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    mContentParent.addView(view, params);</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-ViewRootImpl的创建"><a href="#4-2-ViewRootImpl的创建" class="headerlink" title="4.2 ViewRootImpl的创建"></a>4.2 ViewRootImpl的创建</h5><p><code>ViewRootImpl</code>在添加View到窗口时被创建，并负责初始化绘制流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建ViewRootImpl</span></span><br><span class="line">    <span class="type">ViewRootImpl</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewRootImpl</span>(view.getContext(), display);</span><br><span class="line">    root.setView(view, params, panelParentView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-绘制流程的触发"><a href="#4-3-绘制流程的触发" class="headerlink" title="4.3 绘制流程的触发"></a>4.3 绘制流程的触发</h5><p>绘制流程由<code>ViewRootImpl</code>的<code>performTraversals</code>方法触发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">performTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测量</span></span><br><span class="line">    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">    <span class="comment">// 布局</span></span><br><span class="line">    performLayout(lp, mWidth, mHeight);</span><br><span class="line">    <span class="comment">// 绘制</span></span><br><span class="line">    performDraw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performMeasure</span><span class="params">(<span class="type">int</span> childWidthMeasureSpec, <span class="type">int</span> childHeightMeasureSpec)</span> &#123;</span><br><span class="line">    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performLayout</span><span class="params">(WindowManager.LayoutParams lp, <span class="type">int</span> desiredWindowWidth, <span class="type">int</span> desiredWindowHeight)</span> &#123;</span><br><span class="line">    mView.layout(<span class="number">0</span>, <span class="number">0</span>, desiredWindowWidth, desiredWindowHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performDraw</span><span class="params">()</span> &#123;</span><br><span class="line">    draw(fullRedrawNeeded);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">boolean</span> fullRedrawNeeded)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dirty.isEmpty() || fullRedrawNeeded) &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">        mView.draw(canvas);</span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-完整流程示例"><a href="#5-完整流程示例" class="headerlink" title="5. 完整流程示例"></a>5. 完整流程示例</h4><p>以下是一个完整的示例，演示从Activity启动到View显示的整个流程：</p><ol><li><strong>Activity启动</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>设置布局</strong>：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- res/layout/activity_main.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.customview.MyCustomView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:customColor</span>=<span class="string">&quot;#FF0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:customText</span>=<span class="string">&quot;Hello, Custom View!&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>自定义View类</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> customColor;</span><br><span class="line">    <span class="keyword">private</span> String customText;</span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        paint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">typedArray</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.MyCustomView);</span><br><span class="line">        customColor = typedArray.getColor(R.styleable.MyCustomView_customColor, Color.BLACK);</span><br><span class="line">        customText = typedArray.getString(R.styleable.MyCustomView_customText);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line">        paint.setColor(customColor);</span><br><span class="line">        paint.setTextSize(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.drawText(customText, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><p>以上就是本次分型的所有内容,了解从Activity启动到View最终显示在屏幕上的整个流程。这个过程涉及Activity的启动、View的测量、布局和绘制，以及ViewRootImpl的协调。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler进阶(二)机制解析</title>
      <link href="/blog/2019/04/14/Handler%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2019/04/14/Handler%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="Android中的Handler详解：源码与执行流程"><a href="#Android中的Handler详解：源码与执行流程" class="headerlink" title="Android中的Handler详解：源码与执行流程"></a>Android中的Handler详解：源码与执行流程</h3><h4 id="1-简述Handler的实现原理"><a href="#1-简述Handler的实现原理" class="headerlink" title="1. 简述Handler的实现原理"></a>1. 简述Handler的实现原理</h4><p>Android 应用通过消息驱动运行，包括触摸事件、视图的绘制和刷新等。<code>Handler</code>是这一消息机制的上层接口，通过<code>MessageQueue</code>和<code>Looper</code>共同实现消息循环系统。</p><h5 id="1-1-Handler发送消息"><a href="#1-1-Handler发送消息" class="headerlink" title="1.1 Handler发送消息"></a>1.1 Handler发送消息</h5><p><code>Handler</code>通过<code>sendXXX</code>或<code>postXXX</code>方法发送消息。<code>post(Runnable r)</code>方法将<code>Runnable</code>包装成<code>Message</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">post</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postDelayed</span><span class="params">(Runnable r, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title function_">getPostMessage</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，<code>sendXXX</code>和<code>postXXX</code>都会调用<code>sendMessageAtTime</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">        Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法调用了<code>enqueueMessage</code>，将<code>this</code>（即当前的<code>Handler</code>实例）赋值给<code>Message.target</code>，并将消息入队到<code>MessageQueue</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    msg.target = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">        msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-MessageQueue"><a href="#1-2-MessageQueue" class="headerlink" title="1.2 MessageQueue"></a>1.2 MessageQueue</h5><p><code>MessageQueue</code>是一个优先级队列，核心方法是<code>enqueueMessage</code>和<code>next</code>方法。<code>enqueueMessage</code>方法会根据<code>Message</code>的执行时间来插入消息，使得优先级较高的消息能更快得到处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>next</code>方法是一个死循环，如果队列中有消息，<code>next</code>方法会将<code>Message</code>移除队列并返回该消息，如果没有消息，该方法会处于阻塞状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-Looper"><a href="#1-3-Looper" class="headerlink" title="1.3 Looper"></a>1.3 Looper</h5><p><code>Looper</code>是一个消息泵，核心方法是<code>loop</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> queue.next();</span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loop</code>方法不断从<code>MessageQueue</code>中取出消息，并通过<code>Handler</code>的<code>dispatchMessage</code>方法处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-一个线程有几个Handler？一个线程有几个Looper？如何保证？"><a href="#2-一个线程有几个Handler？一个线程有几个Looper？如何保证？" class="headerlink" title="2. 一个线程有几个Handler？一个线程有几个Looper？如何保证？"></a>2. 一个线程有几个Handler？一个线程有几个Looper？如何保证？</h4><p>一个线程可以有多个<code>Handler</code>，但只能有一个<code>Looper</code>。<code>Looper</code>的构造方法被声明为<code>private</code>，只能通过<code>Looper.prepare()</code>方法来实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">    prepare(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadLocal</code>用于确保每个线程只能创建一个<code>Looper</code>。</p><h4 id="3-Handler线程切换机制"><a href="#3-Handler线程切换机制" class="headerlink" title="3. Handler线程切换机制"></a>3. Handler线程切换机制</h4><p>假设有线程A和线程B：</p><ol><li>在A线程中调用<code>Looper.prepare()</code>和<code>Looper.loop()</code>来初始化<code>Looper</code>。</li><li>在A线程中实例化一个<code>Handler</code>，并在B线程中通过该<code>Handler</code>发送消息。</li><li>A线程的<code>Looper</code>在死循环中从<code>MessageQueue</code>中取出消息，并在A线程中处理这些消息。</li></ol><h4 id="4-Handler内存泄漏的原因及解决方案"><a href="#4-Handler内存泄漏的原因及解决方案" class="headerlink" title="4. Handler内存泄漏的原因及解决方案"></a>4. Handler内存泄漏的原因及解决方案</h4><p>使用匿名内部类实例化<code>Handler</code>会持有外部类的引用，可能导致内存泄漏。解决方案是使用静态内部类加弱引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mReference;</span><br><span class="line"></span><br><span class="line">    MyHandler(Activity activity) &#123;</span><br><span class="line">        mReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> mReference.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-主线程为什么不用初始化Looper？"><a href="#5-主线程为什么不用初始化Looper？" class="headerlink" title="5. 主线程为什么不用初始化Looper？"></a>5. 主线程为什么不用初始化Looper？</h4><p>Android应用启动时已经初始化了主线程的<code>Looper</code>。在<code>ActivityThread</code>的<code>main</code>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">    Looper.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-Handler如何保证MessageQueue并发访问安全？"><a href="#6-Handler如何保证MessageQueue并发访问安全？" class="headerlink" title="6. Handler如何保证MessageQueue并发访问安全？"></a>6. Handler如何保证MessageQueue并发访问安全？</h4><p><code>Handler</code>机制通过<code>MessageQueue</code>中的同步块和阻塞唤醒机制保证并发访问的安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>next</code>方法在进入等待状态前会释放锁，避免死锁问题。</p><h4 id="7-Handler的阻塞唤醒机制"><a href="#7-Handler的阻塞唤醒机制" class="headerlink" title="7. Handler的阻塞唤醒机制"></a>7. Handler的阻塞唤醒机制</h4><p><code>Handler</code>的阻塞唤醒机制基于Linux的文件描述符。当需要等待时，线程会监听文件描述符的变化，唤醒线程则通过修改文件描述符的状态来实现。</p><h4 id="8-异步消息和同步屏障"><a href="#8-异步消息和同步屏障" class="headerlink" title="8. 异步消息和同步屏障"></a>8. 异步消息和同步屏障</h4><p>同步屏障通过在<code>MessageQueue</code>中插入一个特殊的<code>Message</code>来实现，保证异步消息优先处理。可以使用<code>Handler</code>的<code>setAsynchronous</code>方法将消息标记为异步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAsynchronous</span><span class="params">(<span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (async) &#123;</span><br><span class="line">        flags |= FLAG_ASYNCHRONOUS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags &amp;= ~FLAG_ASYNCHRONOUS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>理解<code>Handler</code>、<code>Looper</code>和<code>MessageQueue</code>的交互机制是编写高效、响应性强的Android应用的关键。通过深入分析这些组件的源码和工作原理，可以更好地掌握线程间通信的技巧，避免常见的问题如内存泄漏和线程安全问题。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP、HTTPS、TCP/IP、Socket通信</title>
      <link href="/blog/2019/04/12/HTTP%E3%80%81HTTPS%E3%80%81TCP-IP%E3%80%81Socket%E9%80%9A%E4%BF%A1/"/>
      <url>/blog/2019/04/12/HTTP%E3%80%81HTTPS%E3%80%81TCP-IP%E3%80%81Socket%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="网络通信详解：HTTP、HTTPS、TCP-IP、Socket通信及三次握手和四次挥手"><a href="#网络通信详解：HTTP、HTTPS、TCP-IP、Socket通信及三次握手和四次挥手" class="headerlink" title="网络通信详解：HTTP、HTTPS、TCP&#x2F;IP、Socket通信及三次握手和四次挥手"></a>网络通信详解：HTTP、HTTPS、TCP&#x2F;IP、Socket通信及三次握手和四次挥手</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>网络通信是现代计算机网络的核心，通过各种协议和技术实现数据在网络中的传输。本文将详细介绍HTTP、HTTPS、TCP&#x2F;IP、Socket通信以及TCP协议中的三次握手和四次挥手过程，并提供相关代码示例和流程图。</p><h4 id="2-HTTP与HTTPS"><a href="#2-HTTP与HTTPS" class="headerlink" title="2. HTTP与HTTPS"></a>2. HTTP与HTTPS</h4><h5 id="2-1-HTTP"><a href="#2-1-HTTP" class="headerlink" title="2.1 HTTP"></a>2.1 HTTP</h5><p>HTTP（HyperText Transfer Protocol，超文本传输协议）是用于传输超文本的应用层协议。它是无状态的，基于请求-响应模式，主要用于客户端和服务器之间的数据交换。</p><h6 id="HTTP通信流程"><a href="#HTTP通信流程" class="headerlink" title="HTTP通信流程"></a>HTTP通信流程</h6><ol><li>客户端向服务器发送HTTP请求。</li><li>服务器处理请求并返回HTTP响应。</li></ol><h6 id="HTTP请求示例"><a href="#HTTP请求示例" class="headerlink" title="HTTP请求示例"></a>HTTP请求示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Accept: text/html</span><br></pre></td></tr></table></figure><h6 id="HTTP响应示例"><a href="#HTTP响应示例" class="headerlink" title="HTTP响应示例"></a>HTTP响应示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 137</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to Example.com!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="2-2-HTTPS"><a href="#2-2-HTTPS" class="headerlink" title="2.2 HTTPS"></a>2.2 HTTPS</h5><p>HTTPS（HyperText Transfer Protocol Secure，安全超文本传输协议）是HTTP的安全版本，通过SSL&#x2F;TLS协议加密数据，确保数据传输的安全性。</p><h6 id="HTTPS通信流程"><a href="#HTTPS通信流程" class="headerlink" title="HTTPS通信流程"></a>HTTPS通信流程</h6><ol><li>客户端向服务器发送HTTPS请求。</li><li>服务器返回证书，客户端验证证书。</li><li>客户端和服务器通过SSL&#x2F;TLS协议协商生成对称密钥。</li><li>使用对称密钥加密数据进行通信。</li></ol><h6 id="HTTPS请求与响应的加密过程"><a href="#HTTPS请求与响应的加密过程" class="headerlink" title="HTTPS请求与响应的加密过程"></a>HTTPS请求与响应的加密过程</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">|   Client    |       |   Server    |</span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- HTTPS Request --| </span><br><span class="line">      |                     |</span><br><span class="line">      |--- Server Certificate --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |--- Verify Certificate --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |--- SSL/TLS Handshake --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |--- Encrypted Data --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- Encrypted Data --|</span><br><span class="line">      |                     |</span><br></pre></td></tr></table></figure><h4 id="3-TCP-IP协议"><a href="#3-TCP-IP协议" class="headerlink" title="3. TCP&#x2F;IP协议"></a>3. TCP&#x2F;IP协议</h4><h5 id="3-1-TCP-IP概述"><a href="#3-1-TCP-IP概述" class="headerlink" title="3.1 TCP&#x2F;IP概述"></a>3.1 TCP&#x2F;IP概述</h5><p>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol，传输控制协议&#x2F;互联网协议）是互联网的基础协议，包含了多个层次的协议栈，包括应用层、传输层、网络层和链路层。</p><h5 id="3-2-TCP-IP模型"><a href="#3-2-TCP-IP模型" class="headerlink" title="3.2 TCP&#x2F;IP模型"></a>3.2 TCP&#x2F;IP模型</h5><ol><li><strong>应用层</strong>：HTTP、HTTPS、FTP等协议。</li><li><strong>传输层</strong>：TCP、UDP协议。</li><li><strong>网络层</strong>：IP协议。</li><li><strong>链路层</strong>：以太网协议。</li></ol><h6 id="TCP-IP协议栈示意图"><a href="#TCP-IP协议栈示意图" class="headerlink" title="TCP&#x2F;IP协议栈示意图"></a>TCP&#x2F;IP协议栈示意图</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">|    应用层           |</span><br><span class="line">|  HTTP, FTP, SMTP    |</span><br><span class="line">+---------------------+</span><br><span class="line">|    传输层           |</span><br><span class="line">|  TCP, UDP           |</span><br><span class="line">+---------------------+</span><br><span class="line">|    网络层           |</span><br><span class="line">|  IP, ICMP           |</span><br><span class="line">+---------------------+</span><br><span class="line">|    链路层           |</span><br><span class="line">|  Ethernet, WiFi     |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h4 id="4-Socket通信"><a href="#4-Socket通信" class="headerlink" title="4. Socket通信"></a>4. Socket通信</h4><p>Socket是网络通信的端点，通过Socket编程，可以实现不同计算机之间的数据传输。</p><h5 id="4-1-Socket编程示例"><a href="#4-1-Socket编程示例" class="headerlink" title="4.1 Socket编程示例"></a>4.1 Socket编程示例</h5><h6 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Socket对象</span></span><br><span class="line">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 绑定IP地址和端口</span></span><br><span class="line">server_socket.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 监听连接</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Server listening on port 8080&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接受客户端连接</span></span><br><span class="line">    client_socket, addr = server_socket.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    client_socket.send(<span class="string">&quot;Hello, Client!&quot;</span>.encode())</span><br><span class="line">    client_socket.close()</span><br></pre></td></tr></table></figure><h6 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Socket对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client_socket.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">client_socket.send(<span class="string">&quot;Hello, Server!&quot;</span>.encode())</span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Received: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h5 id="4-2-Socket通信流程图"><a href="#4-2-Socket通信流程图" class="headerlink" title="4.2 Socket通信流程图"></a>4.2 Socket通信流程图</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">|   Client    |       |   Server    |</span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">      |                     |</span><br><span class="line">      |--- Connect to Server --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- Accept Connection --| </span><br><span class="line">      |                     |</span><br><span class="line">      |--- Send Data: &quot;Hello, Server!&quot; --&gt;|</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- Receive Data: &quot;Hello, Client!&quot; --|</span><br><span class="line">      |                     |</span><br><span class="line">      |--- Close Connection --&gt;|</span><br><span class="line">      |                     |</span><br></pre></td></tr></table></figure><h4 id="5-三次握手与四次挥手"><a href="#5-三次握手与四次挥手" class="headerlink" title="5. 三次握手与四次挥手"></a>5. 三次握手与四次挥手</h4><h5 id="5-1-三次握手"><a href="#5-1-三次握手" class="headerlink" title="5.1 三次握手"></a>5.1 三次握手</h5><p>TCP的三次握手用于建立可靠的连接，确保客户端和服务器都准备好发送和接收数据。</p><h6 id="三次握手步骤"><a href="#三次握手步骤" class="headerlink" title="三次握手步骤"></a>三次握手步骤</h6><ol><li><strong>第一次握手</strong>：客户端发送SYN（同步序列号）报文。</li><li><strong>第二次握手</strong>：服务器收到SYN报文，返回SYN-ACK（确认同步序列号）报文。</li><li><strong>第三次握手</strong>：客户端收到SYN-ACK报文，返回ACK（确认序列号）报文，连接建立。</li></ol><h6 id="三次握手流程图"><a href="#三次握手流程图" class="headerlink" title="三次握手流程图"></a>三次握手流程图</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">|   Client    |       |   Server    |</span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">      |                     |</span><br><span class="line">      |--- SYN ---&gt;         |</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- SYN-ACK ---     |</span><br><span class="line">      |                     |</span><br><span class="line">      |--- ACK ---&gt;         |</span><br><span class="line">      |                     |</span><br><span class="line">  Connection Established</span><br></pre></td></tr></table></figure><h5 id="5-2-四次挥手"><a href="#5-2-四次挥手" class="headerlink" title="5.2 四次挥手"></a>5.2 四次挥手</h5><p>TCP的四次挥手用于终止连接，确保双方都完成数据传输。</p><h6 id="四次挥手步骤"><a href="#四次挥手步骤" class="headerlink" title="四次挥手步骤"></a>四次挥手步骤</h6><ol><li><strong>第一次挥手</strong>：客户端发送FIN（结束）报文，表示不再发送数据。</li><li><strong>第二次挥手</strong>：服务器收到FIN报文，返回ACK报文。</li><li><strong>第三次挥手</strong>：服务器发送FIN报文，表示不再发送数据。</li><li><strong>第四次挥手</strong>：客户端收到FIN报文，返回ACK报文，连接关闭。</li></ol><h6 id="四次挥手流程图"><a href="#四次挥手流程图" class="headerlink" title="四次挥手流程图"></a>四次挥手流程图</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line"></span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">|   Client    |       |   Server    |</span><br><span class="line">+-------------+       +-------------+</span><br><span class="line">      |                     |</span><br><span class="line">      |--- FIN ---&gt;         |</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- ACK ---         |</span><br><span class="line">      |                     |</span><br><span class="line">      |                     |</span><br><span class="line">      |&lt;--- FIN ---         |</span><br><span class="line">      |                     |</span><br><span class="line">      |--- ACK ---&gt;         |</span><br><span class="line">      |                     |</span><br><span class="line">   Connection Closed</span><br></pre></td></tr></table></figure><h4 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h4><p>以上就是关于HTTP、HTTPS、TCP&#x2F;IP、Socket通信以及TCP协议中的三次握手和四次挥手过程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android-自定义View基础</title>
      <link href="/blog/2019/04/08/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/04/08/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="安卓中的自定义View详解"><a href="#安卓中的自定义View详解" class="headerlink" title="安卓中的自定义View详解"></a>安卓中的自定义View详解</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>自定义View是Android开发中一种非常强大的功能，它允许开发者根据需求创建独特的UI组件。在理解和掌握自定义View的实现方法后，开发者可以实现更加丰富和个性化的用户界面。本文将详细介绍自定义View的实现过程、原理和示例，包含详细。</p><h4 id="2-自定义View的原理"><a href="#2-自定义View的原理" class="headerlink" title="2. 自定义View的原理"></a>2. 自定义View的原理</h4><p>自定义View的实现基于以下几个关键步骤：</p><ol><li><strong>继承View类</strong>：创建自定义View类，继承自<code>View</code>或其子类。</li><li><strong>重写构造函数</strong>：在自定义View类中，重写必要的构造函数，以便在不同的创建方式下初始化View。</li><li><strong>重写onDraw方法</strong>：实现View的绘制逻辑，通常在<code>onDraw</code>方法中完成。</li><li><strong>重写onMeasure方法</strong>：处理View的测量逻辑，确定View的大小。</li><li><strong>处理自定义属性</strong>：在XML布局文件中使用自定义属性，增强View的可配置性。</li></ol><h4 id="3-自定义View的实现步骤"><a href="#3-自定义View的实现步骤" class="headerlink" title="3. 自定义View的实现步骤"></a>3. 自定义View的实现步骤</h4><h5 id="3-1-继承View类"><a href="#3-1-继承View类" class="headerlink" title="3.1 继承View类"></a>3.1 继承View类</h5><p>首先，创建一个自定义View类，继承自<code>View</code>或其子类（如<code>TextView</code>、<code>ImageView</code>等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数1：用于代码创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数2：用于XML创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数3：用于XML创建并应用样式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里进行一些初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-重写onDraw方法"><a href="#3-2-重写onDraw方法" class="headerlink" title="3.2 重写onDraw方法"></a>3.2 重写onDraw方法</h5><p><code>onDraw</code>方法是自定义View的核心，用于绘制View的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    <span class="type">Paint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">    paint.setColor(Color.RED);</span><br><span class="line">    paint.setStyle(Paint.Style.FILL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制一个圆</span></span><br><span class="line">    canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, Math.min(getWidth(), getHeight()) / <span class="number">2</span>, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-重写onMeasure方法"><a href="#3-3-重写onMeasure方法" class="headerlink" title="3.3 重写onMeasure方法"></a>3.3 重写onMeasure方法</h5><p><code>onMeasure</code>方法用于处理View的测量逻辑，确定View的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取宽高的测量模式和大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">widthMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">widthSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">heightMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">heightSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算宽高</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> widthSize;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> heightSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">        width = <span class="number">200</span>; <span class="comment">// 默认宽度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">        height = <span class="number">200</span>; <span class="comment">// 默认高度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置测量结果</span></span><br><span class="line">    setMeasuredDimension(width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-处理自定义属性"><a href="#3-4-处理自定义属性" class="headerlink" title="3.4 处理自定义属性"></a>3.4 处理自定义属性</h5><p>在XML布局文件中使用自定义属性，以增强View的可配置性。</p><ol><li><strong>定义attrs.xml文件</strong>：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;MyCustomView&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;customColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;customText&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>在自定义View类中处理自定义属性</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> customColor;</span><br><span class="line"><span class="keyword">private</span> String customText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (attrs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">typedArray</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.MyCustomView);</span><br><span class="line">        customColor = typedArray.getColor(R.styleable.MyCustomView_customColor, Color.BLACK);</span><br><span class="line">        customText = typedArray.getString(R.styleable.MyCustomView_customText);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>在onDraw方法中使用自定义属性</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="type">Paint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">    paint.setColor(customColor);</span><br><span class="line">    paint.setStyle(Paint.Style.FILL);</span><br><span class="line">    paint.setTextSize(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    canvas.drawText(customText, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>在XML布局文件中使用自定义View</strong>：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">com.example.customview.MyCustomView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:customColor</span>=<span class="string">&quot;#FF0000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:customText</span>=<span class="string">&quot;Hello, Custom View!&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-自定义View示例"><a href="#4-自定义View示例" class="headerlink" title="4. 自定义View示例"></a>4. 自定义View示例</h4><p>下面是一个完整的自定义View示例，演示如何创建一个带有自定义属性的圆形View。</p><h5 id="4-1-attrs-xml文件"><a href="#4-1-attrs-xml文件" class="headerlink" title="4.1 attrs.xml文件"></a>4.1 attrs.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;CircleView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;circleColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;circleRadius&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-CircleView-java文件"><a href="#4-2-CircleView-java文件" class="headerlink" title="4.2 CircleView.java文件"></a>4.2 CircleView.java文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.customview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> circleColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> circleRadius;</span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        paint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">TypedArray</span> <span class="variable">typedArray</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.CircleView);</span><br><span class="line">            circleColor = typedArray.getColor(R.styleable.CircleView_circleColor, Color.RED);</span><br><span class="line">            circleRadius = typedArray.getDimension(R.styleable.CircleView_circleRadius, <span class="number">50</span>);</span><br><span class="line">            typedArray.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        paint.setColor(circleColor);</span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, circleRadius, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-使用自定义View的XML布局文件"><a href="#4-3-使用自定义View的XML布局文件" class="headerlink" title="4.3 使用自定义View的XML布局文件"></a>4.3 使用自定义View的XML布局文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">com.example.customview.CircleView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:circleColor</span>=<span class="string">&quot;#00FF00&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:circleRadius</span>=<span class="string">&quot;40dp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>以上是一个简单的自定View流程,今天的分享就到这里了,自定义View在安卓中是一个非常重要的东西,只有理解View的展示流程才能更好的运用自定义View的技术,解决一些复杂的问题,下面会展开View的绘制流程讨论,进一步理解自定义View。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Okhttp详解</title>
      <link href="/blog/2019/03/09/Okhttp%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2019/03/09/Okhttp%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="OKHttp详解"><a href="#OKHttp详解" class="headerlink" title="OKHttp详解"></a>OKHttp详解</h1><p>OKHttp是一个高效的HTTP客户端库，广泛应用于Android开发中。它提供了便捷的API来进行网络请求，并且具备出色的性能和灵活性。本文将详细解析OKHttp的基本用法、核心功能以及一些高级特性。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#okhttp%E8%AF%A6%E8%A7%A3">OKHttp详解</a><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE">依赖配置</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">基本用法</a><ul><li><a href="#%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82">同步请求</a></li><li><a href="#%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82">异步请求</a></li></ul></li><li><a href="#%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94">请求和响应</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E5%8A%9F%E8%83%BD">常见功能</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E5%A4%B4">请求头</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E4%BD%93">请求体</a></li><li><a href="#%E6%8B%A6%E6%88%AA%E5%99%A8">拦截器</a></li><li><a href="#%E7%BC%93%E5%AD%98">缓存</a></li><li><a href="#%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE">超时设置</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7">高级特性</a><ul><li><a href="#%E8%BF%9E%E6%8E%A5%E6%B1%A0">连接池</a></li><li><a href="#websocket">WebSocket</a></li></ul></li><li><a href="#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">示例代码</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OKHttp由Square公司开发，是一个轻量级且功能强大的HTTP客户端库，支持HTTP&#x2F;2、WebSocket、透明压缩和连接池复用等特性。它不仅可以用于Android开发，也可以在Java项目中使用。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>在项目的<code>build.gradle</code>文件中添加以下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groovydependencies &#123;</span><br><span class="line">    implementation &#x27;com.squareup.okhttp3:okhttp:4.9.3&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>同步请求会阻塞当前线程，直到服务器返回响应。适用于在后台线程进行网络操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">javaOkHttpClient client = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line">        .url(&quot;https://api.example.com/getData&quot;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">try (Response response = client.newCall(request).execute()) &#123;</span><br><span class="line">    if (response.isSuccessful()) &#123;</span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><p>异步请求不会阻塞当前线程，而是通过回调接口处理响应。适用于在UI线程进行网络操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">javaOkHttpClient client = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line">        .url(&quot;https://api.example.com/getData&quot;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">client.newCall(request).enqueue(new Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onFailure(Call call, IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line">        if (response.isSuccessful()) &#123;</span><br><span class="line">            System.out.println(response.body().string());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>OKHttp的请求和响应类分别是<code>Request</code>和<code>Response</code>。请求类包含了URL、请求方法、请求头和请求体。响应类包含了响应码、响应头和响应体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javaRequest request = new Request.Builder()</span><br><span class="line">        .url(&quot;https://api.example.com/getData&quot;)</span><br><span class="line">        .header(&quot;Authorization&quot;, &quot;Bearer token&quot;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">int statusCode = response.code();</span><br><span class="line">String responseBody = response.body().string();</span><br></pre></td></tr></table></figure><h2 id="常见功能"><a href="#常见功能" class="headerlink" title="常见功能"></a>常见功能</h2><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>可以通过<code>Request.Builder</code>来添加请求头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaRequest request = new Request.Builder()</span><br><span class="line">        .url(&quot;https://api.example.com/getData&quot;)</span><br><span class="line">        .addHeader(&quot;Authorization&quot;, &quot;Bearer token&quot;)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>对于POST请求，可以使用<code>RequestBody</code>来设置请求体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javaRequestBody body = new FormBody.Builder()</span><br><span class="line">        .add(&quot;username&quot;, &quot;user&quot;)</span><br><span class="line">        .add(&quot;password&quot;, &quot;pass&quot;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line">        .url(&quot;https://api.example.com/login&quot;)</span><br><span class="line">        .post(body)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截器可以在请求和响应过程中进行额外的处理，例如添加公共参数、记录日志等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">javaOkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">        .addInterceptor(new Interceptor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Response intercept(Chain chain) throws IOException &#123;</span><br><span class="line">                Request request = chain.request().newBuilder()</span><br><span class="line">                        .addHeader(&quot;Authorization&quot;, &quot;Bearer token&quot;)</span><br><span class="line">                        .build();</span><br><span class="line">                return chain.proceed(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>OKHttp支持响应缓存，可以通过设置缓存目录和大小来启用缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javaCache cache = new Cache(new File(&quot;cacheDirectory&quot;), 10 * 1024 * 1024); // 10 MB</span><br><span class="line"></span><br><span class="line">OkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">        .cache(cache)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h3><p>可以设置连接超时、读取超时和写入超时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javaOkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">        .connectTimeout(10, TimeUnit.SECONDS)</span><br><span class="line">        .readTimeout(30, TimeUnit.SECONDS)</span><br><span class="line">        .writeTimeout(15, TimeUnit.SECONDS)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>OKHttp会自动管理连接池，重用连接以减少延迟。可以通过配置连接池大小和保持时间来优化性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javaConnectionPool pool = new ConnectionPool(5, 5, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">OkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">        .connectionPool(pool)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>OKHttp支持WebSocket，可以通过<code>newWebSocket</code>方法来建立WebSocket连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">javaRequest request = new Request.Builder()</span><br><span class="line">        .url(&quot;wss://echo.websocket.org&quot;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">WebSocketListener listener = new WebSocketListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onOpen(WebSocket webSocket, Response response) &#123;</span><br><span class="line">        webSocket.send(&quot;Hello, WebSocket!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(WebSocket webSocket, String text) &#123;</span><br><span class="line">        System.out.println(&quot;Received: &quot; + text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onFailure(WebSocket webSocket, Throwable t, Response response) &#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">OkHttpClient client = new OkHttpClient();</span><br><span class="line">WebSocket webSocket = client.newWebSocket(request, listener);</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">javapublic class OkHttpExample &#123;</span><br><span class="line">    private final OkHttpClient client = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">    public void run() throws Exception &#123;</span><br><span class="line">        Request request = new Request.Builder()</span><br><span class="line">                .url(&quot;https://api.example.com/getData&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        client.newCall(request).enqueue(new Callback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call call, IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line">                if (response.isSuccessful()) &#123;</span><br><span class="line">                    System.out.println(response.body().string());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.err.println(&quot;Request failed: &quot; + response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        new OkHttpExample().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OKHttp是一个功能强大且灵活的HTTP客户端库，适用于各种网络请求场景。它提供了便捷的API来处理同步和异步请求，支持丰富的功能如拦截器、缓存、超时设置和WebSocket。通过本文的介绍，读者应该能够熟练掌握OKHttp的基本用法和高级特性，并在实际项目中应用它们来构建高效的网络应用。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> okhttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler基础(一)流程处理</title>
      <link href="/blog/2019/03/02/Handler%E5%9F%BA%E7%A1%80-%E4%B8%80-%E6%B5%81%E7%A8%8B%E5%A4%84%E7%90%86/"/>
      <url>/blog/2019/03/02/Handler%E5%9F%BA%E7%A1%80-%E4%B8%80-%E6%B5%81%E7%A8%8B%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Android中的Handler基础流程知识"><a href="#Android中的Handler基础流程知识" class="headerlink" title="Android中的Handler基础流程知识"></a>Android中的Handler基础流程知识</h3><p>在Android开发中，<code>Handler</code>允许我们发送和处理与线程的<code>MessageQueue</code>关联的消息和Runnable对象。本文将详细说明它们是如何协同工作的。</p><h4 id="1-核心组件的角色和关系"><a href="#1-核心组件的角色和关系" class="headerlink" title="1. 核心组件的角色和关系"></a>1. 核心组件的角色和关系</h4><ul><li><strong>Handler</strong>：负责发送消息（Message）和可执行的代码块（Runnable），并且可以在接收时处理它们。</li><li><strong>MessageQueue</strong>：用于保存和转发消息的队列，它是一个典型的先进先出（FIFO）队列。</li><li><strong>Looper</strong>：为线程提供了一个消息循环，不断地从<code>MessageQueue</code>中读取消息，并分发给对应的<code>Handler</code>处理。</li></ul><h4 id="2-Handler的工作机制"><a href="#2-Handler的工作机制" class="headerlink" title="2. Handler的工作机制"></a>2. Handler的工作机制</h4><p><code>Handler</code>的工作机制可以分为两部分：消息的发送和消息的处理。</p><h5 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5><p>当你通过<code>Handler</code>的<code>sendMessage()</code>或<code>post()</code>方法发送一个消息或Runnable时，这些调用最终会调用到<code>enqueueMessage()</code>方法，该方法将消息加入到<code>MessageQueue</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">        Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">    msg.target = <span class="built_in">this</span>;</span><br><span class="line">    msg.when = uptimeMillis;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理消息"><a href="#处理消息" class="headerlink" title="处理消息"></a>处理消息</h5><p>消息一旦被加入到<code>MessageQueue</code>，<code>Looper</code>便开始其工作循环，不断地从队列中提取消息，并回调<code>Handler</code>的<code>dispatchMessage()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要由子类实现具体处理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Looper的消息循环"><a href="#3-Looper的消息循环" class="headerlink" title="3. Looper的消息循环"></a>3. Looper的消息循环</h4><p><code>Looper</code>是实现消息循环的关键，它从<code>MessageQueue</code>中取出消息，并将其分发给对应的<code>Handler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// Quit looper</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-一个完整的示例"><a href="#4-一个完整的示例" class="headerlink" title="4. 一个完整的示例"></a>4. 一个完整的示例</h4><p>考虑一个使用<code>Handler</code>的完整示例，我们在子线程中发送消息，然后在主线程中更新UI：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mHandler = <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">                <span class="comment">// 更新UI等操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">            msg.what = <span class="number">1</span>; <span class="comment">// 消息类型</span></span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>理解<code>Handler</code>、<code>Looper</code>和<code>MessageQueue</code>的工作原理是优化Android应用性能和避免常见问题（如内存泄漏）的关键。通过源码分析，我们可以更深入地理解这些组件是如何协作的，从而编写出更加健壮和响应性强的应用。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令</title>
      <link href="/blog/2018/11/18/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2018/11/18/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常用的Git操作命令</p></blockquote><ul><li><a href="#%E5%AE%89%E8%A3%85git">安装Git</a></li><li>配置文件<ul><li><a href="#%E6%9F%A5%E7%9C%8Bconfig">查看config</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF">设置用户信息</a></li><li><a href="#git%E5%88%AB%E5%90%8D">Git别名</a></li><li><a href="#gitignore%E6%96%87%E4%BB%B6">.gitignore文件</a></li></ul></li><li>仓库的基础操作<ul><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93">初始化仓库</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA">添加文件到暂存区</a></li><li><a href="#status%E4%BB%93%E5%BA%93">status仓库</a></li><li><a href="#diff%E4%BB%93%E5%BA%93">diff仓库</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%96%B0">提交更新</a></li><li><a href="#%E7%A7%BB%E9%99%A4%E6%96%87%E4%BB%B6">移除文件</a></li><li><a href="#%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6">移动文件</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4">查看历史提交</a></li><li><a href="#%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C">撤销操作</a></li><li><a href="#%E6%A0%87%E7%AD%BE">标签</a></li></ul></li><li>分支操作<ul><li><a href="#%E5%88%86%E6%94%AF%E7%9A%84%E5%88%9B%E5%BB%BA">分支的创建</a></li><li><a href="#%E5%88%86%E6%94%AF%E7%9A%84%E5%88%87%E6%8D%A2">分支的切换</a></li><li><a href="#%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6">分支合并</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF">删除分支</a></li><li><a href="#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86">分支管理</a></li><li><a href="#%E5%8F%98%E5%9F%BA">变基</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">远程分支</a></li><li><a href="#%E8%B7%9F%E8%B8%AA%E5%88%86%E6%94%AF">跟踪分支</a></li></ul></li><li>远程仓库操作<ul><li><a href="#%E5%85%8B%E9%9A%86%E4%BB%93%E5%BA%93">克隆仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">查看远程仓库</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">添加远程仓库</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%8B%89%E5%8F%96%E6%8E%A8%E9%80%81">远程仓库的拉取推送</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%A7%BB%E9%99%A4%E9%87%8D%E5%91%BD%E5%90%8D">远程仓库移除重命名</a></li></ul></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><strong>Linux</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install git</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><p><strong>Mac</strong></p><p>直接在<code>Terminal</code>执行<code>git</code>命令, 如果没有会提示安装方法.</p><p>如果喜欢安装程序的话, <a href="http://git-scm.com/download/mac">点这里</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>第一次安装, 千万别要忘了配置你的git的使用者名字和邮箱. 这个道理很简单, 每一次的提交时需要记录提交者的, 如果没有提交者, 那么bug出现找谁来背锅??</p><h3 id="查看config"><a href="#查看config" class="headerlink" title="查看config"></a>查看config</h3><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。</p><p><strong><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --system --list</span><br></pre></td></tr></table></figure><hr><p><strong><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure><hr><p>当前使用仓库的 Git 目录中的 config 文件（就是 <code>.git/config</code>）：针对该仓库。</p><p>每一个级别覆盖上一级别的配置，所以<code>.git/config</code>的配置变量会覆盖<code>/etc/gitconfig</code>中的配置变量。</p><hr><p><strong>当然, 也可以查看某一项配置信息.</strong></p><ul><li>形式:<code>git config [--global|--system] &lt;key&gt;</code></li></ul><p><em>查看最终的配置属性值</em> <code>$ git config user.name</code></p><p><em>查看当前系统的属性值</em> <code>$ git config --global user.name</code></p><hr><h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;name&quot;</span><br><span class="line">$ git config --global user.email xxx@163.com</span><br></pre></td></tr></table></figure><p>使用<code>--global</code>选项, 当以后在该系统上做的任何操作都会使用此属性. 如果你需要在某一个特定的项目使用其他名字和邮箱, 那么可以通过设置<strong>项目中的config文件</strong>, 这样config中的属性会覆盖掉<strong>global的全局属性</strong>, 并且当在其他项目中并不会造成影响. 使用方式只需要去掉<code>--global</code>参数即可修改项目中的<code>.git/config</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name &quot;name&quot;</span><br></pre></td></tr></table></figure><hr><p><strong>获取帮助手册</strong></p><p>形式: <code>git help &lt;verb&gt;</code> 或者 <code>git &lt;verb&gt; --help</code></p><p>比如查看config手册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git help config</span><br></pre></td></tr></table></figure><h3 id="Git别名"><a href="#Git别名" class="headerlink" title="Git别名"></a>Git别名</h3><p>例如: 生成别名之后可以在日后用简短的表示来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.br branch</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><h3 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h3><p>对于自动生成的文件, 日志, 编译的临时文件等. 可以对其进行配置, 让git不追踪这些文件</p><p>规范如下:</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（&#x2F;）开头防止递归。</li><li>匹配模式可以以（&#x2F;）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反</li></ul><p><code>glob模式</code>是指shell所使用的简化了的正则表达式.</p><ul><li><code>*</code> :匹配零个或多个任意字符</li><li><code>[abc]</code> :只匹配括号内的任意一个字符</li><li><code>[0-9]</code> :使用短划线表示范围, 可以匹配0到9之间的任何字符.</li><li><code>?</code> :匹配任意一个字符</li><li><code>**</code>:匹配任意的中间目录,例如<code>a/**/z</code>可以匹配<code>a/z</code>,<code>a/b/z</code>,<code>a/b/c/z</code>等</li></ul><p>如下给出一个样板:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有以 .c结尾的文件</span><br><span class="line">*.c</span><br><span class="line"></span><br><span class="line"># 但是 stream.c 会被git追踪</span><br><span class="line">!stream.c</span><br><span class="line"></span><br><span class="line"># 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># 忽略所有在build文件夹下的文件</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># 忽略所有在doc目录下的.pdf文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="仓库的基础操作"><a href="#仓库的基础操作" class="headerlink" title="仓库的基础操作"></a>仓库的基础操作</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加全部暂存区和历史区不存在的或者有更改的 `.c`结尾的文件</span><br><span class="line">$ git add *.c</span><br><span class="line"></span><br><span class="line"># 添加全部暂存区和历史区不存在的或者有更改的文件</span><br><span class="line">$ git add .  </span><br><span class="line"></span><br><span class="line"># 指定文件添加</span><br><span class="line">$ git add test.c</span><br></pre></td></tr></table></figure><hr><h3 id="status仓库"><a href="#status仓库" class="headerlink" title="status仓库"></a>status仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 如果需要显示一种紧凑式格式</span><br><span class="line">$ git status --short      # 等价于 $ git status -s</span><br></pre></td></tr></table></figure><p>紧凑式中字母的表示含义如下:</p><ul><li><code>??</code> :表示新添加的未追踪的文件</li><li><code> M</code> :M出现在右边,表示该文件被修改但是还没有放入暂存区</li><li><code>M </code> :M出现在左边,表示文件被修改已经放入了暂存区</li><li><code>MM</code> :出现两个,代表此文件在工作区修改已经放入了暂存区, 但之后有进行了修改,没有添加到暂存区</li></ul><hr><h3 id="diff仓库"><a href="#diff仓库" class="headerlink" title="diff仓库"></a>diff仓库</h3><p>如果你想知道文件具体修改的内容, 那么<code>diff</code>会很有用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看以追踪但尚未暂存的文件更新了哪些部分, 不添加额外参数</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 对使用了add添加到了暂存区的内容, 使用--staged参数或者--cached</span><br><span class="line">$ git diff --staged</span><br></pre></td></tr></table></figure><h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 常规做法</span><br><span class="line">$ git commit -m &quot;commit message&quot;</span><br><span class="line"></span><br><span class="line"># 如果不使用-m参数添加提交信息, git会使用默认的编译器如vi进行提交描述编写.</span><br><span class="line"># 可通过$ git config --global core.edit 设定喜欢的编译器</span><br><span class="line"></span><br><span class="line"># 跳过暂存区操作, 直接从工作区提交到历史区</span><br><span class="line">$ git commit -a -m &quot;&quot;          #等价于: $ git commit -am &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>如果在工作区间对一个文件进行删除, 需要先进行<code>add</code>,然后才可以提交. 使用<code>git rm</code>可以直接在工作区间删除文件, 并提交到暂存区.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git rm fileName</span><br><span class="line"></span><br><span class="line"># 如果文件修改,并添加了暂存区, 需要使用-f参数来强制删除(force)</span><br><span class="line">$ git rm -f fileName</span><br><span class="line"></span><br><span class="line"># 可以使用glob模式,如下</span><br><span class="line">$ git rm log/\*.log         # 删除log目录下所有名称是.log结尾文件</span><br><span class="line">$ git rm \*~                # 删除以~结尾的所有文件</span><br></pre></td></tr></table></figure><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>同样使用<code>git rm</code>会方便很多, 并且如果相对文件重命名也可以如此</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv file_from file_to</span><br></pre></td></tr></table></figure><p>当执行了这条语句之后, 只需要在下一次<code>commit</code>即可, 不需要考虑额外操作. 等价于如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv file_from file_to</span><br><span class="line">$ git rm file_from</span><br><span class="line">$ git rm file_to</span><br></pre></td></tr></table></figure><h3 id="查看历史提交"><a href="#查看历史提交" class="headerlink" title="查看历史提交"></a>查看历史提交</h3><p>如果是最基本的<code>git log</code>, 那么会按提交时间列出所有更新, 包括提交的SHA-1校验和, 作者名称,邮箱,提交时间,提交说明. 下面说说常用选项.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># -p:仅显示最近x次的提交  格式 $ git log -p -x</span><br><span class="line">$ git log -p -2             # 查看最近的两次提交内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># --stat:简略的显示每次提交的内容更改, 如哪些文件变更,多少删除,多少添加等</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># --pretty: 指定默认不同格式展示信息</span><br><span class="line">$ git log --pretty=oneline              #每次提交用一行显示</span><br><span class="line"></span><br><span class="line">$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;  </span><br><span class="line"># 效果:1a99c42 - 苏, 19 hours ago : 无意义提交</span><br></pre></td></tr></table></figure><p><strong>关于<code>format</code>对应的常用占位符的写法和意义</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 –date&#x3D; 选项定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者(committer)的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><hr><p><strong>图形展示分支的合并历史</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --oneline   #oneline只是让输出看起来比较舒服</span><br></pre></td></tr></table></figure><hr><p><strong>git log的一些其他操作</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异。</td></tr><tr><td>–stat</td><td>显示每次更新的文件修改统计信息。</td></tr><tr><td>–shortstat</td><td>只显示 –stat 中最后的行数修改添加移除统计。</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单。</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单。</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如，“2 weeks ago”）。</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史。</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td></tr></tbody></table><p><strong>查找一个字符串的出现和删除的提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用限制符-S后面紧跟要查询的字符串</span><br><span class="line">$ git log -Smethod_name</span><br><span class="line"></span><br><span class="line"># 或者针对一个文件进行更改的提交查询, 只需要在后面追加文件名称即可</span><br><span class="line">$ git log fileName</span><br></pre></td></tr></table></figure><p>哈哈,即使如果你不小心写个隐藏bug不管几个月之后,如果老大要想找出问题是写引发的其实很简单.例如这样 <code>$ git log -p fileName</code> 想甩锅?算了吧,还是认错以后多注意吧.</p><p><strong>还有一些限制log输出的选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>–since, –after</td><td>仅显示指定时间之后的提交。</td></tr><tr><td>–until, –before</td><td>仅显示指定时间之前的提交。</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交。</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交。</td></tr><tr><td>–grep</td><td>仅显示含指定关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><p>一个实际的例子，如果要查看 Git 仓库中，2016 年 11 月1号到7号，作者叫苏的提交文件，可以用下面的查询命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=&quot;%h - %s&quot; --author=苏 --since=&quot;2016-11-01&quot; \</span><br><span class="line">   --before=&quot;2016-11-07&quot;</span><br></pre></td></tr></table></figure><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><p><strong>amend重新提交</strong></p><p>当我们<code>commit</code>之后突然发现漏掉了一个文件, 这个时候不可能对一个文件再进行<code>commit</code>一次, 这样做就显得很多余, 而如果版本回退之前再添加也比较麻烦. 这个时候就可以使用这个<code>amend</code>命令.如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;版本1.5开发代码&quot;</span><br><span class="line"></span><br><span class="line"># 正当你松了一口气的时候发现配置文件忘记修改了, 你赶紧修改,并适合用add到暂存区</span><br><span class="line">$ git add project.property</span><br><span class="line">$ git commit --amend         </span><br><span class="line"># 你会神奇的发现你没有增加任何多余的操作就把漏掉的文件补齐到最后一次提交中</span><br></pre></td></tr></table></figure><hr><p><strong>取消暂存的文件</strong></p><p>就是对文件进行了<code>git add</code>操作. 这个时候可以<code>reset</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 让暂存区的文件变成文件修改但是没有添加暂存区的状态</span><br><span class="line">$ git reset HEAD fileName</span><br></pre></td></tr></table></figure><p><strong>撤销对文件的修改</strong></p><p>场景: 当文件修改了, 但是还没有进行<code>git add</code>的时候还只是在工作区间, 还原成最后一次提交的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- filename</span><br></pre></td></tr></table></figure><p>要注意使用, 使用之前确定是否要抛弃已经添加的内容. 因为这个动作可能让你最新添加的内容彻底丢失. 因为没有进行<code>commit</code>, 一般来说进行了<code>commit</code>的内容都是可以恢复的.</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><blockquote><p>Git可以给历史中的某一个提交打上标签, 以示重要. 比如每次正式版本的上线等.</p></blockquote><p><strong>列出标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 如果你只关心某一部分的标签, 例如只对v2.x的标签感兴趣,你可以这样做</span><br><span class="line">$ git tag -l &#x27;v2.*&#x27;</span><br></pre></td></tr></table></figure><hr><p><strong>创建标签</strong></p><p>标签分为两种一种是<code>附加标签</code>另一种是<code>轻量标签</code>.</p><ul><li>附加标签: 会保存打标签者的信息, 时间和附加信息. 最后更随打标签的提交</li><li>轻量标签: 只是在一个提交上做一个标记. 存储在一个专门保存标签的文件,指向提交的hash值</li></ul><p>先来看附加标签:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0 -m &#x27;附加信息&#x27;</span><br></pre></td></tr></table></figure><p>轻量标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure><p>后期打标签, 就是对已经提交某次提交进行追加标签设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 可以先使用git log --oneline获取提交历史的hash值</span><br><span class="line">$ git log --oneline</span><br><span class="line"></span><br><span class="line"># 然后把hash值赋值到标签语句之后</span><br><span class="line">$ git tag -a v1.1 a6b4c97</span><br></pre></td></tr></table></figure><p><strong>共享标签</strong></p><p>默认情况下, <code>git push</code>不会把标签传递到远程服务器. 需要显示的推送标签共享到服务器 例如: <code>git push origin [tagname]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.4</span><br><span class="line"></span><br><span class="line"># 如果想把本地上所有在远程服务器上的不存在标签删除掉,可以这样</span><br><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><hr><p><strong>检出标签</strong></p><p>git中不能真正的检出一个标签, 但是可以在标签处创建一个新的分支.如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b checkbranch2 v2.0</span><br></pre></td></tr></table></figure><hr><p><strong>查看标签对应的信息</strong></p><p>使用<code>git show &lt;标签名&gt;</code>可以查看对应标签的详细信息, 如果<code>git show</code>这样的命令只是显示上次提交的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show v1.4</span><br></pre></td></tr></table></figure><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><p>分支的创建, 其实本质就是创建一个可以移动的指针,这个指针名就是新的分支名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line"></span><br><span class="line"># 上面的只是创建了一个分支. 并没有切换, 可以使用一条命令创建并且换到新分支</span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"># 可以通过`git log`命令查看各个分支所指向的对象</span><br><span class="line">$ git log --oneline --decorate</span><br><span class="line"></span><br><span class="line"># 如果你想查看图形式的分叉历史,可以这样:</span><br><span class="line">$ git log --oneline --decorate --graph --all</span><br></pre></td></tr></table></figure><h3 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h3><p>所谓的分支切换就是<code>HEAD</code>指针的指向的改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>利用<code>git merge &lt;要合并到的目标分支&gt;</code>, 这条命令会把当前所在分支与目标分支的内容合并, 可以这样理解, 如果当你试图向目标分支合并时, 如果当前分支可以顺着一个分支走下去, 那么本质上其实只是当前指针的向前移动, 由于这种情况下的合并并没有需要解决的分期, 所以git会称这个是<code>fast-forward</code>快速前进.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>当一个功能分支开发完毕之后, 并进行了合并, 通常这个分支也就被删除,以保证仓库中的干净.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除dev分支</span><br><span class="line">$ git branch -d dev</span><br><span class="line"></span><br><span class="line"># 如果dev分支还有未提交的内容,为了保证你的数据安全git默认是不允许删除,可以使用`-D`强制删除</span><br><span class="line">$ git branch -D dev</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p><code>git branch</code>命令不只是可以创建于删除分支. 如果不添加任何参数, 那么会得到所有分支的一个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git branch        # 其中一个分支前面的*代表,目前检出的分支就是HEAD指针所指向的分支</span><br><span class="line"></span><br><span class="line"># 追加-v参数 可以展示每一个分支最后一次提交</span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"># --merged:查看那些分支已经合并到当前分支</span><br><span class="line">$ git branch --merged        # 一般这个列表展示的除了*号的其他分支, 都可以删除</span><br><span class="line"></span><br><span class="line"># --no-merged:查看所有包含未合并工作的分支</span><br><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><blockquote><p>和合并<code>merge</code>相似的效果都是合并分支, 但是使用变基<code>rebase</code>可以让提交历史变得更简洁. 如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># rebase &lt;目标分支名&gt; [需要移动变基底的分支]</span><br><span class="line">$ git rebase master experiment</span><br><span class="line"></span><br><span class="line"># 此时目标分支后面会追加另一个分支的提交. 此时只需要切换到master分支,合并分支即可.</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge experiment</span><br></pre></td></tr></table></figure><p><code>rebase</code>原理就是, 从目标分支和要变基的分支向上查找出共同祖先节点就是<code>c2</code>, 然后把要变基的分支到<code>c2</code>节点的所有提交,提取出相应的修改生成一个副本, 并追加到目标分创建相对应的提交. 此时变基的分支指向<code>目标分支master</code>的后面某一次提交. 此时只要使用修改<code>master</code>指向指针使用<code>merge</code>即可.</p><h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 获得远程的仓库列表</span><br><span class="line">$ git ls-remote origin</span><br><span class="line"></span><br><span class="line"># 如果想获得更多的信息</span><br><span class="line">$ git remote show origin</span><br><span class="line"></span><br><span class="line"># 查看远程分支和本地分支</span><br><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><hr><p><strong>拉取远程分支</strong></p><p>假设远程如果有一个<code>dev</code>分支, 你使用<code>fetch</code>进行抓取. 这个时候, 本地不会自动生成一个可编辑的副本, 换句话说就是这种情况下, 不会有一个新的<code>dev</code>本地分支, 只有一个不可以修改的<code>origin/dev</code>指针. 这个时候可以运行<code>git merge origin/dev</code>命令, 将这些远程dev分支的工作合并到当前分支. 如果想要在自己本地的dev分支上工作, 可以将其建立在远程分支之上.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><hr><p><strong>创建远程分支</strong></p><p>如果你的本地有一个新建的<code>dev</code>分支, 并且你进行了提交, 此时你想把这个分支也提交到远程的<code>dev</code>分支, 但是远程还没有创建<code>dev</code>, 这个时候可以使用如下命令: <code>git push &lt;远程仓库名&gt; &lt;要推送的本地分支&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><hr><p><strong>删除远程分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除远程dev分支</span><br><span class="line">$ git push origin --delete dev</span><br></pre></td></tr></table></figure><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><p>从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 <code>跟踪分支</code>（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入<code> git pull</code>，<code>Git</code> 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p><p>当克隆一个仓库时，它通常会自动地创建一个跟踪 <code>origin/master</code> 的 <code>master</code> 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 <code>master</code> 分支。 最简单的就是之前看到的例子，运行 <code>git checkout -b [branch] [remotename]/[branch]</code>。 这是一个十分常用的操作所以 Git 提供了 <code>--track</code> 快捷方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --track origin/dev</span><br><span class="line"></span><br><span class="line"># 如果想要自定义本地分支名字</span><br><span class="line">$ git checkout -b 任意分支名字 origin/dev</span><br></pre></td></tr></table></figure><hr><p><strong>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</strong>，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置HEAD指向的分支的上游为远程dev分支</span><br><span class="line">$ git branch -u origin/dev</span><br></pre></td></tr></table></figure><hr><p><strong>查看设置的所有跟踪分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -vv</span><br></pre></td></tr></table></figure><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;url&gt;</span><br><span class="line"></span><br><span class="line"># 如果你想创建自己的仓库名, 就是本地根文件夹的名称, 那么可以如下追加名称</span><br><span class="line">$ git clone &lt;url&gt; [dirName]</span><br></pre></td></tr></table></figure><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 默认查看远程仓库的方式</span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"># 查看远程仓库的读写权限. 如果可以看到(push)说明提交的推送</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><p>如果需要查看某一个仓库更多的信息时, 使用<code>git remote show ...</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式: git remote add [shortName] &lt;url&gt;  同时可以指定一个仓库的引用名称,例如</span><br><span class="line">$ git remote add rp git@github.com:suzeyu1992/GitOperateDemo.git</span><br><span class="line"></span><br><span class="line"># 此时你想对新加的远程进行拉取动作, 只需要使用之前的引用名称就可以</span><br><span class="line">$ git fetch rp</span><br></pre></td></tr></table></figure><h3 id="远程仓库的拉取推送"><a href="#远程仓库的拉取推送" class="headerlink" title="远程仓库的拉取推送"></a>远程仓库的拉取推送</h3><p><strong>拉取</strong></p><p>大家常用的可能是<code>git pull</code>这个指令. 这个指令的通常会从服务器上抓取数据自动尝试合并到当前所在分支.</p><p>而我们可以也可以利用<code>git fetch </code>进行本地分支所追踪的远程分支没有提交. 然后我们可以手动的进行合并.</p><p><strong>推送</strong></p><p><code>git push [remote-name] [branch-name]</code> 例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>只有当对服务器有写入权限, 并且之前没有人提交, 这条命令才会生效.</p><p>上面的这两个推送也好拉取也好. 如果所在分支设置了远程服务器分支的追踪, 那么可以省略掉后面的仓库名和分支名. 如果没有设置那么必须显示的指定.</p><h3 id="远程仓库移除重命名"><a href="#远程仓库移除重命名" class="headerlink" title="远程仓库移除重命名"></a>远程仓库移除重命名</h3><p>对远程仓库的名称进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename oldName newName</span><br></pre></td></tr></table></figure><p>想要移除一个远程仓库,例如服务器搬走了,不再使用一个特定镜像,或者一个贡献者不再贡献</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm 仓库名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http1.0 vs Http2.0对比</title>
      <link href="/blog/2018/04/07/Http1-0-vs-Http2-0/"/>
      <url>/blog/2018/04/07/Http1-0-vs-Http2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-1-0-vs-HTTP-2-0-详细对比"><a href="#HTTP-1-0-vs-HTTP-2-0-详细对比" class="headerlink" title="HTTP 1.0 vs HTTP 2.0: 详细对比"></a>HTTP 1.0 vs HTTP 2.0: 详细对比</h1><p>HTTP（超文本传输协议）是万维网数据通信的基础。自从1991年发布以来，HTTP经历了多次改进和更新，HTTP&#x2F;1.0和HTTP&#x2F;2.0是两个重要的版本。本文将详细对比HTTP&#x2F;1.0和HTTP&#x2F;2.0的区别，帮助读者更好地理解它们的特性和应用场景。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0">基础概述</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86">连接管理</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94">请求和响应</a></li><li><a href="#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9">头部压缩</a></li><li><a href="#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">多路复用</a></li><li><a href="#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81">服务器推送</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E5%AF%B9%E6%AF%94">实例对比</a></li><li><a href="#%E7%BB%93%E8%AE%BA">结论</a></li></ol><h2 id="基础概述"><a href="#基础概述" class="headerlink" title="基础概述"></a>基础概述</h2><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><ul><li>发布于1996年</li><li>每次请求都需要建立一个新的TCP连接</li><li>不支持持久连接</li></ul><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><ul><li>发布于2015年</li><li>基于SPDY协议（由Google开发）</li><li>支持持久连接和多路复用</li></ul><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><h3 id="HTTP-1-0-1"><a href="#HTTP-1-0-1" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>在HTTP&#x2F;1.0中，每个请求&#x2F;响应对需要单独的TCP连接。这意味着，如果一个网页包含多个资源（如图片、CSS文件和JavaScript文件），浏览器必须为每个资源建立一个新的连接。这种方式效率低下，增加了网络延迟和服务器负载。</p><h3 id="HTTP-2-0-1"><a href="#HTTP-2-0-1" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>HTTP&#x2F;2.0使用单个持久的TCP连接处理多个请求&#x2F;响应对。这大大减少了连接建立的开销，降低了延迟，提升了性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plaintextHTTP/1.0: Connection per request</span><br><span class="line">Client -&gt; Server : Request 1 (Connection 1)</span><br><span class="line">Client -&gt; Server : Request 2 (Connection 2)</span><br><span class="line">Client -&gt; Server : Request 3 (Connection 3)</span><br><span class="line"></span><br><span class="line">HTTP/2.0: Single connection for multiple requests</span><br><span class="line">Client -&gt; Server : Request 1, Request 2, Request 3 (Connection 1)</span><br></pre></td></tr></table></figure><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><h3 id="HTTP-1-0-2"><a href="#HTTP-1-0-2" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>每个请求&#x2F;响应对都是独立的，浏览器需要等待前一个请求完成才能发送下一个请求。这种线性的处理方式导致了“队头阻塞”问题。</p><h3 id="HTTP-2-0-2"><a href="#HTTP-2-0-2" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>HTTP&#x2F;2.0支持多路复用，允许多个请求&#x2F;响应在一个连接中并发进行，解决了队头阻塞问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plaintextHTTP/1.0: Sequential request/response</span><br><span class="line">Client -&gt; Server : Request 1</span><br><span class="line">Client &lt;- Server : Response 1</span><br><span class="line">Client -&gt; Server : Request 2</span><br><span class="line">Client &lt;- Server : Response 2</span><br><span class="line"></span><br><span class="line">HTTP/2.0: Concurrent request/response</span><br><span class="line">Client -&gt; Server : Request 1, Request 2</span><br><span class="line">Client &lt;- Server : Response 1, Response 2</span><br></pre></td></tr></table></figure><h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><h3 id="HTTP-1-0-3"><a href="#HTTP-1-0-3" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>HTTP&#x2F;1.0不支持头部压缩，每个请求都需要发送完整的头部信息，增加了网络带宽消耗。</p><h3 id="HTTP-2-0-3"><a href="#HTTP-2-0-3" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>HTTP&#x2F;2.0引入了HPACK头部压缩机制，通过压缩头部信息减少了带宽使用，提高了传输效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plaintextHTTP/1.0: Uncompressed headers</span><br><span class="line">GET /index.html HTTP/1.0</span><br><span class="line">Host: example.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line"></span><br><span class="line">HTTP/2.0: Compressed headers</span><br><span class="line">GET /index.html HTTP/2.0</span><br><span class="line">(Headers compressed using HPACK)</span><br></pre></td></tr></table></figure><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><h3 id="HTTP-1-0-4"><a href="#HTTP-1-0-4" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>每个请求&#x2F;响应对占用一个连接，不能同时处理多个请求。</p><h3 id="HTTP-2-0-4"><a href="#HTTP-2-0-4" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>在一个TCP连接上同时处理多个请求和响应，极大地提高了传输效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plaintextHTTP/1.0: Single request per connection</span><br><span class="line">Client -&gt; Server : Request 1</span><br><span class="line">Client &lt;- Server : Response 1</span><br><span class="line"></span><br><span class="line">HTTP/2.0: Multiple requests per connection</span><br><span class="line">Client -&gt; Server : Request 1, Request 2</span><br><span class="line">Client &lt;- Server : Response 1, Response 2</span><br></pre></td></tr></table></figure><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h3 id="HTTP-1-0-5"><a href="#HTTP-1-0-5" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>没有内置的流量控制机制。</p><h3 id="HTTP-2-0-5"><a href="#HTTP-2-0-5" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>引入了流量控制机制，允许客户端和服务器控制数据传输的速率，防止网络拥塞。</p><h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><h3 id="HTTP-1-0-6"><a href="#HTTP-1-0-6" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>不支持服务器推送。</p><h3 id="HTTP-2-0-6"><a href="#HTTP-2-0-6" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h3><p>支持服务器推送功能，服务器可以主动向客户端推送资源，减少了延迟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plaintextHTTP/2.0: Server Push</span><br><span class="line">Client -&gt; Server : Request /index.html</span><br><span class="line">Server -&gt; Client : Response /index.html, Push /style.css, Push /script.js</span><br></pre></td></tr></table></figure><h2 id="实例对比"><a href="#实例对比" class="headerlink" title="实例对比"></a>实例对比</h2><h3 id="HTTP-1-0实例"><a href="#HTTP-1-0实例" class="headerlink" title="HTTP&#x2F;1.0实例"></a>HTTP&#x2F;1.0实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plaintextGET /index.html HTTP/1.0</span><br><span class="line">Host: example.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line"></span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line"></span><br><span class="line">&lt;html&gt;...&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="HTTP-2-0实例"><a href="#HTTP-2-0实例" class="headerlink" title="HTTP&#x2F;2.0实例"></a>HTTP&#x2F;2.0实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plaintext:method = GET</span><br><span class="line">:path = /index.html</span><br><span class="line">:scheme = https</span><br><span class="line">:authority = example.com</span><br><span class="line"></span><br><span class="line">HTTP/2.0 200</span><br><span class="line">content-type: text/html</span><br><span class="line">content-length: 1024</span><br><span class="line"></span><br><span class="line">&lt;html&gt;...&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>HTTP&#x2F;2.0相对于HTTP&#x2F;1.0在多个方面进行了改进，特别是在连接管理、请求和响应处理、头部压缩、多路复用、流量控制和服务器推送等方面。通过这些改进，HTTP&#x2F;2.0大幅提升了传输效率和性能，减少了延迟，改善了用户体验。理解这两者之间的区别，有助于我们在实际应用中更好地选择和优化网络协议。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用配置及常见问题</title>
      <link href="/blog/2018/02/01/Git%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/02/01/Git%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="在-Ubuntu-上配置-SSH-和-Git-以便与-GitHub-进行交互的完整步骤如下："><a href="#在-Ubuntu-上配置-SSH-和-Git-以便与-GitHub-进行交互的完整步骤如下：" class="headerlink" title="在 Ubuntu 上配置 SSH 和 Git 以便与 GitHub 进行交互的完整步骤如下："></a>在 Ubuntu 上配置 SSH 和 Git 以便与 GitHub 进行交互的完整步骤如下：</h3><h3 id="1-检查是否已安装-Git"><a href="#1-检查是否已安装-Git" class="headerlink" title="1. 检查是否已安装 Git"></a>1. 检查是否已安装 Git</h3><p>首先，确保你的系统上已经安装了 Git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果没有安装 Git，可以通过以下命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashsudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h3 id="2-生成-SSH-密钥"><a href="#2-生成-SSH-密钥" class="headerlink" title="2. 生成 SSH 密钥"></a>2. 生成 SSH 密钥</h3><ol><li>生成新的 SSH 密钥：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>如果你使用的是旧版本的 OpenSSH（7.8 之前），可以使用 <code>rsa</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><ol><li>当提示你输入文件保存位置时，按下 Enter 键以接受默认位置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vbnetGenerating public/private ed25519 key pair.</span><br><span class="line">Enter file in which to save the key (/home/your_username/.ssh/id_ed25519):</span><br></pre></td></tr></table></figure><ol><li>输入一个安全的密码短语（或留空）：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graphqlEnter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><h3 id="3-添加-SSH-密钥到-ssh-agent"><a href="#3-添加-SSH-密钥到-ssh-agent" class="headerlink" title="3. 添加 SSH 密钥到 ssh-agent"></a>3. 添加 SSH 密钥到 ssh-agent</h3><ol><li>启动 ssh-agent：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><ol><li>将 SSH 私钥添加到 ssh-agent：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure><h3 id="4-添加-SSH-公钥到-GitHub"><a href="#4-添加-SSH-公钥到-GitHub" class="headerlink" title="4. 添加 SSH 公钥到 GitHub"></a>4. 添加 SSH 公钥到 GitHub</h3><ol><li>复制你的 SSH 公钥到剪贴板：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><ol><li>登录到 <a href="https://github.com/">GitHub</a>。</li><li>点击右上角的头像，然后点击 <strong>Settings</strong>。</li><li>在左侧菜单中，点击 <strong>SSH and GPG keys</strong>。</li><li>点击 <strong>New SSH key</strong>。</li><li>将复制的公钥粘贴到 <strong>Key</strong> 字段中，并给密钥取一个名称，然后点击 <strong>Add SSH key</strong>。</li></ol><h3 id="5-配置-Git-用户信息"><a href="#5-配置-Git-用户信息" class="headerlink" title="5. 配置 Git 用户信息"></a>5. 配置 Git 用户信息</h3><ol><li>配置你的 Git 用户名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><ol><li>配置你的 Git 邮箱地址：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="6-验证-SSH-连接"><a href="#6-验证-SSH-连接" class="headerlink" title="6. 验证 SSH 连接"></a>6. 验证 SSH 连接</h3><p>使用以下命令来验证是否成功配置了 SSH 密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置成功，你应该会看到类似于以下内容的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vbnet</span><br><span class="line"></span><br><span class="line">Hi your_username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="7-克隆-GitHub-仓库"><a href="#7-克隆-GitHub-仓库" class="headerlink" title="7. 克隆 GitHub 仓库"></a>7. 克隆 GitHub 仓库</h3><p>现在，你可以使用 SSH 克隆 GitHub 仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git clone git@github.com:your_username/your_repository.git</span><br></pre></td></tr></table></figure><h3 id="8-推送到远程仓库"><a href="#8-推送到远程仓库" class="headerlink" title="8. 推送到远程仓库"></a>8. 推送到远程仓库</h3><ol><li>添加更改：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><ol><li>提交更改：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Your commit message&quot;</span><br></pre></td></tr></table></figure><ol><li>推送到远程仓库：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>确保在 GitHub 上正确设置了你的 SSH 公钥。</li><li>使用 SSH URL 进行 Git 操作，例如 <code>git@github.com:your_username/your_repository.git</code>。</li><li>使用合适的密码短语来保护你的 SSH 私钥。</li></ul><h3 id="9-Git设置取消代理"><a href="#9-Git设置取消代理" class="headerlink" title="9. Git设置取消代理"></a>9. Git设置取消代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h3 id="10-Git碰到PAT检验失败-无法push"><a href="#10-Git碰到PAT检验失败-无法push" class="headerlink" title="10. Git碰到PAT检验失败,无法push"></a>10. Git碰到PAT检验失败,无法push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[remote rejected] (refusing to allow a Personal Access Token to create or update xxx)</span><br><span class="line">error: failed to push some refs to</span><br></pre></td></tr></table></figure><p>尝试以下步骤来解决排查:</p><ol><li><p>创建 PAT（个人访问令牌）：<a href="https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">官方文档</a>。</p></li><li><p>然后在终端中，<br><code>git remote add origin https://github.com/&lt;account&gt;/&lt;repo&gt;.git</code></p><p>平时使用的这个方式来添加远程仓库地址,可以尝试以下:<br><code>git remote add origin https://&lt;PAT&gt;@github.com/&lt;account&gt;/&lt;repo&gt;.git</code></p><p>如果碰到远程仓库已经存在的提示,先删除:</p><p><code>get remote</code>查看当前的地址,然后<code>git remote rm origin</code></p></li><li><p>继续操作<code>git branch -M main</code>和<code>git push -u origin main</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
